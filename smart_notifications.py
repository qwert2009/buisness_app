import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import json

class SmartNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
    
    def __init__(self, db_path='business_manager.db'):
        self.db_path = db_path
    
    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def get_low_stock_alerts(self, user_id, threshold=5):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        conn = self.get_connection()
        try:
            query = '''
                SELECT product_name, quantity, 
                       CASE 
                           WHEN quantity = 0 THEN 'üî¥ –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!'
                           WHEN quantity <= ? THEN 'üü° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ!'
                           ELSE 'üü¢ –í –Ω–∞–ª–∏—á–∏–∏'
                       END as status
                FROM inventory 
                WHERE user_id = ? AND quantity <= ?
                ORDER BY quantity ASC
            '''
            
            df = pd.read_sql_query(query, conn, params=(threshold, user_id, threshold))
            
            alerts = []
            for _, row in df.iterrows():
                if row['quantity'] == 0:
                    alerts.append({
                        'type': 'critical',
                        'icon': 'üö®',
                        'title': f"–¢–æ–≤–∞—Ä '{row['product_name']}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!",
                        'message': "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥",
                        'priority': 'high'
                    })
                else:
                    alerts.append({
                        'type': 'warning',
                        'icon': '‚ö†Ô∏è',
                        'title': f"–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞ '{row['product_name']}'",
                        'message': f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {row['quantity']} —à—Ç",
                        'priority': 'medium'
                    })
            
            return alerts
            
        finally:
            conn.close()
    
    def get_profit_alerts(self, user_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–∏–±—ã–ª–∏"""
        conn = self.get_connection()
        try:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 7 –¥–Ω—è–º–∏
            query = '''
                SELECT 
                    SUM(CASE WHEN o.created_at >= date('now', '-7 days') 
                        THEN (oi.sale_price - oi.cost_price) * oi.quantity 
                        ELSE 0 END) as current_week_profit,
                    SUM(CASE WHEN o.created_at >= date('now', '-14 days') 
                             AND o.created_at < date('now', '-7 days')
                        THEN (oi.sale_price - oi.cost_price) * oi.quantity 
                        ELSE 0 END) as previous_week_profit
                FROM order_items oi
                JOIN orders o ON oi.order_id = o.id
                WHERE o.user_id = ? AND o.created_at >= date('now', '-14 days')
            '''
            
            df = pd.read_sql_query(query, conn, params=(user_id,))
            
            if not df.empty:
                current = float(df.iloc[0]['current_week_profit'] or 0)
                previous = float(df.iloc[0]['previous_week_profit'] or 0)
                
                alerts = []
                
                if previous > 0:
                    change_percent = ((current - previous) / previous) * 100
                    
                    if change_percent > 20:
                        alerts.append({
                            'type': 'success',
                            'icon': 'üìà',
                            'title': '–û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏!',
                            'message': f"–ü—Ä–∏–±—ã–ª—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {change_percent:.1f}% –∑–∞ –Ω–µ–¥–µ–ª—é",
                            'priority': 'high'
                        })
                    elif change_percent < -20:
                        alerts.append({
                            'type': 'warning',
                            'icon': 'üìâ',
                            'title': '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏',
                            'message': f"–ü—Ä–∏–±—ã–ª—å —É–ø–∞–ª–∞ –Ω–∞ {abs(change_percent):.1f}% –∑–∞ –Ω–µ–¥–µ–ª—é",
                            'priority': 'high'
                        })
                
                return alerts
            
            return []
            
        finally:
            conn.close()
    
    def get_sales_trend_alerts(self, user_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö –ø—Ä–æ–¥–∞–∂"""
        conn = self.get_connection()
        try:
            query = '''
                SELECT 
                    COUNT(*) as orders_count,
                    AVG(oi.total_cost) as avg_order_value,
                    date(o.created_at) as order_date
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.created_at >= datetime('now', '-30 days')
                GROUP BY date(o.created_at)
                ORDER BY order_date DESC
                LIMIT 7
            '''
            
            df = pd.read_sql_query(query, conn, params=(user_id,))
            
            alerts = []
            
            if len(df) >= 3:
                recent_orders = df.head(3)['orders_count'].mean()
                older_orders = df.tail(3)['orders_count'].mean()
                
                if recent_orders > older_orders * 1.5:
                    alerts.append({
                        'type': 'success',
                        'icon': 'üöÄ',
                        'title': '–†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂!',
                        'message': f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å —Å {older_orders:.1f} –¥–æ {recent_orders:.1f}",
                        'priority': 'medium'
                    })
                elif recent_orders < older_orders * 0.7:
                    alerts.append({
                        'type': 'warning',
                        'icon': 'üìä',
                        'title': '–°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                        'message': f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å–Ω–∏–∑–∏–ª–æ—Å—å —Å {older_orders:.1f} –¥–æ {recent_orders:.1f}",
                        'priority': 'medium'
                    })
            
            return alerts
            
        finally:
            conn.close()
    
    def get_seasonal_alerts(self, user_id):
        """–°–µ–∑–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã"""
        current_month = datetime.now().month
        current_day = datetime.now().day
        
        seasonal_alerts = []
        
        # –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        if current_month == 12 and current_day >= 15:
            seasonal_alerts.append({
                'type': 'info',
                'icon': 'üéÑ',
                'title': '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Å–µ–∑–æ–Ω!',
                'message': '–í—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø–∞—Å—ã –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                'priority': 'medium'
            })
        
        # –î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞
        elif current_month == 2 and current_day <= 14:
            seasonal_alerts.append({
                'type': 'info',
                'icon': 'üíù',
                'title': '–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –±–ª–∏–∑–∫–æ!',
                'message': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥–∞—Ä–∫–∏',
                'priority': 'medium'
            })
        
        # –®–∫–æ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
        elif current_month == 8:
            seasonal_alerts.append({
                'type': 'info',
                'icon': 'üéí',
                'title': '–®–∫–æ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω!',
                'message': '–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Å–ø—Ä–æ—Å–æ–º',
                'priority': 'medium'
            })
        
        return seasonal_alerts
    
    def get_performance_insights(self, user_id):
        """–ò–Ω—Å–∞–π—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        conn = self.get_connection()
        try:
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏
            query = '''
                SELECT 
                    oi.product_name,
                    SUM((oi.sale_price - oi.cost_price) * oi.quantity) as profit,
                    SUM(oi.quantity) as total_sold
                FROM order_items oi
                JOIN orders o ON oi.order_id = o.id
                WHERE o.user_id = ? AND o.created_at >= date('now', '-30 days')
                GROUP BY oi.product_name
                ORDER BY profit DESC
                LIMIT 3
            '''
            
            df = pd.read_sql_query(query, conn, params=(user_id,))
            
            insights = []
            
            if not df.empty:
                top_product = df.iloc[0]
                insights.append({
                    'type': 'success',
                    'icon': 'üèÜ',
                    'title': '–í–∞—à –¢–û–ü —Ç–æ–≤–∞—Ä!',
                    'message': f"'{top_product['product_name']}' –ø—Ä–∏–Ω–µ—Å {top_product['profit']:.2f} –¢–ú –ø—Ä–∏–±—ã–ª–∏",
                    'priority': 'low'
                })
                
                if len(df) >= 2:
                    insights.append({
                        'type': 'info',
                        'icon': 'üìä',
                        'title': '–í–∞—à–∏ –ª–∏–¥–µ—Ä—ã –ø—Ä–æ–¥–∞–∂',
                        'message': f"–¢–û–ü-3: {', '.join(df['product_name'].tolist())}",
                        'priority': 'low'
                    })
            
            return insights
            
        finally:
            conn.close()
    
    def get_all_notifications(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        all_notifications = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞)
        all_notifications.extend(self.get_profit_alerts(user_id))
        all_notifications.extend(self.get_sales_trend_alerts(user_id))
        all_notifications.extend(self.get_seasonal_alerts(user_id))
        all_notifications.extend(self.get_performance_insights(user_id))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {'high': 1, 'medium': 2, 'low': 3}
        all_notifications.sort(key=lambda x: priority_order.get(x['priority'], 3))
        
        return all_notifications
    
    def format_notification_html(self, notification):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ HTML"""
        type_colors = {
            'critical': '#ff4444',
            'warning': '#ff8800',
            'success': '#00aa44',
            'info': '#0088ff'
        }
        
        color = type_colors.get(notification['type'], '#888888')
        
        return f"""
        <div style="
            background: linear-gradient(90deg, {color}22 0%, {color}11 100%);
            border-left: 4px solid {color};
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        ">
            <h4 style="margin: 0 0 8px 0; color: {color};">
                {notification['icon']} {notification['title']}
            </h4>
            <p style="margin: 0; color: #333;">
                {notification['message']}
            </p>
        </div>
        """

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
smart_notifications = SmartNotificationSystem()
