import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
import io
import base64
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω
st.markdown("""
<style>
    /* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ */
    * {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", system-ui, sans-serif;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ */
    .emoji {
        font-family: "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color", "Android Emoji", "Twemoji Mozilla", sans-serif;
        font-style: normal;
        font-weight: normal;
        text-rendering: optimizeLegibility;
    }
    
    /* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ */
    :root {
        --bg-primary: #ffffff;
        --bg-secondary: #f8f9fa;
        --bg-tertiary: #e9ecef;
        --text-primary: #000000;
        --text-secondary: #333333;
        --text-muted: #555555;
        --accent-blue: #003366;
        --accent-green: #004d00;
        --accent-red: #990000;
        --accent-orange: #cc6600;
        --border-light: #dee2e6;
        --border-medium: #ced4da;
        --shadow-subtle: 0 1px 3px rgba(0,0,0,0.08);
        --shadow-medium: 0 2px 8px rgba(0,0,0,0.12);
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        background: var(--bg-primary);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        color: var(--text-primary);
        line-height: 1.5;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-primary);
        font-weight: 600;
        letter-spacing: -0.025em;
        margin: 0 0 1rem 0;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .card {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: var(--shadow-subtle);
        transition: box-shadow 0.2s ease;
    }
    
    .card:hover {
        box-shadow: var(--shadow-medium);
    }
    
    /* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
    .modern-nav {
        background: var(--bg-secondary);
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 2rem;
    }
    
    .nav-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 0.75rem;
    }
    
    .nav-item {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: 6px;
        padding: 0.75rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        color: var(--text-primary);
    }
    
    .nav-item:hover {
        border-color: var(--accent-blue);
        background: var(--bg-secondary);
        transform: translateY(-1px);
    }
    
    .nav-item.active {
        background: var(--accent-blue);
        color: #000000;
        border-color: var(--accent-blue);
    }
    
    .nav-icon {
        font-size: 1.25rem;
        margin-bottom: 0.25rem;
        display: block;
    }
    
    .nav-text {
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: var(--accent-blue) !important;
        color: #000000 !important;
        border: none !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
        box-shadow: var(--shadow-subtle) !important;
    }
    
    .stButton > button:hover {
        background: #0052a3 !important;
        transform: translateY(-1px) !important;
        box-shadow: var(--shadow-medium) !important;
    }
    
    /* –§–æ—Ä–º—ã */
    .stTextInput > div > div > input {
        border: 1px solid var(--border-medium) !important;
        border-radius: 6px !important;
        padding: 0.5rem !important;
        font-size: 0.875rem !important;
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--accent-blue) !important;
        box-shadow: 0 0 0 2px rgba(0,102,204,0.1) !important;
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
    }
    
    .stSelectbox > div > div > div {
        border: 1px solid var(--border-medium) !important;
        border-radius: 6px !important;
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
    }
    
    /* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .stat-card {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: var(--shadow-subtle);
    }
    
    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: 500;
    }
    
    /* –°—Ç–∞—Ç—É—Å—ã */
    .status-success { color: var(--accent-green); }
    .status-warning { color: var(--accent-orange); }
    .status-danger { color: var(--accent-red); }
    
    /* –ó–∞–∫–∞–∑—ã */
    .order-card {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: var(--shadow-subtle);
        transition: all 0.2s ease;
    }
    
    .order-card:hover {
        box-shadow: var(--shadow-medium);
        border-color: var(--border-medium);
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }
    
    .order-title {
        color: var(--accent-blue);
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0;
        cursor: pointer;
        text-decoration: none;
    }
    
    .order-title:hover {
        text-decoration: underline;
    }
    
    .order-meta {
        color: var(--text-muted);
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }
    
    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .status-pending {
        background: #fff3cd;
        color: #663300;
        border: 1px solid #ffeaa7;
    }
    
    .status-delivered {
        background: #d1e7dd;
        color: #003300;
        border: 1px solid #badbcc;
    }
    
    .status-delayed {
        background: #f8d7da;
        color: #660000;
        border: 1px solid #f5c2c7;
    }
    
    /* –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ */
    .order-details {
        background: var(--bg-secondary);
        border-radius: 6px;
        padding: 1rem;
        margin-top: 1rem;
        border: 1px solid var(--border-light);
    }
    
    .detail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .detail-item {
        text-align: center;
    }
    
    .detail-value {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
    }
    
    .detail-label {
        font-size: 0.75rem;
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-top: 0.25rem;
    }
    
    /* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º */
    .order-actions {
        border-top: 1px solid var(--border-light);
        padding-top: 1rem;
        margin-top: 1rem;
    }
    
    /* –°–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    .stDeployButton {display: none !important;}
    .stDecoration {display: none !important;}
    #MainMenu {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    header {visibility: hidden !important;}
    .stToolbar {display: none !important;}
    .viewerBadge_container__1QSob {display: none !important;}
    .styles_viewerBadge__1yB5_ {display: none !important;}
    #stDecoration {display: none !important;}
    .reportview-container .main .block-container {
        padding-top: 1rem;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ */
    .stButton > button, .stSelectbox, .stTextInput, 
    .stMarkdown, .stMetric, h1, h2, h3, h4, h5, h6 {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", "Twitter Color Emoji", "EmojiOne Color", system-ui, sans-serif !important;
    }
    
    /* –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏ */
    .stButton > button {
        font-variant-emoji: emoji !important;
        text-rendering: optimizeSpeed !important;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .nav-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .detail-grid {
            grid-template-columns: 1fr;
        }
        
        .order-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
    .stDataFrame {
        background: var(--bg-primary) !important;
    }
    
    .stDataFrame table {
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
    }
    
    .stDataFrame th {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        font-weight: 600 !important;
        border-bottom: 2px solid var(--border-medium) !important;
    }
    
    .stDataFrame td {
        color: var(--text-primary) !important;
        border-bottom: 1px solid var(--border-light) !important;
        padding: 8px 12px !important;
    }
    
    .stDataFrame tr:hover {
        background: var(--bg-secondary) !important;
    }
    
    .stDataFrame tr:nth-child(even) {
        background: rgba(248, 249, 250, 0.5) !important;
    }
</style>
""", unsafe_allow_html=True)

def show_modern_navigation():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    unread_count = get_unread_notifications_count(st.session_state.user_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    col1, col2, col3, col4, col5, col6, col7, col8 = st.columns(8)
    
    with col1:
        if st.button("üìä –ü–∞–Ω–µ–ª—å", use_container_width=True, 
                    type="primary" if st.session_state.current_page == "dashboard" else "secondary"):
            st.session_state.current_page = "dashboard"
            st.rerun()
    
    with col2:
        if st.button("üì¶ –ó–∞–∫–∞–∑—ã", use_container_width=True,
                    type="primary" if st.session_state.current_page == "orders" else "secondary"):
            st.session_state.current_page = "orders"
            st.rerun()
    
    with col3:
        if st.button("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", use_container_width=True,
                    type="primary" if st.session_state.current_page == "order_management" else "secondary"):
            st.session_state.current_page = "order_management"
            st.rerun()
    
    with col4:
        if st.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", use_container_width=True,
                    type="primary" if st.session_state.current_page == "analytics" else "secondary"):
            st.session_state.current_page = "analytics"
            st.rerun()
    
    with col5:
        if st.button("üè™ –°–∫–ª–∞–¥", use_container_width=True,
                    type="primary" if st.session_state.current_page == "inventory" else "secondary"):
            st.session_state.current_page = "inventory"
            st.rerun()
    
    with col6:
        # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        notification_button_type = "primary" if st.session_state.current_page == "notifications" else "secondary"
        if unread_count > 0:
            button_label = f"üîî ({unread_count})"
        else:
            button_label = "üîî"
            
        if st.button(button_label, use_container_width=True, type=notification_button_type):
            st.session_state.current_page = "notifications"
            st.rerun()
    
    with col7:
        if st.button("üß† –ò–ò", use_container_width=True,
                    type="primary" if st.session_state.current_page == "smart" else "secondary"):
            st.session_state.current_page = "smart"
            st.rerun()
    
    with col8:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                    type="primary" if st.session_state.current_page == "settings" else "secondary"):
            st.session_state.current_page = "settings"
            st.rerun()

def show_admin_navigation():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if st.session_state.get('is_admin', False):
        st.markdown("---")
        st.markdown("### üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            if st.button("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "users" else "secondary",
                        key="admin_users_btn"):
                st.session_state.admin_page = "users"
                st.session_state.current_page = "admin"
                st.rerun()
        
        with col2:
            if st.button("üí≥ –ü–ª–∞—Ç–µ–∂–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "payments" else "secondary",
                        key="admin_payments_btn"):
                st.session_state.admin_page = "payments"
                st.session_state.current_page = "admin"
                st.rerun()
        
        with col3:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "stats" else "secondary",
                        key="admin_stats_btn"):
                st.session_state.admin_page = "stats"
                st.session_state.current_page = "admin"
                st.rerun()
        
        with col4:
            if st.button("üìà –û—Ç—á–µ—Ç—ã", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "reports" else "secondary",
                        key="admin_reports_btn"):
                st.session_state.admin_page = "reports"
                st.session_state.current_page = "admin"
                st.rerun()
        
        with col5:
            if st.button("‚öôÔ∏è –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "admin_settings" else "secondary",
                        key="admin_settings_btn"):
                st.session_state.admin_page = "admin_settings"
                st.session_state.current_page = "admin"
                st.rerun()
        
        st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            phone TEXT,
            full_name TEXT,
            business_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            premium_status BOOLEAN DEFAULT FALSE,
            premium_start_date TIMESTAMP,
            premium_end_date TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_type TEXT NOT NULL,
            order_name TEXT NOT NULL,
            total_payment REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            delivery_type TEXT,
            notification_sent INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL DEFAULT 0,
            weight REAL NOT NULL,
            delivery_cost REAL,
            total_cost REAL,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sale_price –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN sale_price REAL DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É delivery_type –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN item_delivery_type TEXT DEFAULT "truck"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN status TEXT DEFAULT "pending"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN expected_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN actual_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN delay_notification_sent INTEGER DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            link TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–∑—è—Ç—Å—è –ø–æ–¥ –∑–∞–∫–∞–∑)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL NOT NULL,
            weight REAL NOT NULL,
            delivery_type TEXT DEFAULT "truck",
            delivery_cost REAL NOT NULL,
            total_cost REAL NOT NULL,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT "completed",
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            financial_cushion_percent REAL DEFAULT 20.0,
            email_notifications BOOLEAN DEFAULT 1,
            smtp_server TEXT,
            smtp_port INTEGER DEFAULT 587,
            email_username TEXT,
            email_password TEXT,
            notify_new_orders BOOLEAN DEFAULT 1,
            notify_low_stock BOOLEAN DEFAULT 1,
            notify_daily_report BOOLEAN DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_new_orders BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_low_stock BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_daily_report BOOLEAN DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN setting_name TEXT")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN setting_value TEXT")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –ù–æ–≤–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            setting_name TEXT NOT NULL,
            setting_value TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            UNIQUE(user_id, setting_name)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT NOT NULL,
            title TEXT NOT NULL,
            message TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_read INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS supplier_orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            supplier_name TEXT NOT NULL,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            unit_cost REAL NOT NULL,
            total_cost REAL NOT NULL,
            order_date DATE DEFAULT (date('now')),
            expected_delivery_date DATE,
            actual_delivery_date DATE,
            status TEXT DEFAULT 'ordered',
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É inventory –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN reserved_quantity INTEGER DEFAULT 0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN min_stock_level INTEGER DEFAULT 0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN max_stock_level INTEGER DEFAULT 100")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payment_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            payment_method TEXT DEFAULT 'bank_transfer',
            status TEXT DEFAULT 'pending',
            admin_confirmed BOOLEAN DEFAULT FALSE,
            payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            confirmed_date TIMESTAMP,
            notes TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN phone TEXT")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN full_name TEXT")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN business_name TEXT")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN is_admin BOOLEAN DEFAULT FALSE")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN premium_status BOOLEAN DEFAULT FALSE")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN premium_start_date TIMESTAMP")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN premium_end_date TIMESTAMP")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN last_login TIMESTAMP")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    admin_email = 'alexkurumbayev@gmail.com'
    admin_password = hash_password('qwert123G')  # –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–∞—Ä–æ–ª—å
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (email, password_hash, is_admin, premium_status, full_name)
        VALUES (?, ?, 1, 1, 'Alex Kurumbayev')
    ''', (admin_email, admin_password))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π
def check_premium_status(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT premium_status, premium_end_date, is_admin
        FROM users 
        WHERE id = ?
    ''', (user_id,))
    
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False
    
    premium_status, premium_end_date, is_admin = result
    
    # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º
    if is_admin:
        conn.close()
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞
    if premium_status and premium_end_date:
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã
            if 'T' in premium_end_date:
                # ISO —Ñ–æ—Ä–º–∞—Ç —Å T
                end_date = datetime.fromisoformat(premium_end_date.replace('T', ' ').replace('Z', ''))
            elif len(premium_end_date) == 10:
                # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                end_date = datetime.strptime(premium_end_date, '%Y-%m-%d')
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                end_date = datetime.strptime(premium_end_date, '%Y-%m-%d %H:%M:%S')
                
            if datetime.now() > end_date:
                # –ü—Ä–µ–º–∏—É–º –∏—Å—Ç–µ–∫, –æ—Ç–∫–ª—é—á–∞–µ–º
                cursor.execute('''
                    UPDATE users 
                    SET premium_status = 0 
                    WHERE id = ?
                ''', (user_id,))
                conn.commit()
                conn.close()
                return False
        except (ValueError, TypeError) as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–µ–º–∏—É–º –∏—Å—Ç–µ–∫
            cursor.execute('''
                UPDATE users 
                SET premium_status = 0 
                WHERE id = ?
            ''', (user_id,))
            conn.commit()
            conn.close()
            return False
    
    conn.close()
    return premium_status

def activate_premium(user_id, months=1):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    start_date = datetime.now()
    end_date = start_date + timedelta(days=30 * months)
    
    cursor.execute('''
        UPDATE users 
        SET premium_status = 1,
            premium_start_date = ?,
            premium_end_date = ?
        WHERE id = ?
    ''', (start_date.strftime('%Y-%m-%d %H:%M:%S'), end_date.strftime('%Y-%m-%d %H:%M:%S'), user_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if 'user_id' in st.session_state and st.session_state.user_id == user_id:
        st.session_state.premium_status = 1
        st.session_state.is_premium = True
    
    conn.commit()
    conn.close()
    return True

def request_premium_payment(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–µ–º–∏—É–º–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO payment_history (user_id, amount, payment_method, status, notes)
        VALUES (?, 150.0, 'bank_transfer', 'pending', 'Premium subscription payment request')
    ''', (user_id,))
    
    payment_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email)
    send_payment_notification_to_admin(user_id, payment_id)
    
    return payment_id

def send_payment_notification_to_admin(user_id, payment_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–ª–∞—Ç—ã"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
    # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        SELECT email, phone, full_name FROM users WHERE id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    
    if user_data:
        email, phone, full_name = user_data
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name or email} (—Ç–µ–ª: {phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞. ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email –Ω–∞ alexkurumbayev@gmail.com
        print(f"EMAIL TO ADMIN: {message}")
    
    conn.close()

def confirm_payment(payment_id, admin_user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    cursor.execute('''
        SELECT user_id FROM payment_history WHERE id = ?
    ''', (payment_id,))
    
    result = cursor.fetchone()
    if not result:
        conn.close()
        return False
    
    user_id = result[0]
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    cursor.execute('''
        UPDATE payment_history 
        SET status = 'confirmed', 
            admin_confirmed = 1,
            confirmed_date = ?
        WHERE id = ?
    ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), payment_id))
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü
    start_date = datetime.now()
    end_date = start_date + timedelta(days=30)
    
    cursor.execute('''
        UPDATE users 
        SET premium_status = 1,
            premium_start_date = ?,
            premium_end_date = ?
        WHERE id = ?
    ''', (start_date.strftime('%Y-%m-%d %H:%M:%S'), end_date.strftime('%Y-%m-%d %H:%M:%S'), user_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if 'user_id' in st.session_state and st.session_state.user_id == user_id:
        st.session_state.premium_status = 1
        st.session_state.is_premium = True
    
    conn.commit()
    conn.close()
    return True

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(email, password, phone=None, full_name=None, business_name=None):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    try:
        password_hash = hash_password(password)
        cursor.execute('INSERT INTO users (email, password_hash, phone, full_name, business_name) VALUES (?, ?, ?, ?, ?)', 
                      (email, password_hash, phone, full_name, business_name))
        conn.commit()
        user_id = cursor.lastrowid
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('INSERT INTO settings (user_id) VALUES (?)', (user_id,))
        conn.commit()
        return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
    except sqlite3.IntegrityError:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    finally:
        conn.close()

def login_user(email, password):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    password_hash = hash_password(password)
    cursor.execute('SELECT id FROM users WHERE email = ? AND password_hash = ?', 
                  (email, password_hash))
    user = cursor.fetchone()
    conn.close()
    return user[0] if user else None

def delete_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT id, email FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            return False
        
        print(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[1]} (ID: {user[0]})")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('DELETE FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE user_id = ?)', (user_id,))
        deleted_items = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤: {deleted_items}")
        
        # –ó–∞—Ç–µ–º –∑–∞–∫–∞–∑—ã
        cursor.execute('DELETE FROM orders WHERE user_id = ?', (user_id,))
        deleted_orders = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {deleted_orders}")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        cursor.execute('DELETE FROM inventory WHERE user_id = ?', (user_id,))
        deleted_inventory = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {deleted_inventory}")
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute('DELETE FROM notifications WHERE user_id = ?', (user_id,))
        deleted_notifications = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {deleted_notifications}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute('DELETE FROM premium_subscriptions WHERE user_id = ?', (user_id,))
            deleted_subscriptions = cursor.rowcount
            print(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {deleted_subscriptions}")
        except sqlite3.OperationalError:
            print("–¢–∞–±–ª–∏—Ü–∞ premium_subscriptions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute('DELETE FROM payment_requests WHERE user_id = ?', (user_id,))
            deleted_payments = cursor.rowcount
            print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π: {deleted_payments}")
        except sqlite3.OperationalError:
            print("–¢–∞–±–ª–∏—Ü–∞ payment_requests –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute('DELETE FROM settings WHERE user_id = ?', (user_id,))
        deleted_settings = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {deleted_settings}")
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        deleted_user = cursor.rowcount
        print(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {deleted_user}")
        
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return True
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        conn.close()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
def get_delivery_rates(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT airplane_price_per_kg, truck_price_per_kg 
            FROM settings 
            WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if result:
            return {
                'airplane': result[0] if result[0] is not None else 5.0,
                'truck': result[1] if result[1] is not None else 2.0
            }
        else:
            return {
                'airplane': 5.0,
                'truck': 2.0
            }
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        # –ü–æ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
            cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
            conn.commit()
        except (sqlite3.OperationalError, sqlite3.ProgrammingError):
            pass
        
        return {
            'airplane': 5.0,
            'truck': 2.0
        }
    finally:
        conn.close()

DELIVERY_RATES = {
    'airplane': 7.0,
    'truck': 0.68
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
def add_single_order(user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type, order_date=None, expected_delivery_date=None, stock_status="unknown"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∫–ª–∞–¥–æ–º
    
    Args:
        stock_status: "in_stock", "out_of_stock", –∏–ª–∏ "unknown"
    """
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_premium = check_premium_status(user_id)
    
    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 25 –∑–∞–∫–∞–∑–æ–≤
    if not is_premium:
        cursor.execute('SELECT COUNT(*) FROM orders WHERE user_id = ?', (user_id,))
        current_orders = cursor.fetchone()[0]
        
        if current_orders >= 25:
            conn.close()
            return {
                'success': False,
                'message': "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 25 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤!",
                'order_id': None
            }
    
    delivery_rates = get_delivery_rates(user_id)
    delivery_cost = weight * delivery_rates[delivery_type]
    total_cost = sale_price * quantity + delivery_cost
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if order_date is None:
        order_date = datetime.now().date()
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—ë
    if expected_delivery_date is None:
        delivery_days = 7 if delivery_type == "airplane" else 14
        expected_delivery_date = order_date + timedelta(days=delivery_days)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–≤–∞—Ä–∞
    source = "warehouse" if stock_status == "in_stock" else "supplier"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ orders (–≤—Å–µ–≥–¥–∞!)
    cursor.execute('''
        INSERT INTO orders (user_id, order_type, order_name, delivery_type, status, 
                           created_at, expected_delivery_date, total_payment) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, 'single', product_name, delivery_type, 'pending', 
          order_date, expected_delivery_date, total_cost))
    
    order_id = cursor.lastrowid
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ order_items
    cursor.execute('''
        INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, 
                               weight, delivery_cost, total_cost, item_delivery_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (order_id, product_name, quantity, cost_price, sale_price, 
          weight, delivery_cost, total_cost, delivery_type))
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ - —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –µ–≥–æ
    if stock_status == "in_stock":
        success, message = reserve_inventory(user_id, product_name, quantity)
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏
            cursor.execute('''
                INSERT INTO notifications (user_id, type, title, message, created_at, is_read)
                VALUES (?, 'inventory', '–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω', ?, datetime('now'), 0)
            ''', (user_id, f'–ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ "{product_name}" –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}'))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑
        cursor.execute('''
            INSERT INTO order_history 
            (user_id, order_id, product_name, quantity, cost_price, sale_price, 
             weight, delivery_type, delivery_cost, total_cost, order_date, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, order_id, product_name, quantity, cost_price, sale_price, 
              weight, delivery_type, delivery_cost, total_cost, order_date, 'ordered'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        cursor.execute('''
            INSERT INTO notifications (user_id, type, title, message, created_at, is_read)
            VALUES (?, 'supplier', '–ù—É–∂–µ–Ω –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É', ?, datetime('now'), 0)
        ''', (user_id, f'–¢–æ–≤–∞—Ä "{product_name}" ({quantity} —à—Ç.) –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}'))
    
    conn.commit()
    conn.close()
    return order_id

def delete_order(order_id, user_id):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç–æ–≤–∞—Ä—ã"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('SELECT id FROM orders WHERE id = ? AND user_id = ?', (order_id, user_id))
    order = cursor.fetchone()
    
    if not order:
        conn.close()
        return False
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    cursor.execute('DELETE FROM order_items WHERE order_id = ?', (order_id,))
    
    # –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
    cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
    
    conn.commit()
    conn.close()
    return True

def add_complex_order(user_id, order_name, total_payment, items, save_to_history_only=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π –∑–∞–∫–∞–∑ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    
    Args:
        save_to_history_only: –ï—Å–ª–∏ True, —Ç–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑)
                             –ï—Å–ª–∏ False, —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ —Å–∫–ª–∞–¥–∞
    """
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_premium = check_premium_status(user_id)
    
    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 25 –∑–∞–∫–∞–∑–æ–≤
    if not is_premium:
        cursor.execute('SELECT COUNT(*) FROM orders WHERE user_id = ?', (user_id,))
        current_orders = cursor.fetchone()[0]
        
        if current_orders >= 25:
            conn.close()
            return {
                'success': False,
                'message': "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 25 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤!",
                'order_id': None
            }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    total_cost_price = sum(item['cost_price'] * item['quantity'] for item in items)
    delivery_rates = get_delivery_rates(user_id)
    total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in items)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–º–∏–Ω—É—Å –¥–æ—Å—Ç–∞–≤–∫–∞)
    remaining_payment = total_payment - total_delivery_cost
    order_id = None
    
    if not save_to_history_only:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ —Å–∫–ª–∞–¥–∞
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (2 –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
        from datetime import datetime, timedelta
        today = datetime.now()
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        days_ahead = 0 - today.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –ø–æ–∑–∂–µ
            days_ahead += 7
        next_monday = today + timedelta(days=days_ahead)
        expected_delivery = next_monday + timedelta(weeks=2)  # +2 –Ω–µ–¥–µ–ª–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        cursor.execute('''
            INSERT INTO orders (user_id, order_type, order_name, total_payment, status, expected_delivery_date) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, 'complex', order_name, total_payment, 'pending', expected_delivery))
        
        order_id = cursor.lastrowid
    
    for item in items:
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        item_total_cost_price = item['cost_price'] * item['quantity']
        item_share = item_total_cost_price / total_cost_price if total_cost_price > 0 else 1 / len(items)
        item_payment = remaining_payment * item_share
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –µ–≥–æ —Ç–∏–ø–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        item_delivery_cost = item['weight'] * delivery_rates[item['delivery_type']]
        item_total_cost = item_payment + item_delivery_cost
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        effective_sale_price = item_payment / item['quantity'] if item['quantity'] > 0 else 0
        
        if save_to_history_only:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑)
            cursor.execute('''
                INSERT INTO order_history 
                (user_id, order_id, product_name, quantity, cost_price, sale_price, 
                 weight, delivery_type, delivery_cost, total_cost)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, None, item['product_name'], item['quantity'], item['cost_price'], 
                  effective_sale_price, item['weight'], item['delivery_type'], item_delivery_cost, item_total_cost))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ order_items –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            cursor.execute('''
                INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (order_id, item['product_name'], item['quantity'], item['cost_price'], 
                  effective_sale_price, item['weight'], item_delivery_cost, item_total_cost, item['delivery_type']))
    
    conn.commit()
    conn.close()
    return order_id

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
def update_order_status(order_id, user_id, new_status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('SELECT id FROM orders WHERE id = ? AND user_id = ?', (order_id, user_id))
    order = cursor.fetchone()
    
    if not order:
        conn.close()
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if new_status == 'delivered':
        from datetime import datetime
        cursor.execute('''
            UPDATE orders 
            SET status = ?, actual_delivery_date = ? 
            WHERE id = ?
        ''', (new_status, datetime.now(), order_id))
    else:
        cursor.execute('UPDATE orders SET status = ? WHERE id = ?', (new_status, order_id))
    
    conn.commit()
    conn.close()
    return True

def get_order_details(order_id, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cursor.execute('''
        SELECT o.id, o.order_name, o.order_type, o.total_payment, o.delivery_type, 
               o.status, o.created_at, o.expected_delivery_date
        FROM orders o
        WHERE o.id = ? AND o.user_id = ?
    ''', (order_id, user_id))
    
    order_info = cursor.fetchone()
    if not order_info:
        conn.close()
        return None, None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    cursor.execute('''
        SELECT oi.id, oi.product_name, oi.quantity, oi.cost_price, oi.sale_price, 
               oi.weight, oi.item_delivery_type
        FROM order_items oi
        WHERE oi.order_id = ?
    ''', (order_id,))
    
    order_items = cursor.fetchall()
    conn.close()
    
    return order_info, order_items

def update_single_order(order_id, user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_rates = get_delivery_rates(user_id)
        delivery_cost = weight * delivery_rates[delivery_type]
        total_cost = sale_price * quantity + delivery_cost
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute('''
            UPDATE orders 
            SET order_name = ?, delivery_type = ?
            WHERE id = ? AND user_id = ?
        ''', (product_name, delivery_type, order_id, user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
        cursor.execute('''
            UPDATE order_items 
            SET product_name = ?, quantity = ?, cost_price = ?, sale_price = ?, 
                weight = ?, item_delivery_type = ?, delivery_cost = ?, total_cost = ?
            WHERE order_id = ?
        ''', (product_name, quantity, cost_price, sale_price, weight, delivery_type, 
              delivery_cost, total_cost, order_id))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        conn.close()
        return False

def update_complex_order(order_id, user_id, order_name, total_payment, items):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute('''
            UPDATE orders 
            SET order_name = ?, total_payment = ?
            WHERE id = ? AND user_id = ?
        ''', (order_name, total_payment, order_id, user_id))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute('DELETE FROM order_items WHERE order_id = ?', (order_id,))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        total_cost_price = sum(item['cost_price'] * item['quantity'] for item in items)
        delivery_rates = get_delivery_rates(user_id)
        total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in items)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–º–∏–Ω—É—Å –¥–æ—Å—Ç–∞–≤–∫–∞)
        remaining_payment = total_payment - total_delivery_cost
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for item in items:
            item_total_cost_price = item['cost_price'] * item['quantity']
            item_share = item_total_cost_price / total_cost_price if total_cost_price > 0 else 1 / len(items)
            item_payment = remaining_payment * item_share
            
            item_delivery_cost = item['weight'] * delivery_rates[item['delivery_type']]
            item_total_cost = item_payment + item_delivery_cost
            
            effective_sale_price = item_payment / item['quantity'] if item['quantity'] > 0 else 0
            
            cursor.execute('''
                INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (order_id, item['product_name'], item['quantity'], item['cost_price'], 
                  effective_sale_price, item['weight'], item_delivery_cost, item_total_cost, item['delivery_type']))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        conn.close()
        return False

def show_edit_order_form(order_id, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_info, order_items = get_order_details(order_id, user_id)
    
    if not order_info:
        st.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    order_type = order_info[2]
    
    st.markdown(f"""
    <div style="
        background: var(--bg-secondary);
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        border: 1px solid var(--border-light);
    ">
        <h3 style="color: #000000; text-align: center; margin-bottom: 20px;">
            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    if order_type == "single":
        show_edit_single_order_form(order_id, user_id, order_info, order_items[0] if order_items else None)
    else:
        show_edit_complex_order_form(order_id, user_id, order_info, order_items)

def show_edit_single_order_form(order_id, user_id, order_info, order_item):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    if not order_item:
        st.error("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    with st.form(f"edit_single_order_{order_id}"):
        st.subheader("üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            product_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *", 
                value=order_item[1],
                help="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            )
            quantity = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", 
                min_value=1, 
                value=int(order_item[2])
            )
            cost_price = st.number_input(
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[3])
            )
            sale_price = st.number_input(
                "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[4])
            )
        
        with col2:
            weight = st.number_input(
                "–í–µ—Å (–∫–≥) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[5])
            )
            delivery_type = st.selectbox(
                "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ *",
                options=["airplane", "truck"],
                format_func=lambda x: "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "üöõ –ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                index=0 if order_item[6] == "airplane" else 1
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            if weight > 0:
                delivery_cost = weight * DELIVERY_RATES[delivery_type]
                total_cost = sale_price * quantity + delivery_cost
                profit = (sale_price - cost_price) * quantity
                
                st.info(f"""
                **üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**
                - –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery_cost:.2f}
                - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.2f}
                - –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}
                """)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            save_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        with col2:
            if st.form_submit_button("üö´ –û—Ç–º–µ–Ω–∞", use_container_width=True):
                st.session_state[f'edit_mode_{order_id}'] = False
                st.rerun()
        
        with col3:
            preview_btn = st.form_submit_button("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", use_container_width=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if save_btn:
            if product_name and quantity > 0 and cost_price >= 0 and sale_price >= 0 and weight > 0:
                if update_single_order(order_id, user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type):
                    st.success("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    st.session_state[f'edit_mode_{order_id}'] = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if preview_btn and product_name and quantity > 0 and weight > 0:
            delivery_cost = weight * DELIVERY_RATES[delivery_type]
            total_cost = sale_price * quantity + delivery_cost
            profit = (sale_price - cost_price) * quantity
            
            st.markdown("""
            ### üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                **üì¶ –¢–æ–≤–∞—Ä:** {product_name}  
                **üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity} —à—Ç.  
                **üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${cost_price:.2f}  
                **üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:** ${sale_price:.2f}
                """)
            
            with col2:
                st.markdown(f"""
                **‚öñÔ∏è –í–µ—Å:** {weight} –∫–≥  
                **üöö –î–æ—Å—Ç–∞–≤–∫–∞:** {'‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç' if delivery_type == 'airplane' else 'üöõ –ú–∞—à–∏–Ω–∞'}  
                **üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:** ${delivery_cost:.2f}
                """)
            
            with col3:
                profit_color = "green" if profit > 0 else "red"
                st.markdown(f"""
                **üí≤ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${total_cost:.2f}  
                **üìà –ü—Ä–∏–±—ã–ª—å:** <span style="color: {profit_color}">${profit:.2f}</span>  
                **üìä –ú–∞—Ä–∂–∞:** {(profit / (sale_price * quantity) * 100) if sale_price * quantity > 0 else 0:.1f}%
                """, unsafe_allow_html=True)

def show_edit_complex_order_form(order_id, user_id, order_info, order_items):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    edit_items_key = f'edit_complex_items_{order_id}'
    if edit_items_key not in st.session_state:
        st.session_state[edit_items_key] = [
            {
                'product_name': item[1],
                'quantity': int(item[2]),
                'cost_price': float(item[3]),
                'weight': float(item[5]),
                'delivery_type': item[6] or 'truck'
            }
            for item in order_items
        ]
    
    with st.form(f"edit_complex_order_{order_id}"):
        st.subheader("üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            order_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ *", 
                value=order_info[1],
                help="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            )
        
        with col2:
            total_payment = st.number_input(
                "–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_info[3] or 0)
            )
        
        st.subheader("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        items_to_edit = st.session_state[edit_items_key]
        
        for i, item in enumerate(items_to_edit):
            with st.expander(f"üì¶ {item['product_name']} (–¢–æ–≤–∞—Ä {i+1})"):
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    new_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ", value=item['product_name'], key=f"edit_name_{order_id}_{i}")
                    items_to_edit[i]['product_name'] = new_name
                
                with col2:
                    new_quantity = st.number_input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=item['quantity'], key=f"edit_qty_{order_id}_{i}")
                    items_to_edit[i]['quantity'] = new_quantity
                
                with col3:
                    new_cost = st.number_input(f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", min_value=0.0, format="%.2f", value=item['cost_price'], key=f"edit_cost_{order_id}_{i}")
                    items_to_edit[i]['cost_price'] = new_cost
                
                with col4:
                    new_weight = st.number_input(f"–í–µ—Å (–∫–≥)", min_value=0.0, format="%.2f", value=item['weight'], key=f"edit_weight_{order_id}_{i}")
                    items_to_edit[i]['weight'] = new_weight
                
                delivery_type = st.selectbox(
                    f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
                    options=["airplane", "truck"],
                    format_func=lambda x: "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "üöõ –ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                    index=0 if item['delivery_type'] == "airplane" else 1,
                    key=f"edit_delivery_{order_id}_{i}"
                )
                items_to_edit[i]['delivery_type'] = delivery_type
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                item_delivery_cost = new_weight * DELIVERY_RATES[delivery_type]
                st.info(f"üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ${item_delivery_cost:.2f}")
        
        # –û–±—â–∏–π —Ä–∞—Å—á–µ—Ç
        if items_to_edit and total_payment > 0:
            total_delivery_cost = sum(item['weight'] * DELIVERY_RATES[item['delivery_type']] for item in items_to_edit)
            total_weight = sum(item['weight'] for item in items_to_edit)
            
            st.markdown("### üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å", f"{total_weight:.2f} –∫–≥")
            
            with col2:
                st.metric("üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", f"${total_delivery_cost:.2f}")
            
            with col3:
                remaining = max(0, total_payment - total_delivery_cost)
                st.metric("üí∞ –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã", f"${remaining:.2f}")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            save_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        with col2:
            if st.form_submit_button("üö´ –û—Ç–º–µ–Ω–∞", use_container_width=True):
                st.session_state[f'edit_mode_{order_id}'] = False
                if edit_items_key in st.session_state:
                    del st.session_state[edit_items_key]
                st.rerun()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if save_btn:
            if order_name and total_payment > 0 and items_to_edit:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                valid_items = all(
                    item['product_name'] and item['quantity'] > 0 and 
                    item['cost_price'] >= 0 and item['weight'] > 0
                    for item in items_to_edit
                )
                
                if valid_items:
                    if update_complex_order(order_id, user_id, order_name, total_payment, items_to_edit):
                        st.success("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        st.session_state[f'edit_mode_{order_id}'] = False
                        if edit_items_key in st.session_state:
                            del st.session_state[edit_items_key]
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                else:
                    st.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def get_delayed_orders(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    from datetime import datetime
    current_time = datetime.now()
    
    query = '''
        SELECT id, order_name, expected_delivery_date, delay_notification_sent
        FROM orders 
        WHERE user_id = ? 
        AND status = 'pending' 
        AND expected_delivery_date < ?
        ORDER BY expected_delivery_date
    '''
    
    cursor.execute(query, (user_id, current_time))
    delayed_orders = cursor.fetchall()
    conn.close()
    
    return delayed_orders

def mark_delay_notification_sent(order_id):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE orders SET delay_notification_sent = 1 WHERE id = ?', (order_id,))
    conn.commit()
    conn.close()

def send_delay_notifications(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"""
    delayed_orders = get_delayed_orders(user_id)
    notifications_sent = 0
    
    for order in delayed_orders:
        order_id, order_name, expected_date, notification_sent = order
        
        if not notification_sent:  # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            print(f"üö® –ó–ê–î–ï–†–ñ–ö–ê: –ó–∞–∫–∞–∑ '{order_name}' –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–±—ã—Ç—å {expected_date}")
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mark_delay_notification_sent(order_id)
            notifications_sent += 1
    
    return notifications_sent

# –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
def get_analytics(user_id):
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = '''
        SELECT oi.*, o.created_at, o.order_type
        FROM order_items oi
        JOIN orders o ON oi.order_id = o.id
        WHERE o.user_id = ?
    '''
    df = pd.read_sql_query(query, conn, params=(user_id,))
    
    if df.empty:
        conn.close()
        return {
            'total_revenue': 0,
            'total_costs': 0,
            'total_cost_price': 0,
            'total_delivery_costs': 0,
            'profit': 0,
            'margin': 0,
            'profitability': 0,
            'financial_cushion': 0,
            'personal_expenses': 0,
            'cushion_percent': 20.0
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings_query = 'SELECT financial_cushion_percent FROM settings WHERE user_id = ?'
    cursor = conn.cursor()
    cursor.execute(settings_query, (user_id,))
    settings = cursor.fetchone()
    cushion_percent = settings[0] if settings else 20.0
    
    conn.close()
    
    # –†–∞—Å—á–µ—Ç—ã
    total_revenue = df['total_cost'].sum()
    total_cost_price = (df['cost_price'] * df['quantity']).sum()
    total_delivery_costs = df['delivery_cost'].sum()
    total_costs = total_cost_price + total_delivery_costs
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
    total_sale_value = (df['sale_price'].fillna(0) * df['quantity']).sum()
    profit = total_sale_value - total_cost_price  # –ü—Ä–∏–±—ã–ª—å –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    margin = (profit / total_sale_value * 100) if total_sale_value > 0 else 0
    profitability = (profit / total_cost_price * 100) if total_cost_price > 0 else 0
    
    financial_cushion = profit * (cushion_percent / 100)
    personal_expenses = profit - financial_cushion
    
    return {
        'total_revenue': total_revenue,
        'total_costs': total_costs,
        'total_cost_price': total_cost_price,
        'total_delivery_costs': total_delivery_costs,
        'profit': profit,
        'margin': margin,
        'profitability': profitability,
        'financial_cushion': financial_cushion,
        'personal_expenses': personal_expenses,
        'cushion_percent': cushion_percent
    }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–æ–º
def add_to_inventory(user_id, product_name, quantity, link="", min_stock_level=0):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_premium = check_premium_status(user_id)
    
    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 20 —Ç–æ–≤–∞—Ä–æ–≤
    if not is_premium:
        cursor.execute('SELECT COUNT(*) FROM inventory WHERE user_id = ?', (user_id,))
        current_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
        cursor.execute('SELECT id FROM inventory WHERE user_id = ? AND product_name = ?', 
                      (user_id, product_name))
        existing = cursor.fetchone()
        
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
        if not existing and current_count >= 20:
            conn.close()
            return False, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 20 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
    cursor.execute('SELECT id, quantity, min_stock_level FROM inventory WHERE user_id = ? AND product_name = ?', 
                  (user_id, product_name))
    existing = cursor.fetchone()
    
    if existing:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
        new_quantity = existing[1] + quantity
        current_min = existing[2] if existing[2] else min_stock_level
        cursor.execute('UPDATE inventory SET quantity = ?, link = ?, min_stock_level = ? WHERE id = ?', 
                      (new_quantity, link, current_min, existing[0]))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        cursor.execute('''INSERT INTO inventory (user_id, product_name, quantity, link, min_stock_level, reserved_quantity) 
                         VALUES (?, ?, ?, ?, ?, 0)''', 
                      (user_id, product_name, quantity, link, min_stock_level))
    
    conn.commit()
    conn.close()
    return True, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥!"

def check_inventory_availability(user_id, product_name, required_quantity):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT quantity, COALESCE(reserved_quantity, 0), COALESCE(min_stock_level, 0) 
        FROM inventory 
        WHERE user_id = ? AND product_name = ?
    ''', (user_id, product_name))
    
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        return {
            'available': False,
            'current_stock': 0,
            'reserved': 0,
            'available_for_sale': 0,
            'min_level': 0,
            'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ'
        }
    
    current_stock, reserved, min_level = result
    available_for_sale = current_stock - reserved
    
    return {
        'available': available_for_sale >= required_quantity,
        'current_stock': current_stock,
        'reserved': reserved,
        'available_for_sale': available_for_sale,
        'min_level': min_level,
        'message': f'–í –Ω–∞–ª–∏—á–∏–∏: {available_for_sale} —à—Ç. (–≤—Å–µ–≥–æ: {current_stock}, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {reserved})'
    }

def reserve_inventory(user_id, product_name, quantity):
    """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
    availability = check_inventory_availability(user_id, product_name, quantity)
    
    if not availability['available']:
        conn.close()
        return False, availability['message']
    
    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
    cursor.execute('''
        UPDATE inventory 
        SET reserved_quantity = COALESCE(reserved_quantity, 0) + ?
        WHERE user_id = ? AND product_name = ?
    ''', (quantity, user_id, product_name))
    
    conn.commit()
    conn.close()
    return True, f'–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ "{product_name}"'

def release_reservation(user_id, product_name, quantity):
    """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE inventory 
        SET reserved_quantity = COALESCE(reserved_quantity, 0) - ?
        WHERE user_id = ? AND product_name = ?
    ''', (quantity, user_id, product_name))
    
    conn.commit()
    conn.close()

def confirm_sale_and_reduce_stock(user_id, product_name, quantity):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤
        cursor.execute('''
            UPDATE inventory 
            SET quantity = quantity - ?,
                reserved_quantity = COALESCE(reserved_quantity, 0) - ?
            WHERE user_id = ? AND product_name = ?
        ''', (quantity, quantity, user_id, product_name))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cursor.execute('''
            SELECT quantity, COALESCE(min_stock_level, 0) 
            FROM inventory 
            WHERE user_id = ? AND product_name = ?
        ''', (user_id, product_name))
        
        result = cursor.fetchone()
        if result:
            current_qty, min_level = result
            
            if current_qty <= min_level and min_level > 0:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
                cursor.execute('''
                    INSERT INTO notifications (user_id, type, message, created_at, is_read)
                    VALUES (?, 'low_stock', ?, datetime('now'), 0)
                ''', (user_id, f'–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ "{product_name}": {current_qty} —à—Ç. (–º–∏–Ω–∏–º—É–º: {min_level})'))
        
        conn.commit()
        conn.close()
        return True, f'–ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∏—Å–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ "{product_name}"'
        
    except Exception as e:
        conn.rollback()
        conn.close()
        return False, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}'

def get_low_stock_items(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT product_name, quantity, COALESCE(reserved_quantity, 0) as reserved, 
               COALESCE(min_stock_level, 0) as min_level,
               (quantity - COALESCE(reserved_quantity, 0)) as available
        FROM inventory 
        WHERE user_id = ? AND COALESCE(min_stock_level, 0) > 0 
        AND quantity <= min_stock_level
        ORDER BY (quantity - min_stock_level) ASC
    ''', (user_id,))
    
    results = cursor.fetchall()
    conn.close()
    
    return [
        {
            'product_name': row[0],
            'current_stock': row[1],
            'reserved': row[2],
            'min_level': row[3],
            'available': row[4],
            'shortage': max(0, row[3] - row[1])
        }
        for row in results
    ]

def get_inventory(user_id):
    conn = sqlite3.connect('business_manager.db')
    df = pd.read_sql_query('SELECT * FROM inventory WHERE user_id = ? ORDER BY product_name', 
                          conn, params=(user_id,))
    conn.close()
    return df

def search_inventory(user_id, search_term):
    conn = sqlite3.connect('business_manager.db')
    query = '''
        SELECT * FROM inventory 
        WHERE user_id = ? AND product_name LIKE ? 
        ORDER BY product_name
    '''
    df = pd.read_sql_query(query, conn, params=(user_id, f'%{search_term}%'))
    conn.close()
    return df

def clear_inventory(user_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('DELETE FROM inventory WHERE user_id = ?', (user_id,))
    deleted_count = cursor.rowcount
    
    conn.commit()
    conn.close()
    return deleted_count

def delete_inventory_item(user_id, product_id):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM inventory WHERE user_id = ? AND id = ?', (user_id, product_id))
    deleted = cursor.rowcount > 0
    
    conn.commit()
    conn.close()
    return deleted

def delete_inventory_items_bulk(user_id, product_ids):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    placeholders = ','.join('?' * len(product_ids))
    params = [user_id] + product_ids
    
    cursor.execute(f'DELETE FROM inventory WHERE user_id = ? AND id IN ({placeholders})', params)
    deleted_count = cursor.rowcount
    
    conn.commit()
    conn.close()
    return deleted_count

def update_inventory_quantity(user_id, product_id, new_quantity):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    if new_quantity <= 0:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        cursor.execute('DELETE FROM inventory WHERE user_id = ? AND id = ?', (user_id, product_id))
    else:
        cursor.execute('UPDATE inventory SET quantity = ? WHERE user_id = ? AND id = ?', 
                      (new_quantity, user_id, product_id))
    
    updated = cursor.rowcount > 0
    conn.commit()
    conn.close()
    return updated

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
def add_to_order_history(user_id, order_id, product_name, quantity, cost_price, sale_price, 
                        weight, delivery_type, delivery_cost, total_cost):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑)"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO order_history 
        (user_id, order_id, product_name, quantity, cost_price, sale_price, 
         weight, delivery_type, delivery_cost, total_cost)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, order_id, product_name, quantity, cost_price, sale_price, 
          weight, delivery_type, delivery_cost, total_cost))
    
    conn.commit()
    conn.close()

def get_order_history(user_id, limit=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    
    query = '''
        SELECT oh.*, o.order_name, o.created_at as order_created_at
        FROM order_history oh
        LEFT JOIN orders o ON oh.order_id = o.id
        WHERE oh.user_id = ?
        ORDER BY oh.order_date DESC
    '''
    
    if limit:
        query += f' LIMIT {limit}'
    
    df = pd.read_sql_query(query, conn, params=(user_id,))
    conn.close()
    return df

def search_order_history(user_id, search_term, start_date=None, end_date=None):
    """–ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    conn = sqlite3.connect('business_manager.db')
    
    query = '''
        SELECT oh.*, o.order_name, o.created_at as order_created_at
        FROM order_history oh
        LEFT JOIN orders o ON oh.order_id = o.id
        WHERE oh.user_id = ? AND oh.product_name LIKE ?
    '''
    params = [user_id, f'%{search_term}%']
    
    if start_date:
        query += ' AND DATE(oh.order_date) >= ?'
        params.append(start_date)
    
    if end_date:
        query += ' AND DATE(oh.order_date) <= ?'
        params.append(end_date)
    
    query += ' ORDER BY oh.order_date DESC'
    
    df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    return df

def delete_order_history_item(item_id):
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM order_history WHERE id = ?', (item_id,))
    
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    
    return deleted_rows > 0

def delete_order_history_items_bulk(item_ids):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    if not item_ids:
        return False
    
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    placeholders = ','.join(['?' for _ in item_ids])
    cursor.execute(f'DELETE FROM order_history WHERE id IN ({placeholders})', item_ids)
    
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    
    return deleted_rows > 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def show_navigation():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    if 'sidebar_expanded' not in st.session_state:
        st.session_state.sidebar_expanded = True
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    with st.sidebar:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div class="nav-header">
            <div class="nav-title">üìä –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</div>
            <div class="nav-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if st.session_state.email:
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, #E3F2FD, #F0F7FF); 
                        padding: 12px; border-radius: 8px; margin-bottom: 20px; text-align: center;">
                <strong style="color: var(--accent-color);">üë§ {st.session_state.email}</strong>
            </div>
            """, unsafe_allow_html=True)
        
        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        menu_items = [
            ("dashboard", "üìä", "–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"),
            ("orders", "üì¶", "–ó–∞–∫–∞–∑—ã"),
            ("analytics", "üìà", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            ("inventory", "üè™", "–°–∫–ª–∞–¥"),
            ("smart", "üß†", "–£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            ("settings", "‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        ]
        
        st.markdown('<div class="nav-menu">', unsafe_allow_html=True)
        
        for page_key, icon, title in menu_items:
            active_class = "active" if st.session_state.current_page == page_key else ""
            
            if st.button(
                f"{icon} {title}", 
                key=f"nav_{page_key}",
                use_container_width=True,
                type="primary" if active_class == "active" else "secondary"
            ):
                st.session_state.current_page = page_key
                st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        st.markdown("---")
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.user_id = None
            st.session_state.email = None
            st.session_state.current_page = "dashboard"
            st.rerun()

def get_pending_orders_count():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ? AND status = 'pending'", 
                      (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0
    except:
        return 0

def show_sidebar_menu():
    """–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    padding: 15px; border-radius: 10px; margin-bottom: 20px;
                    text-align: center;">
            <h2 style="color: #000000; margin: 0;">üçî –ú–µ–Ω—é</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if st.button("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", key="menu_dashboard", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", key="menu_orders", use_container_width=True):
            st.session_state.current_page = "orders"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã", key="menu_analytics", use_container_width=True):
            st.session_state.current_page = "analytics"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º", key="menu_inventory", use_container_width=True):
            st.session_state.current_page = "inventory"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("ü§ñ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏", key="menu_smart", use_container_width=True):
            st.session_state.current_page = "smart"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", key="menu_settings", use_container_width=True):
            st.session_state.current_page = "settings"
            st.session_state.menu_open = False
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            total_orders = get_total_orders()
            total_revenue = get_total_revenue()
            delayed_orders = len(get_delayed_orders(st.session_state.user_id))
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("–ó–∞–∫–∞–∑–æ–≤", total_orders)
                st.metric("–ó–∞–¥–µ—Ä–∂–µ–∫", delayed_orders)
            with col_b:
                st.metric("–í—ã—Ä—É—á–∫–∞", f"${total_revenue:,.0f}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("ÔøΩ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏", key="quick_delays", use_container_width=True):
            try:
                notifications = send_delay_notifications(st.session_state.user_id)
                if notifications > 0:
                    st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {notifications} –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                else:
                    st.success("‚úÖ –ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
        
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", key="quick_export", use_container_width=True):
            st.info("üìÑ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", key="close_menu", use_container_width=True):
            st.session_state.menu_open = False
            st.rerun()
        
        # –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if st.button("üö™ –í—ã–π—Ç–∏", key="menu_logout", use_container_width=True, type="secondary"):
            st.session_state.user_id = None
            st.session_state.email = None
            st.session_state.current_page = "dashboard"
            st.session_state.menu_open = False
            st.rerun()

def get_total_orders():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0
    except:
        return 0

def get_total_revenue():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(total_price) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result and result[0] else 0
    except:
        return 0
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            conn = sqlite3.connect('business_manager.db')
            cursor = conn.cursor()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
            total_orders = cursor.fetchone()[0]
            
            # –ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            delayed_orders = get_delayed_orders(st.session_state.user_id)
            delayed_count = len(delayed_orders)
            
            # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
            cursor.execute("SELECT SUM(profit) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
            total_profit = cursor.fetchone()[0] or 0
            
            conn.close()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            st.markdown(f"""
            <div style="background: #f0f2f6; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: #1f77b4; margin: 0;">üìã {total_orders}</h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</p>
                </div>
            </div>
            
            <div style="background: {'#ffe6e6' if delayed_count > 0 else '#e6ffe6'}; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: {'#ff4444' if delayed_count > 0 else '#44ff44'}; margin: 0;">
                        {'‚ö†Ô∏è' if delayed_count > 0 else '‚úÖ'} {delayed_count}
                    </h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
                </div>
            </div>
            
            <div style="background: #e6f7ff; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: #52c41a; margin: 0;">üí∞ ${total_profit:,.0f}</h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏", use_container_width=True):
            notifications_sent = send_delay_notifications(st.session_state.user_id)
            if notifications_sent > 0:
                st.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                st.success("–ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            st.cache_data.clear()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", use_container_width=True, type="primary"):
            st.session_state.show_sidebar_menu = False
            st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def apply_custom_styles():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º–Ω—ã–µ —Å—Ç–∏–ª–∏"""
    st.markdown("""
    <style>
    /* –°–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display: none;}
    .viewerBadge_container__1QSob {display: none;}
    
    /* CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    :root {
        --primary-dark: #1a1a2e;
        --secondary-dark: #16213e;
        --accent-dark: #0f3460;
        --text-light: #ecf0f1;
        --text-muted: #95a5a6;
        --accent-blue: #00d4ff;
        --accent-gradient: linear-gradient(135deg, #00d4ff, #a8edea);
        --success-color: #27ae60;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --border-light: rgba(255,255,255,0.1);
        --shadow-dark: 0 10px 30px rgba(0,0,0,0.3);
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--secondary-dark) 100%);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .main .block-container {
        padding: 1rem 2rem;
        max-width: 1400px;
        background: var(--primary-dark);
        border-radius: 20px;
        margin: 1rem auto;
        box-shadow: var(--shadow-dark);
        backdrop-filter: blur(10px);
        border: 1px solid var(--border-light);
    }
    
    /* –¢–µ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
    .auth-container {
        max-width: 400px;
        margin: 50px auto;
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--secondary-dark) 100%);
        border-radius: 20px;
        padding: 40px;
        box-shadow: var(--shadow-dark);
        border: 1px solid var(--border-light);
    }
    
    .auth-title {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-light);
        margin-bottom: 30px;
        background: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –ü–æ–ª—è –≤–≤–æ–¥–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stTextInput > div > div > input {
        background: var(--bg-primary) !important;
        border: 2px solid var(--border-medium) !important;
        border-radius: 8px !important;
        padding: 0.75rem !important;
        font-size: 0.9rem !important;
        color: var(--text-primary) !important;
        transition: all 0.3s ease !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--accent-blue) !important;
        box-shadow: 0 0 0 2px rgba(0,102,204,0.2) !important;
        background: var(--bg-primary) !important;
    }
    
    .stTextInput > div > div > input::placeholder {
        color: var(--text-muted) !important;
    }
    
    /* –¢–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, var(--accent-blue) 0%, #a8edea 100%) !important;
        color: var(--primary-dark) !important;
        border: none !important;
        border-radius: 12px !important;
        padding: 12px 30px !important;
        font-weight: 600 !important;
        font-size: 14px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(0,212,255,0.3) !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(0,212,255,0.4) !important;
        background: linear-gradient(135deg, #a8edea 0%, var(--accent-blue) 100%) !important;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-light) !important;
        font-weight: 700 !important;
    }
    
    h1 {
        font-size: 2.5rem !important;
        margin-bottom: 10px !important;
        background: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –¢–µ–∫—Å—Ç –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã */
    .stMarkdown p, .stText, .element-container p {
        color: var(--text-light) !important;
    }
    
    /* –¢–µ–º–Ω—ã–µ —Ç–∞–±—ã */
    .stTabs [data-baseweb="tab-list"] {
        background: var(--secondary-dark);
        border-radius: 15px;
        padding: 5px;
        border: 1px solid var(--border-light);
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent !important;
        color: var(--text-muted) !important;
        border-radius: 10px !important;
        padding: 10px 20px !important;
        font-weight: 600 !important;
        border: none !important;
    }
    
    .stTabs [aria-selected="true"] {
        background: var(--accent-gradient) !important;
        color: var(--primary-dark) !important;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
    .stSelectbox > div > div {
        background: var(--secondary-dark) !important;
        border: 2px solid var(--border-light) !important;
        border-radius: 12px !important;
        color: var(--text-light) !important;
    }
    
    .stSelectbox > div > div > div {
        color: var(--text-light) !important;
    }
    
    /* Number input - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stNumberInput > div > div > input {
        background: var(--bg-primary) !important;
        border: 2px solid var(--border-medium) !important;
        border-radius: 8px !important;
        color: var(--text-primary) !important;
        padding: 0.75rem !important;
    }
    
    /* Date input - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stDateInput > div > div > input {
        background: var(--bg-primary) !important;
        border: 2px solid var(--border-medium) !important;
        border-radius: 8px !important;
        color: var(--text-primary) !important;
        padding: 0.75rem !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: var(--text-muted);
    }
    
    /* –¢–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã */
    .stAlert {
        background: var(--secondary-dark) !important;
        border: 1px solid var(--border-light) !important;
        color: var(--text-light) !important;
        border-radius: 12px !important;
    }
    
    .stSuccess {
        background: rgba(39, 174, 96, 0.2) !important;
        border: 1px solid var(--success-color) !important;
    }
    
    .stError {
        background: rgba(231, 76, 60, 0.2) !important;
        border: 1px solid var(--danger-color) !important;
    }
    
    .stWarning {
        background: rgba(243, 156, 18, 0.2) !important;
        border: 1px solid var(--warning-color) !important;
    }
    
    .stInfo {
        background: rgba(0, 212, 255, 0.2) !important;
        border: 1px solid var(--accent-blue) !important;
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background: var(--primary-dark) !important;
    }
    
    .css-1cypcdb {
        background: var(--secondary-dark) !important;
        border-right: 1px solid var(--border-light) !important;
    }
    
    /* –§–æ—Ä–º—ã */
    .stForm {
        background: var(--secondary-dark) !important;
        border: 1px solid var(--border-light) !important;
        border-radius: 15px !important;
        padding: 20px !important;
    }
    
    /* –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ */
    .stRadio > div {
        background: var(--secondary-dark) !important;
        border-radius: 12px !important;
        padding: 15px !important;
        border: 1px solid var(--border-light) !important;
    }
    
    .stRadio label {
        color: var(--text-light) !important;
    }
    
    /* –¢–æ–ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
    .top-nav {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        padding: 15px 30px;
        border-radius: 15px;
        margin-bottom: 25px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .nav-item {
        display: inline-block;
        padding: 8px 20px;
        margin: 0 5px;
        background: rgba(255, 255, 255, 0.1);
        color: #000000;
        border-radius: 25px;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .nav-item:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .nav-item.active {
        background: linear-gradient(135deg, #3498db, #2980b9);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin: 15px 0;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #000000;
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        border: none;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: #000000 !important;
        border: none !important;
        border-radius: 12px !important;
        padding: 12px 30px !important;
        font-weight: 600 !important;
        font-size: 14px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3) !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4) !important;
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%) !important;
    }
    
    /* –§–æ—Ä–º—ã –≤—Ö–æ–¥–∞ */
    .auth-container {
        max-width: 400px;
        margin: 50px auto;
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .auth-title {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 30px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput > div > div > input {
        border: 2px solid #e1e8ed !important;
        border-radius: 12px !important;
        padding: 15px !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        background: #f8f9fa !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea !important;
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.2) !important;
        background: white !important;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #2c3e50 !important;
        font-weight: 700 !important;
    }
    
    h1 {
        font-size: 2.5rem !important;
        margin-bottom: 10px !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –°–ø–∏—Å–∫–∏ –∑–∞–∫–∞–∑–æ–≤ */
    .order-item {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        border-left: 4px solid #667eea;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .order-item:hover {
        transform: translateX(10px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        border-left-color: #764ba2;
    }
    
    .order-title {
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.1rem;
        margin-bottom: 5px;
    }
    
    .order-meta {
        color: #7f8c8d;
        font-size: 0.9rem;
    }
    
    /* –°—Ç–∞—Ç—É—Å—ã */
    .status-badge {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-pending {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: #000000;
    }
    
    .status-delivered {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: #000000;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
            margin: 0.5rem;
        }
        
        .top-nav {
            padding: 10px 15px;
        }
        
        .nav-item {
            display: block;
            margin: 5px 0;
            text-align: center;
        }
        
        .auth-container {
            margin: 20px;
            padding: 30px 20px;
        }
    }
    </style>
    """, unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(
        page_title="üìä Business Manager Pro",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    init_db()
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    apply_custom_styles()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    if 'email' not in st.session_state:
        st.session_state.email = None
    if 'is_admin' not in st.session_state:
        st.session_state.is_admin = False
    if 'is_premium' not in st.session_state:
        st.session_state.is_premium = False
    if 'show_smart_insights' not in st.session_state:
        st.session_state.show_smart_insights = True
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not st.session_state.user_id:
        show_auth()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
    st.session_state.is_premium = check_premium_status(st.session_state.user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_admin FROM users WHERE id = ?', (st.session_state.user_id,))
    result = cursor.fetchone()
    st.session_state.is_admin = result[0] if result else False
    conn.close()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    check_and_create_low_stock_notifications(st.session_state.user_id)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    show_modern_navigation()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    show_admin_navigation()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = st.session_state.current_page
    
    if page == "dashboard":
        show_dashboard()
    elif page == "orders":
        show_orders()
    elif page == "order_management":
        show_order_management()
    elif page == "analytics":
        # –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if st.session_state.is_premium:
            show_analytics()
        else:
            show_limited_analytics()
    elif page == "inventory":
        show_inventory()
    elif page == "notifications":  
        show_notifications()
    elif page == "smart":
        # –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è - —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        if st.session_state.is_premium:
            show_smart_functions()
        else:
            show_premium_required("—É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã")
    elif page == "admin":
        # –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if st.session_state.get('is_admin', False):
            show_admin_panel()
        else:
            st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif page == "settings":
        show_settings()
    else:
        show_dashboard()

def show_limited_analytics():
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    st.warning("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –î–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω—É–∂–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞")
    
    analytics = get_analytics(st.session_state.user_id)
    
    # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${analytics['total_revenue']:.2f}")
    
    with col2:
        st.metric("üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"${analytics['total_costs']:.2f}") 
    
    with col3:
        st.metric("üìà –ü—Ä–∏–±—ã–ª—å", f"${analytics['profit']:.2f}")
    
    with col4:
        st.metric("üìä –ú–∞—Ä–∂–∞", f"{analytics['margin']:.1f}%")
    
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("üìä **–î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏** - —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏")
        st.info("üìà **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ** - —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏")
    
    with col2:
        st.info("üì§ **–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤** - —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏")
        st.info("üìß **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã** - —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏")
    
    if st.button("üíé –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–º–∏—É–º", type="primary"):
        st.session_state.current_page = "premium"
        st.rerun()

def show_premium_required(feature_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –¥–ª—è –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–π"""
    st.title(f"üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è")
    
    st.error(f"‚ö†Ô∏è **{feature_name.title()}** –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏!")
    
    st.markdown(f"""
    <div style="text-align: center; padding: 2rem 0;">
        <h2 style="color: #667eea;">üîí {feature_name.title()}</h2>
        <p style="font-size: 1.2rem; color: #666;">
            –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: #000000; padding: 30px; border-radius: 15px; text-align: center;">
            <h3 style="color: #000000; margin-bottom: 20px;">üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h3>
            <h2 style="color: #000000; margin: 20px 0;">150 –¢–ú / –º–µ—Å—è—Ü</h2>
            <p style="margin-bottom: 20px;">
                –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º Business Manager Pro:
            </p>
            <div style="text-align: left; margin: 20px 0;">
                <p>üß† <strong>–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã</strong></p>
                <p>üìä <strong>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</strong></p>
                <p>üìà <strong>–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</strong></p>
                <p>üì§ <strong>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel</strong></p>
                <p>üìß <strong>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</strong></p>
                <p>üí∞ <strong>–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—å</strong></p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º–∞", type="primary", use_container_width=True):
            st.session_state.current_page = "settings"
            st.rerun()
        
        if st.button("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.rerun()

def show_auth():
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="text-align: center; padding: 3rem 0 2rem 0;">
            <h1 style="
                color: #2E4057; 
                font-size: 2.5rem; 
                font-weight: 300; 
                margin-bottom: 0.5rem;
                letter-spacing: -1px;
            ">–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
            <p style="
                color: #64748B; 
                font-size: 1.1rem; 
                margin: 0;
                font-weight: 300;
            ">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –±–∏–∑–Ω–µ—Å–æ–º</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with tab1:
            st.markdown("""
            <div class="auth-card">
                <div class="auth-header">
                    <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h2>
                    <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            with st.form("login_form", clear_on_submit=False):
                email = st.text_input(
                    "Email", 
                    placeholder="example@company.com",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å"
                )
                password = st.text_input(
                    "–ü–∞—Ä–æ–ª—å", 
                    type="password", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    help="–í–∞—à –ø–∞—Ä–æ–ª—å"
                )
                
                st.markdown("<br>", unsafe_allow_html=True)
                
                submitted = st.form_submit_button(
                    "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", 
                    use_container_width=True,
                    type="primary"
                )
                
                if submitted:
                    if email and password:
                        user_id = login_user(email, password)
                        if user_id:
                            st.session_state.user_id = user_id
                            st.session_state.email = email
                            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                            st.rerun()
                        else:
                            st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        with tab2:
            st.markdown("""
            <div class="auth-card">
                <div class="auth-header">
                    <h2>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h2>
                    <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            with st.form("register_form", clear_on_submit=False):
                reg_email = st.text_input(
                    "Email *", 
                    placeholder="example@company.com",
                    key="reg_email",
                    help="–í–∞—à email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞"
                )
                reg_password = st.text_input(
                    "–ü–∞—Ä–æ–ª—å *", 
                    type="password", 
                    placeholder="–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    key="reg_password",
                    help="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                )
                reg_password_confirm = st.text_input(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *", 
                    type="password", 
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    key="reg_password_confirm"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                reg_phone = st.text_input(
                    "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *",
                    placeholder="+993 XX XXX XX XX",
                    key="reg_phone",
                    help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                )
                reg_full_name = st.text_input(
                    "–ü–æ–ª–Ω–æ–µ –∏–º—è",
                    placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                    key="reg_full_name"
                )
                reg_business_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞",
                    placeholder="–û–û–û –ú–æ–π –ë–∏–∑–Ω–µ—Å",
                    key="reg_business_name"
                )
                
                st.markdown("<br>", unsafe_allow_html=True)
                
                submitted = st.form_submit_button(
                    "üöÄ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                    use_container_width=True,
                    type="primary"
                )
                
                if submitted:
                    if reg_email and reg_password and reg_password_confirm and reg_phone:
                        if len(reg_password) < 6:
                            st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                        elif reg_password == reg_password_confirm:
                            success, message = register_user(reg_email, reg_password, reg_phone, 
                                                           reg_full_name, reg_business_name)
                            if success:
                                st.success(message)
                                st.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                            else:
                                st.error(message)
                        else:
                            st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (*)")

def show_dashboard():
    st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    analytics = get_analytics(st.session_state.user_id)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${analytics['total_revenue']:.2f}")
    
    with col2:
        st.metric("üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"${analytics['total_costs']:.2f}")
    
    with col3:
        st.metric("üìà –ü—Ä–∏–±—ã–ª—å", f"${analytics['profit']:.2f}")
    
    with col4:
        st.metric("üìä –ú–∞—Ä–∂–∞", f"{analytics['margin']:.1f}%")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –∏ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞", f"${analytics['financial_cushion']:.2f}")
    
    with col2:
        st.metric("üè† –ù–∞ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"${analytics['personal_expenses']:.2f}")
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    st.subheader("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    conn = sqlite3.connect('business_manager.db')
    recent_orders = pd.read_sql_query('''
        SELECT o.order_name, o.order_type, o.created_at, 
               COUNT(oi.id) as items_count,
               SUM(oi.total_cost) as total_value
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        GROUP BY o.id
        ORDER BY o.created_at DESC
        LIMIT 5
    ''', conn, params=(st.session_state.user_id,))
    conn.close()
    
    if not recent_orders.empty:
        st.dataframe(recent_orders, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

def show_orders():
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="
            color: #2E4057; 
            font-size: 2.5rem; 
            font-weight: 300; 
            margin-bottom: 0.5rem;
            letter-spacing: -1px;
        ">üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h1>
        <p style="
            color: #64748B; 
            font-size: 1.1rem; 
            margin: 0;
            font-weight: 300;
        ">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üìã –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "üìã –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã"])
    
    with tab1:
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <h2 style="color: #2E4057; font-weight: 400;">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞</h2>
        </div>
        """, unsafe_allow_html=True)
        
        order_type = st.radio(
            "–¢–∏–ø –∑–∞–∫–∞–∑–∞:", 
            ["–û–¥–∏–Ω–æ—á–Ω—ã–π", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π"],
            horizontal=True,
            help="–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤"
        )
        
        if order_type == "–û–¥–∏–Ω–æ—á–Ω—ã–π":
            show_single_order_form()
        else:
            show_complex_order_form()
    
    with tab2:
        show_simple_order_history("single")
    
    with tab3:
        show_simple_order_history("complex")

def show_single_order_form():
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑")
    
    with st.form("single_order_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", min_value=1, value=1)
            cost_price = st.number_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($) *", min_value=0.0, format="%.2f")
            sale_price = st.number_input("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($) *", min_value=0.0, format="%.2f")
        
        with col2:
            weight = st.number_input("–í–µ—Å (–∫–≥) *", min_value=0.0, format="%.2f")
            delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ *", 
                                       options=["airplane", "truck"],
                                       format_func=lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)")
            
            # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            st.markdown("### üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞")
            order_date = st.date_input(
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
                value=datetime.now().date(),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –û—Ç —ç—Ç–æ–π –¥–∞—Ç—ã –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞."
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_days = 7 if delivery_type == "airplane" else 14  # –°–∞–º–æ–ª–µ—Ç - 7 –¥–Ω–µ–π, –º–∞—à–∏–Ω–∞ - 14 –¥–Ω–µ–π
            expected_delivery = order_date + timedelta(days=delivery_days)
            
            st.info(f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: **{expected_delivery.strftime('%d.%m.%Y')}** ({delivery_days} –¥–Ω–µ–π)")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
            availability_info = None
            stock_status = "unknown"
            if product_name and quantity > 0:
                availability_info = check_inventory_availability(st.session_state.user_id, product_name, quantity)
                
                if availability_info['available']:
                    st.success(f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ: {availability_info['available_for_sale']} —à—Ç.")
                    st.info("üè™ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                    stock_status = "in_stock"
                else:
                    if availability_info['current_stock'] > 0:
                        st.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {availability_info['available_for_sale']} —à—Ç.")
                        st.info("üìã –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ '–ø–æ–¥ –∑–∞–∫–∞–∑' - —Ç–æ–≤–∞—Ä –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∫—É–ø–∏—Ç—å")
                    else:
                        st.error("‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ")
                        st.info("ÔøΩ –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ '–ø–æ–¥ –∑–∞–∫–∞–∑' - —Ç–æ–≤–∞—Ä –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—É–ø–∏—Ç—å")
                    stock_status = "out_of_stock"
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        if weight > 0 and sale_price > 0:
            delivery_cost = weight * DELIVERY_RATES[delivery_type]
            total_cost = sale_price * quantity + delivery_cost
            profit_per_item = sale_price - cost_price
            total_profit = profit_per_item * quantity
            
            st.markdown("---")
            st.markdown("### üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
            
            calc_col1, calc_col2, calc_col3 = st.columns(3)
            
            with calc_col1:
                st.metric("üöö –î–æ—Å—Ç–∞–≤–∫–∞", f"${delivery_cost:.2f}")
                st.metric("üìä –ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥.", f"${profit_per_item:.2f}")
            
            with calc_col2:
                st.metric("üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"${total_profit:.2f}")
                st.metric("üíº –ú–∞—Ä–∂–∞", f"{(profit_per_item/sale_price*100):.1f}%" if sale_price > 0 else "0%")
            
            with calc_col3:
                st.metric("üí∞ –ò—Ç–æ–≥–æ", f"${total_cost:.2f}")
                profit_color = "normal" if total_profit >= 0 else "inverse"
                st.metric("üéØ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", f"{'–ü—Ä–∏–±—ã–ª—å–Ω–æ' if total_profit >= 0 else '–£–±—ã—Ç–æ—á–Ω–æ'}", delta=f"{total_profit:.2f}")
        
        submitted = st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", use_container_width=True)
        
        if submitted:
            if product_name and quantity > 0 and cost_price >= 0 and sale_price >= 0 and weight > 0:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (—Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ)
                order_id = add_single_order(
                    st.session_state.user_id, 
                    product_name, 
                    quantity, 
                    cost_price, 
                    sale_price, 
                    weight, 
                    delivery_type,
                    order_date,
                    expected_delivery,
                    stock_status
                )
                
                if order_id:
                    if stock_status == "in_stock":
                        st.success(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω! –¢–æ–≤–∞—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
                    else:
                        st.success(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω! –¢–æ–≤–∞—Ä –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.")
                    
                    st.success(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date.strftime('%d.%m.%Y')}")
                    st.success(f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {expected_delivery.strftime('%d.%m.%Y')}")
                    st.balloons()
                    time.sleep(2)
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def show_complex_order_form():
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    if 'complex_items' not in st.session_state:
        st.session_state.complex_items = []
    
    with st.form("complex_order_form"):
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        order_type = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:",
            ["–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥ –∑–∞–∫–∞–∑", "–í–∑—è—Ç—å —Å–æ —Å–∫–ª–∞–¥–∞"],
            horizontal=True,
            help="–ü–æ–¥ –∑–∞–∫–∞–∑ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤. –°–æ —Å–∫–ª–∞–¥–∞ - —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥."
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            order_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ *")
            total_payment = st.number_input("–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ($) *", min_value=0.0, format="%.2f")
        
        st.subheader("–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"):
            item_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                item_quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=1, key="item_qty")
            with col2:
                item_cost = st.number_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", min_value=0.0, format="%.2f", key="item_cost")
            with col3:
                item_weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=0.0, format="%.2f", key="item_weight")
            with col4:
                item_delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", 
                                                options=["airplane", "truck"],
                                                format_func=lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                                                key="item_delivery")
            
            add_item_btn = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            
            if add_item_btn and item_name and item_quantity > 0 and item_cost >= 0 and item_weight > 0:
                st.session_state.complex_items.append({
                    'product_name': item_name,
                    'quantity': item_quantity,
                    'cost_price': item_cost,
                    'weight': item_weight,
                    'delivery_type': item_delivery_type
                })
                st.success(f"–¢–æ–≤–∞—Ä '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if st.session_state.complex_items:
            st.write("**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —á–∏—Ç–∞–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            items_display = []
            for item in st.session_state.complex_items:
                display_item = item.copy()
                display_item['delivery_type_display'] = "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if item['delivery_type'] == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)"
                display_item['item_delivery_cost'] = item['weight'] * DELIVERY_RATES[item['delivery_type']]
                items_display.append(display_item)
            
            items_df = pd.DataFrame(items_display)
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = {
                'product_name': '–¢–æ–≤–∞—Ä',
                'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'cost_price': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)',
                'weight': '–í–µ—Å (–∫–≥)',
                'delivery_type_display': '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏',
                'item_delivery_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ($)'
            }
            items_df_display = items_df[list(display_columns.keys())].rename(columns=display_columns)
            st.dataframe(items_df_display, use_container_width=True)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            total_delivery_cost = sum(item['weight'] * DELIVERY_RATES[item['delivery_type']] for item in st.session_state.complex_items)
            total_weight = sum(item['weight'] for item in st.session_state.complex_items)
            
            st.write("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:**")
            st.write(f"- –û–±—â–∏–π –≤–µ—Å: {total_weight:.2f} –∫–≥")
            st.write(f"- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${total_delivery_cost:.2f}")
            st.write(f"- –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã: ${max(0, total_payment - total_delivery_cost):.2f}")
        
        col1, col2 = st.columns(2)
        with col1:
            submit_order = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        with col2:
            clear_items = st.form_submit_button("–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        
        if clear_items:
            st.session_state.complex_items = []
            st.rerun()
        
        if submit_order:
            if order_name and total_payment > 0 and st.session_state.complex_items:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
                save_to_history_only = (order_type == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥ –∑–∞–∫–∞–∑")
                
                order_id = add_complex_order(st.session_state.user_id, order_name, 
                                           total_payment, st.session_state.complex_items,
                                           save_to_history_only=save_to_history_only)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑ —Å–æ —Å–∫–ª–∞–¥–∞
                if not save_to_history_only:
                    for item in st.session_state.complex_items:
                        add_to_inventory(st.session_state.user_id, item['product_name'], item['quantity'])
                
                order_type_msg = "–ø–æ–¥ –∑–∞–∫–∞–∑" if save_to_history_only else "—Å–æ —Å–∫–ª–∞–¥–∞"
                st.success(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} ({order_type_msg}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                st.session_state.complex_items = []
                st.rerun()
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")

def show_order_management():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    st.title("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "üì¶ –ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞", "üöö –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º", "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"])
    
    with tab1:
        st.header("üìä –í—Å–µ –∑–∞–∫–∞–∑—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        if not st.session_state.is_premium:
            conn = sqlite3.connect('business_manager.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM orders WHERE user_id = ?', (st.session_state.user_id,))
            current_orders = cursor.fetchone()[0]
            conn.close()
            
            remaining_orders = 25 - current_orders
            if remaining_orders <= 5:
                st.warning(f"‚ö†Ô∏è **–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤**: {current_orders}/25 –∑–∞–∫–∞–∑–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_orders}")
                if remaining_orders == 0:
                    st.error("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç! –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            else:
                st.info(f"üì¶ **–ó–∞–∫–∞–∑—ã**: {current_orders}/25 –∑–∞–∫–∞–∑–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        else:
            st.success("üíé **–ü—Ä–µ–º–∏—É–º**: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            status_filter = st.selectbox(
                "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:",
                ["–í—Å–µ", "pending", "confirmed", "shipped", "delivered", "cancelled"],
                format_func=lambda x: {
                    "–í—Å–µ": "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
                    "pending": "–û–∂–∏–¥–∞–µ—Ç",
                    "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", 
                    "shipped": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
                    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
                }.get(x, x)
            )
        
        with col2:
            date_from = st.date_input("–° –¥–∞—Ç—ã:", value=datetime.now().date() - timedelta(days=30))
        
        with col3:
            date_to = st.date_input("–ü–æ –¥–∞—Ç—É:", value=datetime.now().date())
        
        with col4:
            search_product = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä—É:")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        conn = sqlite3.connect('business_manager.db')
        
        base_query = '''
            SELECT 
                o.id, 
                o.order_name,
                o.order_type,
                o.delivery_type, 
                o.created_at,
                o.expected_delivery_date, 
                COALESCE(o.status, 'pending') as status,
                COALESCE(o.total_payment, 0) as total_payment,
                COUNT(oi.id) as items_count,
                SUM(oi.total_cost) as total_cost,
                SUM(oi.cost_price * oi.quantity) as total_cost_price,
                SUM(oi.delivery_cost) as total_delivery_cost
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            WHERE o.user_id = ?
        '''
        
        params = [st.session_state.user_id]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status_filter != "–í—Å–µ":
            base_query += " AND COALESCE(o.status, 'pending') = ?"
            params.append(status_filter)
        
        if search_product:
            base_query += " AND (o.order_name LIKE ? OR oi.product_name LIKE ?)"
            params.extend([f"%{search_product}%", f"%{search_product}%"])
        
        base_query += " AND DATE(o.created_at) BETWEEN ? AND ?"
        params.extend([date_from.strftime('%Y-%m-%d'), date_to.strftime('%Y-%m-%d')])
        
        base_query += " GROUP BY o.id ORDER BY o.created_at DESC"
        
        orders_df = pd.read_sql_query(base_query, conn, params=params)
        conn.close()
        
        if not orders_df.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders_df)}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                pending_count = len(orders_df[orders_df['status'] == 'pending'])
                st.metric("‚è≥ –û–∂–∏–¥–∞—é—Ç", pending_count)
            
            with col2:
                delivered_count = len(orders_df[orders_df['status'] == 'delivered'])
                st.metric("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", delivered_count)
            
            with col3:
                total_revenue = orders_df['total_cost'].sum()
                st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${total_revenue:.2f}")
            
            with col4:
                total_profit = (orders_df['total_cost'] - orders_df['total_cost_price'] - orders_df['total_delivery_cost']).sum()
                st.metric("üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"${total_profit:.2f}")
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
            
            for idx, order in orders_df.iterrows():
                with st.container():
                    st.markdown(f"""
                    <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background: #f8f9fa;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0; color: #000000;">üè∑Ô∏è –ó–∞–∫–∞–∑ #{order['id']}: {order['order_name']}</h4>
                                <p style="margin: 5px 0; color: #333333;">
                                    üì¶ –¢–∏–ø: {order['order_type']} | 
                                    üíµ –°—É–º–º–∞: ${order['total_cost']:.2f} | 
                                    üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order['delivery_type']} | 
                                    üìä –¢–æ–≤–∞—Ä–æ–≤: {order['items_count']}
                                </p>
                                <p style="margin: 5px 0; color: #333333;">
                                    üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'][:10]} | 
                                    üöÄ –û–∂–∏–¥–∞–µ—Ç—Å—è: {order['expected_delivery_date'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                </p>
                            </div>
                            <div style="text-align: right;">
                                <span style="background: {'#28a745' if order['status'] == 'delivered' else '#ffc107' if order['status'] == 'pending' else '#6c757d'}; 
                                      color: #000000; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                                    {order['status'].upper()}
                                </span>
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        if st.button(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key=f"confirm_{order['id']}"):
                            update_order_status(order['id'], st.session_state.user_id, 'confirmed')
                            st.success("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                            st.rerun()
                    
                    with col2:
                        if st.button(f"üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", key=f"ship_{order['id']}"):
                            update_order_status(order['id'], st.session_state.user_id, 'shipped')
                            st.success("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                            st.rerun()
                    
                    with col3:
                        if st.button(f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", key=f"deliver_{order['id']}"):
                            update_order_status(order['id'], st.session_state.user_id, 'delivered')
                            # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                            confirm_sale_and_reduce_stock(st.session_state.user_id, order['product_name'], order['quantity'])
                            st.success("–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ —Ç–æ–≤–∞—Ä —Å–ø–∏—Å–∞–Ω!")
                            st.rerun()
                    
                    with col4:
                        if st.button(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{order['id']}"):
                            update_order_status(order['id'], st.session_state.user_id, 'cancelled')
                            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –µ—Å–ª–∏ –±—ã–ª
                            release_reservation(st.session_state.user_id, order['product_name'], order['quantity'])
                            st.warning("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
                            st.rerun()
        else:
            st.info("üì≠ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab2:
        st.header("üì¶ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        if not st.session_state.is_premium:
            conn = sqlite3.connect('business_manager.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM inventory WHERE user_id = ?', (st.session_state.user_id,))
            current_items = cursor.fetchone()[0]
            conn.close()
            
            remaining_items = 20 - current_items
            if remaining_items <= 5:
                st.warning(f"‚ö†Ô∏è **–õ–∏–º–∏—Ç —Å–∫–ª–∞–¥–∞**: {current_items}/20 —Ç–æ–≤–∞—Ä–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_items}")
                if remaining_items == 0:
                    st.error("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç! –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞")
            else:
                st.info(f"üì¶ **–°–∫–ª–∞–¥**: {current_items}/20 —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        else:
            st.success("üíé **–ü—Ä–µ–º–∏—É–º**: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        low_stock_items = get_low_stock_items(st.session_state.user_id)
        
        if low_stock_items:
            st.error(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º ({len(low_stock_items)})")
            
            for item in low_stock_items:
                st.warning(f"""
                üè∑Ô∏è **{item['product_name']}**: {item['current_stock']} —à—Ç. –≤ –Ω–∞–ª–∏—á–∏–∏ 
                (–º–∏–Ω. —É—Ä–æ–≤–µ–Ω—å: {item['min_level']}, –¥–æ—Å—Ç—É–ø–Ω–æ: {item['available']} —à—Ç.)
                """)
        else:
            st.success("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        st.subheader("üìä –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        inventory_df = get_inventory(st.session_state.user_id)
        
        if not inventory_df.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            inventory_display = inventory_df.copy()
            inventory_display['reserved_quantity'] = inventory_display['reserved_quantity'].fillna(0)
            inventory_display['min_stock_level'] = inventory_display['min_stock_level'].fillna(0)
            inventory_display['available'] = inventory_display['quantity'] - inventory_display['reserved_quantity']
            inventory_display['status'] = inventory_display.apply(
                lambda row: "üî¥ –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫" if row['quantity'] <= row['min_stock_level'] and row['min_stock_level'] > 0 
                else "üü° –ù–∞ —Ä–µ–∑–µ—Ä–≤–µ" if row['reserved_quantity'] > 0 
                else "üü¢ –í –Ω–∞–ª–∏—á–∏–∏", axis=1
            )
            
            display_columns = {
                'product_name': '–¢–æ–≤–∞—Ä',
                'quantity': '–í—Å–µ–≥–æ',
                'reserved_quantity': '–†–µ–∑–µ—Ä–≤',
                'available': '–î–æ—Å—Ç—É–ø–Ω–æ',
                'min_stock_level': '–ú–∏–Ω. —É—Ä–æ–≤–µ–Ω—å',
                'status': '–°—Ç–∞—Ç—É—Å'
            }
            
            st.dataframe(
                inventory_display[list(display_columns.keys())].rename(columns=display_columns),
                use_container_width=True
            )
        else:
            st.info("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç")
    
    with tab3:
        st.header("üöö –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")
        show_supplier_orders()
    
    with tab4:
        st.header("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà –ê–≤—Ç–æ–∑–∞–∫–∞–∑ –ø–æ –º–∏–Ω–∏–º—É–º–∞–º")
            if st.button("üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–∞–º", use_container_width=True):
                create_auto_supplier_orders()
        
        with col2:
            st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ Excel", use_container_width=True):
                export_orders_to_excel()

def show_order_details(order_id):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_query = '''
        SELECT o.*, COUNT(oi.id) as items_count
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.id = ?
        GROUP BY o.id
    '''
    order_df = pd.read_sql_query(order_query, conn, params=(order_id,))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    items_query = '''
        SELECT oi.*
        FROM order_items oi
        WHERE oi.order_id = ?
    '''
    items_df = pd.read_sql_query(items_query, conn, params=(order_id,))
    
    conn.close()
    
    if not order_df.empty:
        order = order_df.iloc[0]
        
        st.subheader(f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {order['order_name']}")
            st.write(f"**–¢–∏–ø:** {order['order_type']}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {order['status']}")
            st.write(f"**–î–æ—Å—Ç–∞–≤–∫–∞:** {order['delivery_type']}")
        
        with col2:
            st.write(f"**–°–æ–∑–¥–∞–Ω:** {order['created_at']}")
            st.write(f"**–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:** {order['expected_delivery_date']}")
            if order['actual_delivery_date']:
                st.write(f"**–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:** {order['actual_delivery_date']}")
            st.write(f"**–û–±—â–∞—è —Å—É–º–º–∞:** ${order['total_payment']:.2f}")
        
        if not items_df.empty:
            st.subheader("üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
            st.dataframe(items_df, use_container_width=True)
    
    conn.commit()
    conn.close()

def show_supplier_orders():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
    st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É")
    
    with st.form("supplier_order_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            supplier_name = st.text_input("–ü–æ—Å—Ç–∞–≤—â–∏–∫ *")
            product_name = st.text_input("–¢–æ–≤–∞—Ä *")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", min_value=1, value=1)
        
        with col2:
            unit_cost = st.number_input("–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É *", min_value=0.01, format="%.2f")
            expected_date = st.date_input("–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏", value=datetime.now().date() + timedelta(days=14))
            notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
        
        total_cost = quantity * unit_cost
        st.info(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.2f}")
        
        submitted = st.form_submit_button("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É")
        
        if submitted and supplier_name and product_name:
            conn = sqlite3.connect('business_manager.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO supplier_orders 
                (user_id, supplier_name, product_name, quantity, unit_cost, total_cost, 
                 order_date, expected_delivery_date, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (st.session_state.user_id, supplier_name, product_name, quantity,
                  unit_cost, total_cost, datetime.now().date(), expected_date, notes))
            
            conn.commit()
            conn.close()
            
            st.success(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É '{supplier_name}' —Å–æ–∑–¥–∞–Ω!")
            st.rerun()
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    st.subheader("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")
    
    conn = sqlite3.connect('business_manager.db')
    supplier_orders_df = pd.read_sql_query('''
        SELECT * FROM supplier_orders 
        WHERE user_id = ? 
        ORDER BY order_date DESC
    ''', conn, params=(st.session_state.user_id,))
    conn.close()
    
    if not supplier_orders_df.empty:
        for idx, order in supplier_orders_df.iterrows():
            with st.container():
                status_color = {
                    'ordered': '#ffc107',
                    'shipped': '#17a2b8', 
                    'delivered': '#28a745',
                    'cancelled': '#dc3545'
                }.get(order['status'], '#6c757d')
                
                st.markdown(f"""
                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background: #f8f9fa;">
                    <h4 style="margin: 0; color: #000000;">üè™ {order['supplier_name']} - {order['product_name']}</h4>
                    <p style="margin: 5px 0; color: #333333;">
                        üì¶ {order['quantity']} —à—Ç. √ó ${order['unit_cost']:.2f} = ${order['total_cost']:.2f}<br>
                        üìÖ –ó–∞–∫–∞–∑–∞–Ω–æ: {order['order_date']} | üöö –û–∂–∏–¥–∞–µ—Ç—Å—è: {order['expected_delivery_date']}
                    </p>
                    <span style="background: {status_color}; color: #000000; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                        {order['status'].upper()}
                    </span>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button(f"‚úÖ –ü–æ–ª—É—á–µ–Ω", key=f"receive_{order['id']}"):
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–ª–∞–¥
                        conn = sqlite3.connect('business_manager.db')
                        cursor = conn.cursor()
                        
                        cursor.execute('UPDATE supplier_orders SET status = ? WHERE id = ?', 
                                     ('delivered', order['id']))
                        conn.commit()
                        conn.close()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
                        add_to_inventory(st.session_state.user_id, order['product_name'], order['quantity'])
                        
                        st.success("–¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥!")
                        st.rerun()
                
                with col2:
                    if st.button(f"üöö –í –ø—É—Ç–∏", key=f"ship_supplier_{order['id']}"):
                        conn = sqlite3.connect('business_manager.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE supplier_orders SET status = ? WHERE id = ?', 
                                     ('shipped', order['id']))
                        conn.commit()
                        conn.close()
                        st.rerun()
                
                with col3:
                    if st.button(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_supplier_{order['id']}"):
                        conn = sqlite3.connect('business_manager.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE supplier_orders SET status = ? WHERE id = ?', 
                                     ('cancelled', order['id']))
                        conn.commit()
                        conn.close()
                        st.rerun()
    else:
        st.info("üì≠ –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def create_auto_supplier_orders():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–∞–º"""
    low_stock_items = get_low_stock_items(st.session_state.user_id)
    
    if not low_stock_items:
        st.success("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
        return
    
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    created_orders = 0
    
    for item in low_stock_items:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ (–¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –º–∏–Ω. —É—Ä–æ–≤–µ–Ω—å * 2)
        order_quantity = max(item['min_level'] * 2 - item['current_stock'], item['min_level'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
        cursor.execute('''
            INSERT INTO supplier_orders 
            (user_id, supplier_name, product_name, quantity, unit_cost, total_cost, 
             order_date, expected_delivery_date, notes, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (st.session_state.user_id, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑", item['product_name'], 
              order_quantity, 0.0, 0.0, datetime.now().date(), 
              datetime.now().date() + timedelta(days=14), 
              f"–ê–≤—Ç–æ–∑–∞–∫–∞–∑ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é. –ù–µ—Ö–≤–∞—Ç–∫–∞: {item['shortage']} —à—Ç.", 
              'ordered'))
        
        created_orders += 1
    
    conn.commit()
    conn.close()
    
    st.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_orders} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")
    st.rerun()

def export_orders_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ Excel"""
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders_df = pd.read_sql_query('''
        SELECT o.*, 
               (o.sale_price - o.cost_price - o.delivery_cost) as profit
        FROM orders o
        WHERE o.user_id = ?
        ORDER BY o.created_at DESC
    ''', conn, params=(st.session_state.user_id,))
    
    conn.close()
    
    if orders_df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    from io import BytesIO
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        orders_df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑—ã', index=False)
        
        # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet = writer.sheets['–ó–∞–∫–∞–∑—ã']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'fg_color': '#D7E4BC',
            'border': 1
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for col_num, value in enumerate(orders_df.columns.values):
            worksheet.write(0, col_num, value, header_format)
    
    output.seek(0)
    
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
        data=output.getvalue(),
        file_name=f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

def show_notifications():
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.title("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –í–∫–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    tab1, tab2, tab3 = st.tabs(["üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ", "üìã –ò—Å—Ç–æ—Ä–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
    
    with tab1:
        st.header("üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        conn = sqlite3.connect('business_manager.db')
        notifications_df = pd.read_sql_query('''
            SELECT * FROM notifications 
            WHERE user_id = ? AND is_read = 0
            ORDER BY created_at DESC
        ''', conn, params=(st.session_state.user_id,))
        conn.close()
        
        if not notifications_df.empty:
            for idx, notification in notifications_df.iterrows():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É
                icon_map = {
                    'low_stock': '‚ö†Ô∏è',
                    'order_status': 'üì¶',
                    'system': 'üîß',
                    'supplier': 'üè™',
                    'revenue': 'üí∞'
                }
                
                color_map = {
                    'low_stock': '#ff6b6b',
                    'order_status': '#4ecdc4', 
                    'system': '#45b7d1',
                    'supplier': '#96ceb4',
                    'revenue': '#feca57'
                }
                
                icon = icon_map.get(notification['type'], 'üì¢')
                color = color_map.get(notification['type'], '#6c757d')
                
                with st.container():
                    st.markdown(f"""
                    <div style="border-left: 4px solid {color}; background: rgba(255,255,255,0.9); 
                                padding: 15px; margin: 10px 0; border-radius: 5px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0; color: #000000;">{icon} {notification['title']}</h4>
                                <p style="margin: 5px 0; color: #333333;">{notification['message']}</p>
                                <small style="color: #666666;">üìÖ {notification['created_at']}</small>
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col2:
                        if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º", key=f"read_{notification['id']}"):
                            mark_notification_as_read(notification['id'])
                            st.success("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                            st.rerun()
            
            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
            if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", use_container_width=True):
                mark_all_notifications_as_read(st.session_state.user_id)
                st.success("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
                st.rerun()
        else:
            st.success("üéâ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!")
    
    with tab2:
        st.header("üìã –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        page_size = 20
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1) - 1
        
        conn = sqlite3.connect('business_manager.db')
        all_notifications_df = pd.read_sql_query('''
            SELECT * FROM notifications 
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT ? OFFSET ?
        ''', conn, params=(st.session_state.user_id, page_size, page * page_size))
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total_count = conn.execute('''
            SELECT COUNT(*) FROM notifications WHERE user_id = ?
        ''', (st.session_state.user_id,)).fetchone()[0]
        
        conn.close()
        
        if not all_notifications_df.empty:
            st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(all_notifications_df)} –∏–∑ {total_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
            display_df = all_notifications_df.copy()
            display_df['status'] = display_df['is_read'].apply(lambda x: "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if x else "üîî –ù–æ–≤–æ–µ")
            display_df['type_display'] = display_df['type'].replace({
                'low_stock': '‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫',
                'order_status': 'üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
                'system': 'üîß –°–∏—Å—Ç–µ–º–∞',
                'supplier': 'üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫',
                'revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞'
            })
            
            display_columns = {
                'created_at': '–î–∞—Ç–∞',
                'type_display': '–¢–∏–ø',
                'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                'message': '–°–æ–æ–±—â–µ–Ω–∏–µ',
                'status': '–°—Ç–∞—Ç—É—Å'
            }
            
            st.dataframe(
                display_df[list(display_columns.keys())].rename(columns=display_columns),
                use_container_width=True
            )
        else:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞")
    
    with tab3:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        st.subheader("üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notification_settings = get_notification_settings(st.session_state.user_id)
        
        with st.form("notification_settings_form"):
            low_stock_enabled = st.checkbox(
                "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö",
                value=notification_settings.get('low_stock_enabled', True)
            )
            
            order_status_enabled = st.checkbox(
                "üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤",
                value=notification_settings.get('order_status_enabled', True)
            )
            
            supplier_enabled = st.checkbox(
                "üè™ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                value=notification_settings.get('supplier_enabled', True)
            )
            
            revenue_enabled = st.checkbox(
                "üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ä—É—á–∫–µ",
                value=notification_settings.get('revenue_enabled', True)
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
            st.subheader("üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            low_stock_threshold = st.number_input(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                min_value=0,
                value=notification_settings.get('low_stock_threshold', 5)
            )
            
            revenue_threshold = st.number_input(
                "–ü–æ—Ä–æ–≥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ($):",
                min_value=0.0,
                value=float(notification_settings.get('revenue_threshold', 1000.0)),
                format="%.2f"
            )
            
            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            if submitted:
                save_notification_settings(st.session_state.user_id, {
                    'low_stock_enabled': low_stock_enabled,
                    'order_status_enabled': order_status_enabled,
                    'supplier_enabled': supplier_enabled,
                    'revenue_enabled': revenue_enabled,
                    'low_stock_threshold': low_stock_threshold,
                    'revenue_threshold': revenue_threshold
                })
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", use_container_width=True):
                check_and_create_low_stock_notifications(st.session_state.user_id)
                st.success("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        
        with col2:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", use_container_width=True):
                clear_all_notifications(st.session_state.user_id)
                st.success("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")

def create_notification(user_id, notification_type, title, message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO notifications (user_id, type, title, message, created_at, is_read)
        VALUES (?, ?, ?, ?, ?, 0)
    ''', (user_id, notification_type, title, message, datetime.now()))
    
    conn.commit()
    conn.close()

def mark_notification_as_read(notification_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE notifications 
        SET is_read = 1 
        WHERE id = ?
    ''', (notification_id,))
    
    conn.commit()
    conn.close()

def mark_all_notifications_as_read(user_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE notifications 
        SET is_read = 1 
        WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()

def get_notification_settings(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ user_settings
    cursor.execute('''
        SELECT setting_name, setting_value 
        FROM user_settings 
        WHERE user_id = ? AND setting_name LIKE 'notification_%'
    ''', (user_id,))
    
    settings = {}
    for row in cursor.fetchall():
        key = row[0].replace('notification_', '')
        value = row[1]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã
        if value.lower() in ['true', 'false']:
            settings[key] = value.lower() == 'true'
        elif value.isdigit():
            settings[key] = int(value)
        else:
            try:
                settings[key] = float(value)
            except ValueError:
                settings[key] = value
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    if not settings:
        default_settings = {
            'low_stock_enabled': True,
            'order_status_enabled': True,
            'supplier_enabled': True,
            'revenue_enabled': True,
            'low_stock_threshold': 5,
            'revenue_threshold': 1000.0
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in default_settings.items():
            setting_name = f'notification_{key}'
            cursor.execute('''
                INSERT OR REPLACE INTO user_settings (user_id, setting_name, setting_value)
                VALUES (?, ?, ?)
            ''', (user_id, setting_name, str(value)))
        
        conn.commit()
        settings = default_settings
    
    conn.close()
    return settings

def save_notification_settings(user_id, settings):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    for key, value in settings.items():
        setting_name = f'notification_{key}'
        setting_value = str(value)
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_settings (user_id, setting_name, setting_value, updated_at)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        ''', (user_id, setting_name, setting_value))
    
    conn.commit()
    conn.close()

def check_and_create_low_stock_notifications(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    notification_settings = get_notification_settings(user_id)
    
    if not notification_settings.get('low_stock_enabled', True):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    low_stock_items = get_low_stock_items(user_id)
    
    if not low_stock_items:
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for item in low_stock_items:
        title = f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {item['product_name']}"
        message = f"–û—Å—Ç–∞—Ç–æ–∫ {item['current_stock']} —à—Ç. (–º–∏–Ω–∏–º—É–º: {item['min_level']} —à—Ç.). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT COUNT(*) FROM notifications 
            WHERE user_id = ? AND type = 'low_stock' 
            AND title = ? AND created_at > datetime('now', '-1 day')
        ''', (user_id, title))
        
        existing_count = cursor.fetchone()[0]
        conn.close()
        
        if existing_count == 0:
            create_notification(user_id, 'low_stock', title, message)

def clear_all_notifications(user_id):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM notifications WHERE user_id = ?', (user_id,))
    
    conn.commit()
    conn.close()

def get_unread_notifications_count(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT COUNT(*) FROM notifications 
        WHERE user_id = ? AND is_read = 0
    ''', (user_id,))
    
    count = cursor.fetchone()[0]
    conn.close()
    
    return count
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    
    # CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.markdown("""
    <style>
    .order-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 2px solid #e9ecef;
        border-radius: 20px;
        padding: 25px;
        margin: 20px 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .order-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    .order-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        border-color: #667eea;
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f8f9fa;
    }
    
    .order-title {
        font-size: 1.6rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .order-status {
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 700;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: 2px solid;
        min-width: 120px;
        text-align: center;
    }
    
    .status-pending {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        border-color: #ffc107;
    }
    
    .status-delivered {
        background: linear-gradient(135deg, #d1f2eb 0%, #a3d9c6 100%);
        color: #155724;
        border-color: #28a745;
    }
    
    .status-delayed {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        color: #721c24;
        border-color: #dc3545;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .order-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 25px 0;
    }
    
    .info-card {
        background: rgba(255,255,255,0.8);
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        border: 1px solid rgba(102, 126, 234, 0.2);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }
    
    .info-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
        border-color: #667eea;
    }
    
    .info-label {
        font-size: 0.9rem;
        color: #6c757d;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 1px;
        margin-bottom: 8px;
    }
    
    .info-value {
        font-size: 1.4rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }
    
    .profit-positive {
        color: #28a745;
    }
    
    .profit-negative {
        color: #dc3545;
    }
    
    .order-actions {
        display: flex;
        gap: 15px;
        margin-top: 25px;
        flex-wrap: wrap;
        justify-content: flex-start;
    }
    
    .action-button {
        padding: 12px 24px;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: 0.95rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #000000;
        border: 2px solid transparent;
    }
    
    .btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: #000000;
        border: 2px solid transparent;
    }
    
    .btn-danger {
        background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        color: #000000;
        border: 2px solid transparent;
    }
    
    .action-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }
    
    .search-panel {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 25px;
        border-radius: 20px;
        margin-bottom: 30px;
        border: 2px solid #dee2e6;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
    }
    
    .stat-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .no-orders {
        text-align: center;
        padding: 80px 40px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        margin: 40px 0;
        border: 2px dashed #dee2e6;
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin: 30px 0;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 30px; border-radius: 20px; margin-bottom: 30px; text-align: center;
                box-shadow: 0 8px 30px rgba(0,0,0,0.1);">
        <h1 style="color: #000000; margin: 0; font-size: 2.2rem; font-weight: 700;">
            üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ - {order_type.upper()}
        </h1>
        <p style="color: #000000; margin: 10px 0 0 0; font-size: 1.1rem;">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        with st.container():
            st.markdown('<div class="search-panel">', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            
            with col1:
                search_term = st.text_input(
                    "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...",
                    key=f"search_{order_type}"
                )
            
            with col2:
                status_filter = st.selectbox(
                    "üìä –°—Ç–∞—Ç—É—Å", 
                    ["–í—Å–µ", "–í –æ–∂–∏–¥–∞–Ω–∏–∏", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", "–ó–∞–¥–µ—Ä–∂–∞–Ω"],
                    key=f"status_filter_{order_type}"
                )
            
            with col3:
                sort_option = st.selectbox(
                    "üìà –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", 
                    ["–î–∞—Ç–µ (–Ω–æ–≤—ã–µ)", "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)", "–ü—Ä–∏–±—ã–ª–∏ ‚Üì", "–ü—Ä–∏–±—ã–ª–∏ ‚Üë", "–ù–∞–∑–≤–∞–Ω–∏—é"],
                    key=f"sort_{order_type}"
                )
            
            with col4:
                per_page = st.selectbox(
                    "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å", 
                    [5, 10, 20, 50], 
                    index=1,
                    key=f"per_page_{order_type}"
                )
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if order_type == "single":
            base_query = '''
                SELECT o.id, o.order_name, 
                       oi.quantity, 
                       oi.sale_price as price, 
                       oi.cost_price as cost,
                       (oi.sale_price - oi.cost_price) * oi.quantity as profit,
                       o.created_at as order_date, 
                       o.status, 
                       o.expected_delivery_date, 
                       o.actual_delivery_date,
                       o.delivery_type
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "single"
            '''
        else:
            base_query = '''
                SELECT o.id, o.order_name, 
                       COUNT(oi.id) as total_items,
                       SUM(oi.sale_price * oi.quantity) as price,
                       SUM(oi.cost_price * oi.quantity) as cost,
                       SUM((oi.sale_price - oi.cost_price) * oi.quantity) as profit,
                       o.created_at as order_date, 
                       o.status, 
                       o.expected_delivery_date, 
                       o.actual_delivery_date,
                       o.delivery_type
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "complex"
                GROUP BY o.id, o.order_name, o.created_at, o.status, o.expected_delivery_date, 
                         o.actual_delivery_date, o.delivery_type
            '''
        
        params = [st.session_state.user_id]
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if search_term:
            base_query += " AND LOWER(order_name) LIKE LOWER(?)"
            params.append(f"%{search_term}%")
        
        if status_filter != "–í—Å–µ":
            status_map = {"–í –æ–∂–∏–¥–∞–Ω–∏–∏": "pending", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "delivered"}
            if status_filter == "–ó–∞–¥–µ—Ä–∂–∞–Ω":
                # –î–ª—è –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                base_query += " AND status = 'pending' AND expected_delivery_date < date('now')"
            elif status_filter in status_map:
                base_query += " AND status = ?"
                params.append(status_map[status_filter])
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_option == "–î–∞—Ç–µ (–Ω–æ–≤—ã–µ)":
            base_query += " ORDER BY order_date DESC"
        elif sort_option == "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)":
            base_query += " ORDER BY order_date ASC"
        elif sort_option == "–ü—Ä–∏–±—ã–ª–∏ ‚Üì":
            base_query += " ORDER BY profit DESC"
        elif sort_option == "–ü—Ä–∏–±—ã–ª–∏ ‚Üë":
            base_query += " ORDER BY profit ASC"
        elif sort_option == "–ù–∞–∑–≤–∞–Ω–∏—é":
            base_query += " ORDER BY order_name ASC"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_sql_query(base_query, conn, params=params)
        
        if df.empty:
            st.markdown("""
            <div class="no-orders">
                <h2 style="color: #6c757d; margin-bottom: 20px;">üì≠ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
                <p style="color: #6c757d; font-size: 1.2rem; margin-bottom: 30px;">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                </p>
                <div style="margin-top: 30px;">
                    <a href="#" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                                      color: #000000; padding: 15px 30px; border-radius: 12px; 
                                      text-decoration: none; font-weight: 600;">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
                    </a>
                </div>
            </div>
            """, unsafe_allow_html=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
        delayed_orders = get_delayed_orders(st.session_state.user_id)
        delayed_ids = [order[0] for order in delayed_orders]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_orders = len(df)
        total_pages = max(1, (total_orders + per_page - 1) // per_page)
        
        if f'page_{order_type}' not in st.session_state:
            st.session_state[f'page_{order_type}'] = 1
        
        current_page = st.session_state[f'page_{order_type}']
        
        # –ü–∞–Ω–µ–ª—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            st.markdown(f"""
            <div class="pagination">
                <span style="color: #6c757d; font-weight: 600;">
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages} ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
                </span>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])
            
            with col1:
                if st.button("‚èÆÔ∏è –ü–µ—Ä–≤–∞—è", disabled=current_page == 1, key=f"first_{order_type}"):
                    st.session_state[f'page_{order_type}'] = 1
                    st.rerun()
            
            with col2:
                if st.button("‚óÄÔ∏è –ù–∞–∑–∞–¥", disabled=current_page == 1, key=f"prev_{order_type}"):
                    st.session_state[f'page_{order_type}'] -= 1
                    st.rerun()
            
            with col4:
                if st.button("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", disabled=current_page == total_pages, key=f"next_{order_type}"):
                    st.session_state[f'page_{order_type}'] += 1
                    st.rerun()
            
            with col5:
                if st.button("–ü–æ—Å–ª–µ–¥–Ω—è—è ‚è≠Ô∏è", disabled=current_page == total_pages, key=f"last_{order_type}"):
                    st.session_state[f'page_{order_type}'] = total_pages
                    st.rerun()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * per_page
        end_idx = start_idx + per_page
        page_orders = df.iloc[start_idx:end_idx]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        for _, order in page_orders.iterrows():
            order_id = order['id']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫
            status = order['status']
            is_delayed = order_id in delayed_ids
            
            if is_delayed:
                status_display = "delayed"
                status_text = "‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∞–Ω"
                status_color = "#e74c3c"
            elif status == "delivered":
                status_display = "delivered"
                status_text = "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                status_color = "#27ae60"
            else:
                status_display = "pending"
                status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                status_color = "#f39c12"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            order_date = pd.to_datetime(order['order_date']).strftime('%d.%m.%Y')
            expected_date = pd.to_datetime(order['expected_delivery_date']).strftime('%d.%m.%Y') if order['expected_delivery_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
            profit = order['profit']
            profit_color = "#27ae60" if profit > 0 else "#e74c3c"
            
            # –¢–µ–º–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                border-radius: 20px;
                padding: 25px;
                margin: 20px 0;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                border: 1px solid rgba(255,255,255,0.1);
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            " onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 15px 40px rgba(0,212,255,0.2)'; this.style.borderColor='#00d4ff';" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 10px 30px rgba(0,0,0,0.3)'; this.style.borderColor='rgba(255,255,255,0.1)';">
                
                <!-- –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ -->
                <div style="
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 4px;
                    background: linear-gradient(90deg, {status_color}, {status_color}88);
                "></div>
                
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º -->
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <div>
                        <h2 style="
                            color: #000000; 
                            margin: 0; 
                            font-size: 1.5rem; 
                            font-weight: 700;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                        " onclick="document.getElementById('detail_btn_{order_id}').click();">
                            üì¶ {order['order_name']}
                        </h2>
                        <p style="color: #95a5a6; margin: 5px 0 0 0; font-size: 0.9rem;">
                            ID: #{order_id} ‚Ä¢ {order_type.upper()}
                        </p>
                    </div>
                    <div style="
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-weight: 700;
                        font-size: 0.9rem;
                        color: #000000;
                        background: {status_color};
                        box-shadow: 0 4px 15px {status_color}44;
                    ">
                        {status_text}
                    </div>
                </div>
                
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                <div style="
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
                    gap: 15px;
                    margin: 20px 0;
                ">
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(0,212,255,0.1)'; this.style.borderColor='#00d4ff';"
                       onmouseout="this.style.background='rgba(255,255,255,0.05)'; this.style.borderColor='rgba(255,255,255,0.1)';">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üí∞ –ü—Ä–∏–±—ã–ª—å</div>
                        <div style="color: {profit_color}; font-size: 1.4rem; font-weight: 700;">${profit:,.0f}</div>
                    </div>
                    
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</div>
                        <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{order_date}</div>
                    </div>
                    
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üöö –î–æ—Å—Ç–∞–≤–∫–∞</div>
                        <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{expected_date}</div>
                    </div>
                    
                    {"<div style='background: rgba(255,255,255,0.05); padding: 15px; border-radius: 12px; text-align: center; border: 1px solid rgba(255,255,255,0.1);'><div style='color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;'>üìä –ü–æ–∑–∏—Ü–∏–π</div><div style='color: #ecf0f1; font-size: 1.2rem; font-weight: 600;'>" + str(int(order.get('total_items', 1))) + "</div></div>" if order_type == "complex" and 'total_items' in order else ""}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # –¢–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3, col4 = st.columns([2, 2, 2, 2])
            
            with col1:
                if st.button(f"üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"detail_btn_{order_id}", use_container_width=True):
                    st.session_state[f'show_details_{order_id}'] = not st.session_state.get(f'show_details_{order_id}', False)
                    st.rerun()
            
            with col2:
                if st.button(f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", key=f"manage_{order_id}_{order_type}", use_container_width=True):
                    st.session_state[f'show_management_{order_id}'] = not st.session_state.get(f'show_management_{order_id}', False)
                    st.rerun()
            
            with col3:
                # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if status == "pending":
                    if st.button(f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", key=f"quick_deliver_{order_id}", use_container_width=True):
                        if update_order_status(order_id, st.session_state.user_id, "delivered"):
                            st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            time.sleep(0.5)
                            st.rerun()
                else:
                    if st.button(f"üîÑ –í–µ—Ä–Ω—É—Ç—å", key=f"quick_pending_{order_id}", use_container_width=True):
                        if update_order_status(order_id, st.session_state.user_id, "pending"):
                            st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            time.sleep(0.5)
                            st.rerun()
            
            with col4:
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{order_id}_{order_type}", use_container_width=True):
                    st.session_state[f'confirm_delete_{order_id}'] = True
                    st.rerun()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
            if st.session_state.get(f'show_details_{order_id}', False):
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                    border-radius: 15px;
                    padding: 20px;
                    margin: 15px 0;
                    border: 1px solid #00d4ff;
                    box-shadow: 0 5px 20px rgba(0,212,255,0.2);
                ">
                    <h3 style="color: #00d4ff; margin-bottom: 15px;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</h3>
                </div>
                """, unsafe_allow_html=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                if order_type == "complex":
                    show_order_details(order_id)
                else:
                    detail_col1, detail_col2 = st.columns(2)
                    with detail_col1:
                        st.info(f"üì¶ **–¢–æ–≤–∞—Ä:** {order['order_name']}")
                        st.info(f"üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {order.get('quantity', 'N/A')}")
                        st.info(f"üí∞ **–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:** ${order.get('price', 0):.0f}")
                    with detail_col2:
                        st.info(f"üí∏ **–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${order.get('cost', 0):.0f}")
                        st.info(f"üìà **–ü—Ä–∏–±—ã–ª—å:** ${profit:.0f}")
                        st.info(f"üöö **–î–æ—Å—Ç–∞–≤–∫–∞:** {order.get('delivery_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
            if st.session_state.get(f'show_management_{order_id}', False):
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                    border-radius: 15px;
                    padding: 20px;
                    margin: 15px 0;
                    border: 1px solid #f39c12;
                    box-shadow: 0 5px 20px rgba(243,156,18,0.2);
                ">
                    <h3 style="color: #f39c12; margin-bottom: 15px;">‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º #{order_id}</h3>
                </div>
                """, unsafe_allow_html=True)
                
                mgmt_col1, mgmt_col2, mgmt_col3 = st.columns(3)
                
                with mgmt_col1:
                    st.subheader("üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
                    new_delivery_date = st.date_input(
                        "–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:",
                        value=pd.to_datetime(order['expected_delivery_date']).date() if order['expected_delivery_date'] else None,
                        key=f"delivery_date_{order_id}"
                    )
                    if st.button("üíæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", key=f"update_date_{order_id}"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
                        st.success("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                
                with mgmt_col2:
                    st.subheader("üìã –°—Ç–∞—Ç—É—Å")
                    current_status_idx = 0 if status == "pending" else 1
                    new_status = st.selectbox(
                        "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                        ["pending", "delivered"],
                        index=current_status_idx,
                        key=f"status_mgmt_{order_id}",
                        format_func=lambda x: "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏" if x == "pending" else "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                    )
                    if st.button("ÔøΩ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"change_status_{order_id}"):
                        update_order_status(order_id, st.session_state.user_id, new_status)
                        st.success("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!")
                        st.rerun()
                
                with mgmt_col3:
                    st.subheader("üö® –î–µ–π—Å—Ç–≤–∏—è")
                    if st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", key=f"notify_{order_id}"):
                        st.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    
                    if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", key=f"export_{order_id}"):
                        st.info("üìÑ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            if st.session_state.get(f'confirm_delete_{order_id}', False):
                st.error("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**")
                delete_col1, delete_col2, delete_col3 = st.columns([1, 1, 2])
                
                with delete_col1:
                    if st.button("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"confirm_yes_{order_id}"):
                        if delete_order(order_id, st.session_state.user_id):
                            st.success("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!")
                            st.session_state[f'confirm_delete_{order_id}'] = False
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
                with delete_col2:
                    if st.button("‚úÖ –û—Ç–º–µ–Ω–∞", key=f"confirm_no_{order_id}"):
                        st.session_state[f'confirm_delete_{order_id}'] = False
                        st.rerun()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
            if st.session_state.get(f'edit_mode_{order_id}', False):
                show_edit_order_form(order_id, st.session_state.user_id)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            st.markdown("<hr style='border: 1px solid rgba(255,255,255,0.1); margin: 30px 0;'>", unsafe_allow_html=True)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            st.markdown("<hr style='margin: 30px 0; border: none; height: 1px; background: linear-gradient(90deg, transparent, #dee2e6, transparent);'>", unsafe_allow_html=True)
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        total_profit = df['profit'].sum()
        pending_count = len(df[df['status'] == 'pending'])
        delivered_count = len(df[df['status'] == 'delivered']) 
        delayed_count = len([oid for oid in df['id'] if oid in delayed_ids])
        
        with col1:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #28a745;">
                <h3 style="color: #28a745; margin: 0; font-size: 2rem;">üí∞ ${total_profit:,.0f}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #ffc107;">
                <h3 style="color: #ffc107; margin: 0; font-size: 2rem;">‚è≥ {pending_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–í –æ–∂–∏–¥–∞–Ω–∏–∏</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #17a2b8;">
                <h3 style="color: #17a2b8; margin: 0; font-size: 2rem;">‚úÖ {delivered_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #dc3545;">
                <h3 style="color: #dc3545; margin: 0; font-size: 2rem;">‚ö†Ô∏è {delayed_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–ó–∞–¥–µ—Ä–∂–∞–Ω–æ</p>
            </div>
            """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        if delayed_count > 0:
            st.markdown("### üö® –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–¥–µ—Ä–∂–∫–∞–º")
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                if st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type="primary", use_container_width=True):
                    notifications_sent = send_delay_notifications(st.session_state.user_id)
                    if notifications_sent > 0:
                        st.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        st.info("‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
            with col2:
                st.warning(f"–£ –≤–∞—Å {delayed_count} –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏.")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        st.exception(e)
    
    finally:
        conn.close()

def show_simple_order_history(order_type):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); 
        padding: 30px; 
        border-radius: 20px; 
        margin-bottom: 30px; 
        text-align: center;
        box-shadow: 0 8px 30px rgba(0,0,0,0.3);
    ">
        <h1 style="color: #00d4ff; margin: 0; font-size: 2.2rem; font-weight: 700;">
            üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ - {order_type.upper()}
        </h1>
        <p style="color: #000000; margin: 10px 0 0 0; font-size: 1.1rem;">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if order_type == "single":
            query = '''
                SELECT o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date,
                       oi.quantity, oi.sale_price, oi.cost_price,
                       (oi.sale_price - oi.cost_price) * oi.quantity as profit
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "single"
                ORDER BY o.created_at DESC
            '''
        else:  # complex
            query = '''
                SELECT o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date,
                       COUNT(oi.id) as item_count,
                       SUM(oi.sale_price * oi.quantity) as total_sale,
                       SUM(oi.cost_price * oi.quantity) as total_cost,
                       SUM((oi.sale_price - oi.cost_price) * oi.quantity) as profit
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "complex"
                GROUP BY o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date
                ORDER BY o.created_at DESC
            '''
        
        cursor.execute(query, (st.session_state.user_id,))
        orders = cursor.fetchall()
        
        if not orders:
            st.markdown("""
            <div style="
                text-align: center;
                padding: 60px 40px;
                background: rgba(255,255,255,0.05);
                border-radius: 20px;
                margin: 40px 0;
                border: 2px dashed rgba(255,255,255,0.2);
            ">
                <h3 style="color: #95a5a6; margin-bottom: 20px;">üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p style="color: #7f8c8d;">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        for order in orders:
            order_id = order[0]
            order_name = order[1]
            status = order[2]
            created_at = order[3]
            expected_delivery = order[4]
            
            # –°—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
            if status == "delivered":
                status_text = "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                status_color = "#27ae60"
            elif status == "pending":
                status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                status_color = "#f39c12"
            else:
                status_text = "‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∞–Ω"
                status_color = "#e74c3c"
            
            # –ü—Ä–∏–±—ã–ª—å –∏ –µ–µ —Ü–≤–µ—Ç
            profit = order[-1] if order[-1] else 0
            profit_color = "#27ae60" if profit > 0 else "#e74c3c"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            order_date = pd.to_datetime(created_at).strftime('%d.%m.%Y') if created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            delivery_date = pd.to_datetime(expected_delivery).strftime('%d.%m.%Y') if expected_delivery else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π
            details_key = f"details_{order_id}"
            if details_key not in st.session_state:
                st.session_state[details_key] = False
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                border: 1px solid rgba(255,255,255,0.1);
                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            ">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h3 style="
                            color: #00d4ff; 
                            margin: 0; 
                            font-size: 1.4rem; 
                            font-weight: 600;
                            cursor: pointer;
                        " onclick="document.getElementById('detail_btn_{order_id}').click();">
                            {'üì¶' if order_type == 'single' else 'üìã'} {order_name}
                        </h3>
                        <p style="color: #95a5a6; margin: 5px 0 0 0; font-size: 0.9rem;">
                            {order_type.upper()}
                        </p>
                    </div>
                    <div style="
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-weight: 600;
                        font-size: 0.9rem;
                        color: #000000;
                        background: {status_color};
                        box-shadow: 0 4px 15px {status_color}44;
                    ">
                        {status_text}
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π (—Å–∫—Ä—ã—Ç–∞—è)
            if st.button("üëÅÔ∏è", key=f"detail_btn_{order_id}", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"):
                st.session_state[details_key] = not st.session_state[details_key]
                st.rerun()
            
            # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã)
            if st.session_state[details_key]:
                with st.container():
                    st.markdown(f"""
                    <div style="
                        background: rgba(255,255,255,0.05);
                        border-radius: 12px;
                        padding: 20px;
                        margin: 10px 0 20px 0;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                    """, unsafe_allow_html=True)
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üí∞ –ü–†–ò–ë–´–õ–¨</div>
                            <div style="color: {profit_color}; font-size: 1.4rem; font-weight: 700;">${profit:.2f}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üìÖ –î–ê–¢–ê –ó–ê–ö–ê–ó–ê</div>
                            <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{order_date}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col3:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üöö –î–û–°–¢–ê–í–ö–ê</div>
                            <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{delivery_date}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
                    st.markdown("### üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞–∫–∞–∑–∞
                    cursor.execute('''
                        SELECT oi.product_name, oi.quantity, oi.cost_price, oi.sale_price, 
                               oi.weight, oi.item_delivery_type, oi.delivery_cost,
                               (oi.sale_price - oi.cost_price) * oi.quantity as item_profit
                        FROM order_items oi
                        WHERE oi.order_id = ?
                    ''', (order_id,))
                    
                    order_items = cursor.fetchall()
                    
                    if order_items:
                        for i, item in enumerate(order_items):
                            item_name, item_qty, item_cost, item_sale, item_weight, item_delivery_type, item_delivery_cost, item_profit = item
                            
                            # –¶–≤–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ç–æ–≤–∞—Ä–∞
                            item_profit_color = "#27ae60" if item_profit > 0 else "#e74c3c"
                            
                            st.markdown(f"""
                            <div style="
                                background: rgba(255,255,255,0.03);
                                border-radius: 8px;
                                padding: 15px;
                                margin: 10px 0;
                                border: 1px solid rgba(255,255,255,0.1);
                            ">
                                <h4 style="color: #00d4ff; margin: 0 0 10px 0;">üì¶ {item_name}</h4>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–ö–û–õ–ò–ß–ï–°–¢–í–û</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{item_qty} —à—Ç.</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_cost:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–¶–ï–ù–ê –ü–†–û–î–ê–ñ–ò</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_sale:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–í–ï–°</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{item_weight:.2f} –∫–≥</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–î–û–°–¢–ê–í–ö–ê</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{'‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç' if item_delivery_type == 'airplane' else 'üöõ –ú–∞—à–∏–Ω–∞'}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–ê–í–ö–ò</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_delivery_cost:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–ü–†–ò–ë–´–õ–¨</div>
                                        <div style="color: {item_profit_color}; font-weight: 700;">${item_profit:.2f}</div>
                                    </div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    st.markdown("### üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if status == "pending":
                            if st.button(f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º", key=f"deliver_{order_id}", use_container_width=True):
                                if update_order_status(order_id, st.session_state.user_id, "delivered"):
                                    st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    st.rerun()
                    
                    with col2:
                        edit_key = f'edit_mode_{order_id}'
                        if edit_key not in st.session_state:
                            st.session_state[edit_key] = False
                        
                        if not st.session_state[edit_key]:
                            if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{order_id}", use_container_width=True):
                                st.session_state[edit_key] = True
                                st.rerun()
                        else:
                            if st.button(f"ÔøΩ –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cancel_edit_{order_id}", use_container_width=True):
                                st.session_state[edit_key] = False
                                st.rerun()
                    
                    with col3:
                        if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_{order_id}", use_container_width=True):
                            if delete_order(order_id, st.session_state.user_id):
                                st.success("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                    
                    st.markdown("</div>", unsafe_allow_html=True)
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    finally:
        conn.close()

def show_order_details(order_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    st.subheader(f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_query = '''
        SELECT order_name, total_payment, created_at 
        FROM orders 
        WHERE id = ?
    '''
    order_info = pd.read_sql_query(order_query, conn, params=(order_id,))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    items_query = '''
        SELECT product_name, quantity, cost_price, sale_price, weight, 
               delivery_cost, total_cost, item_delivery_type
        FROM order_items 
        WHERE order_id = ?
    '''
    items_df = pd.read_sql_query(items_query, conn, params=(order_id,))
    conn.close()
    
    if not order_info.empty:
        order_data = order_info.iloc[0]
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", order_data['order_name'])
        with col2:
            st.metric("üí∞ –û–±—â–∏–π –ø–ª–∞—Ç–µ–∂", f"${order_data['total_payment']:.2f}")
        with col3:
            st.metric("üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", order_data['created_at'][:10])
        
        if not items_df.empty:
            st.write("**–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:**")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
            items_df['delivery_type_display'] = items_df['item_delivery_type'].apply(
                lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)"
            )
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = {
                'product_name': '–¢–æ–≤–∞—Ä',
                'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'cost_price': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)',
                'sale_price': '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($)',
                'weight': '–í–µ—Å (–∫–≥)',
                'delivery_type_display': '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏',
                'delivery_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ($)',
                'total_cost': '–ò—Ç–æ–≥–æ ($)'
            }
            
            items_display = items_df[list(display_columns.keys())].rename(columns=display_columns)
            st.dataframe(items_display, use_container_width=True)

def show_analytics():
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
    
    analytics = get_analytics(st.session_state.user_id)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        metrics_data = {
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', 
                          '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–ú–∞—Ä–∂–∞ (%)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"${analytics['total_revenue']:.2f}",
                f"${analytics['total_cost_price']:.2f}",
                f"${analytics['total_delivery_costs']:.2f}",
                f"${analytics['total_costs']:.2f}",
                f"${analytics['profit']:.2f}",
                f"{analytics['margin']:.1f}%",
                f"{analytics['profitability']:.1f}%"
            ]
        }
        
        metrics_df = pd.DataFrame(metrics_data)
        st.dataframe(metrics_df, use_container_width=True, hide_index=True)
    
    with col2:
        st.subheader("üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        planning_data = {
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞', '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'],
            '–°—É–º–º–∞': [
                f"${analytics['profit']:.2f}",
                f"${analytics['financial_cushion']:.2f}",
                f"${analytics['personal_expenses']:.2f}"
            ],
            '–ü—Ä–æ—Ü–µ–Ω—Ç': [
                "100%",
                f"{analytics['cushion_percent']:.1f}%",
                f"{100 - analytics['cushion_percent']:.1f}%"
            ]
        }
        
        planning_df = pd.DataFrame(planning_data)
        st.dataframe(planning_df, use_container_width=True, hide_index=True)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    if analytics['total_revenue'] > 0:
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
            fig_pie = go.Figure(data=[go.Pie(
                labels=['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', '–ü—Ä–∏–±—ã–ª—å'],
                values=[analytics['total_cost_price'], analytics['total_delivery_costs'], analytics['profit']],
                hole=0.3
            )])
            fig_pie.update_layout(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏", height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            fig_bar = go.Figure(data=[go.Bar(
                x=['–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞', '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'],
                y=[analytics['financial_cushion'], analytics['personal_expenses']],
                marker_color=['#4682B4', '#228B22']
            )])
            fig_bar.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏", height=400)
            st.plotly_chart(fig_bar, use_container_width=True)
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
        st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
        conn = sqlite3.connect('business_manager.db')
        
        sales_query = '''
            SELECT DATE(o.created_at) as date, 
                   SUM(oi.total_cost) as daily_revenue,
                   SUM(oi.cost_price + oi.delivery_cost) as daily_costs,
                   SUM(oi.total_cost - oi.cost_price - oi.delivery_cost) as daily_profit
            FROM orders o
            JOIN order_items oi ON o.id = oi.order_id
            WHERE o.user_id = ?
            GROUP BY DATE(o.created_at)
            ORDER BY date
        '''
        
        sales_df = pd.read_sql_query(sales_query, conn, params=(st.session_state.user_id,))
        conn.close()
        
        if not sales_df.empty:
            fig_line = go.Figure()
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_revenue'], 
                                        mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞', line=dict(color='#000080')))
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_costs'], 
                                        mode='lines+markers', name='–†–∞—Å—Ö–æ–¥—ã', line=dict(color='#8B0000')))
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_profit'], 
                                        mode='lines+markers', name='–ü—Ä–∏–±—ã–ª—å', line=dict(color='#006400')))
            
            fig_line.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", 
                                 xaxis_title="–î–∞—Ç–∞", yaxis_title="–°—É–º–º–∞ ($)", height=500)
            st.plotly_chart(fig_line, use_container_width=True)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è AI –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    st.subheader("ü§ñ AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        from advanced_analytics import get_analytics_manager
        analytics_manager = get_analytics_manager()
        
        tab1, tab2, tab3, tab4 = st.tabs(["üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã", "üöö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏", "üí° AI –ò–Ω—Å–∞–π—Ç—ã", "üìä –¢—Ä–µ–Ω–¥—ã"])
        
        with tab1:
            st.markdown("#### üîÆ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º")
            
            col1, col2 = st.columns(2)
            with col1:
                prediction_days = st.selectbox("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", 
                                             options=[7, 14, 30, 60], 
                                             index=0,
                                             help="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            
            predictions = analytics_manager.get_advanced_predictions(st.session_state.user_id, prediction_days)
            
            if predictions:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏", 
                             f"${predictions['total_predicted_revenue']:.2f}")
                with col2:
                    st.metric("üì¶ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫–∞–∑–æ–≤", 
                             f"{predictions['total_predicted_orders']}")
                with col3:
                    accuracy = predictions['model_accuracy']['revenue_r2'] * 100
                    st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{accuracy:.1f}%")
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                pred_dates = [p['date'] for p in predictions['predictions']]
                pred_revenue = [p['predicted_revenue'] for p in predictions['predictions']]
                
                fig_forecast = go.Figure()
                fig_forecast.add_trace(go.Scatter(
                    x=pred_dates, y=pred_revenue,
                    mode='lines+markers',
                    name='–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏',
                    line=dict(color='#000080', dash='dash')
                ))
                fig_forecast.update_layout(
                    title=f"–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ –Ω–∞ {prediction_days} –¥–Ω–µ–π",
                    xaxis_title="–î–∞—Ç–∞", yaxis_title="–í—ã—Ä—É—á–∫–∞ ($)"
                )
                st.plotly_chart(fig_forecast, use_container_width=True)
            else:
                st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤.")
        
        with tab2:
            st.markdown("#### üöö –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏")
            
            col1, col2 = st.columns(2)
            with col1:
                delivery_period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:", 
                                             options=[30, 60, 90, 180], 
                                             index=0,
                                             help="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=delivery_period)).strftime('%Y-%m-%d')
            
            delivery_comparison = analytics_manager.get_delivery_comparison(
                st.session_state.user_id, start_date, end_date
            )
            
            if delivery_comparison is not None and len(delivery_comparison) > 0:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                delivery_data = delivery_comparison[delivery_comparison['delivery_type'] != 'recommendations']
                
                if len(delivery_data) > 0:
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    delivery_data_display = delivery_data.copy()
                    delivery_data_display['delivery_type'] = delivery_data_display['delivery_type'].replace({
                        'airplane': '‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç',
                        'truck': 'üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å'
                    })
                    
                    col1, col2, col3 = st.columns(3)
                    for idx, row in delivery_data_display.iterrows():
                        with col1 if idx == 0 else col2:
                            st.metric(
                                f"{row['delivery_type']} - –ó–∞–∫–∞–∑—ã",
                                f"{int(row['orders_count'])}"
                            )
                            st.metric(
                                f"{row['delivery_type']} - –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
                                f"{row['profit_margin']:.1f}%"
                            )
                            st.metric(
                                f"{row['delivery_type']} - –°—Ç–æ–∏–º–æ—Å—Ç—å/–∫–≥",
                                f"${row['delivery_cost_per_kg']:.2f}"
                            )
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    fig_delivery = go.Figure(data=[
                        go.Bar(name='–ü—Ä–∏–±—ã–ª—å (%)', 
                               x=delivery_data_display['delivery_type'], 
                               y=delivery_data_display['profit_margin']),
                        go.Bar(name='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 
                               x=delivery_data_display['delivery_type'], 
                               y=delivery_data_display['efficiency_score'] * 100)
                    ])
                    fig_delivery.update_layout(
                        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
                        yaxis_title="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å (%)"
                    )
                    st.plotly_chart(fig_delivery, use_container_width=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations_row = delivery_comparison[delivery_comparison['delivery_type'] == 'recommendations']
                if len(recommendations_row) > 0 and 'recommendations' in recommendations_row.columns:
                    st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ")
                    for rec in recommendations_row['recommendations'].iloc[0]:
                        st.success(f"‚úÖ {rec}")
            else:
                st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        
        with tab3:
            st.markdown("#### üí° AI –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            insights_period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                                         options=[7, 14, 30, 60], 
                                         index=2,
                                         help="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å")
            
            ai_insights = analytics_manager.get_ai_insights(st.session_state.user_id, insights_period)
            
            if ai_insights:
                col1, col2 = st.columns(2)
                
                with col1:
                    if ai_insights['performance']:
                        st.markdown("##### üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
                        for insight in ai_insights['performance']:
                            st.success(insight)
                    
                    if ai_insights['opportunities']:
                        st.markdown("##### üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞")
                        for insight in ai_insights['opportunities']:
                            st.info(insight)
                
                with col2:
                    if ai_insights['warnings']:
                        st.markdown("##### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
                        for insight in ai_insights['warnings']:
                            st.warning(insight)
                    
                    if ai_insights['recommendations']:
                        st.markdown("##### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                        for insight in ai_insights['recommendations']:
                            st.info(f"üí° {insight}")
            else:
                st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞.")
        
        with tab4:
            st.markdown("#### üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
            
            col1, col2 = st.columns(2)
            with col1:
                trend_days = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Ç—Ä–µ–Ω–¥–æ–≤:", 
                                        options=[30, 60, 90, 180], 
                                        index=1,
                                        help="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã")
            with col2:
                delivery_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:", 
                                             options=['all', 'airplane', 'truck'], 
                                             format_func=lambda x: {'all': 'üåê –í—Å–µ', 'airplane': '‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç', 'truck': 'üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å'}[x],
                                             help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏")
            
            trends = analytics_manager.get_sales_trends(
                st.session_state.user_id, 
                days=trend_days, 
                delivery_method=None if delivery_filter == 'all' else delivery_filter
            )
            
            if trends is not None and len(trends) > 0:
                fig_trends = go.Figure()
                fig_trends.add_trace(go.Scatter(
                    x=trends['date'], y=trends['revenue'],
                    mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞',
                    line=dict(color='#000080')
                ))
                fig_trends.add_trace(go.Scatter(
                    x=trends['date'], y=trends['profit'],
                    mode='lines+markers', name='–ü—Ä–∏–±—ã–ª—å',
                    line=dict(color='#006400')
                ))
                fig_trends.update_layout(
                    title=f"–¢—Ä–µ–Ω–¥—ã –∑–∞ {trend_days} –¥–Ω–µ–π",
                    xaxis_title="–î–∞—Ç–∞", yaxis_title="–°—É–º–º–∞ ($)"
                )
                st.plotly_chart(fig_trends, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
                col1, col2, col3 = st.columns(3)
                with col1:
                    avg_revenue = trends['revenue'].mean()
                    st.metric("üìä –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞/–¥–µ–Ω—å", f"${avg_revenue:.2f}")
                with col2:
                    total_orders = trends['orders'].sum()
                    st.metric("üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", f"{int(total_orders)}")
                with col3:
                    avg_profit_margin = (trends['profit'].sum() / trends['revenue'].sum() * 100) if trends['revenue'].sum() > 0 else 0
                    st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞", f"{avg_profit_margin:.1f}%")
            else:
                st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤.")
    
    except ImportError:
        st.error("‚ùå –ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª advanced_analytics.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"):
        report_data = generate_full_report(st.session_state.user_id)
        excel_data = export_to_excel(report_data, "full_analytics_report")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
            data=excel_data,
            file_name=f"analytics_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def show_inventory():
    st.title("üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º")
    
    tab1, tab2, tab3, tab4 = st.tabs(["–°–∫–ª–∞–¥", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", "–ü–æ–∏—Å–∫"])
    
    with tab1:
        st.subheader("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞")
        
        inventory_df = get_inventory(st.session_state.user_id)
        
        if not inventory_df.empty:
            # –°–æ–∑–¥–∞–µ–º checkbox –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            col1, col2, col3 = st.columns(3)
            with col1:
                sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", 
                                     ["product_name", "quantity", "created_at"])
            with col2:
                sort_order = st.selectbox("–ü–æ—Ä—è–¥–æ–∫:", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"])
            with col3:
                low_stock_threshold = st.number_input("–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", min_value=1, value=5)
            
            ascending = sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"
            inventory_df_sorted = inventory_df.sort_values(sort_by, ascending=ascending)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            if 'selected_items' not in st.session_state:
                st.session_state.selected_items = []
            
            # –ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", type="secondary"):
                    if st.session_state.selected_items:
                        st.session_state.confirm_bulk_delete = True
                        st.rerun()
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            with col2:
                if st.button("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ"):
                    st.session_state.selected_items = inventory_df_sorted['id'].tolist()
                    st.rerun()
            
            with col3:
                if st.button("‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ"):
                    st.session_state.selected_items = []
                    st.rerun()
            
            with col4:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–∫–ª–∞–¥", type="secondary"):
                    st.session_state.confirm_clear_inventory = True
                    st.rerun()
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if st.session_state.get('confirm_bulk_delete', False):
                st.warning(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(st.session_state.selected_items)} —Ç–æ–≤–∞—Ä–æ–≤!")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", type="primary"):
                        deleted_count = delete_inventory_items_bulk(st.session_state.user_id, st.session_state.selected_items)
                        st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤")
                        st.session_state.confirm_bulk_delete = False
                        st.session_state.selected_items = []
                        st.rerun()
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"):
                        st.session_state.confirm_bulk_delete = False
                        st.rerun()
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            if st.session_state.get('confirm_clear_inventory', False):
                st.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞!")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–∫–ª–∞–¥", type="primary"):
                        deleted_count = clear_inventory(st.session_state.user_id)
                        st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞")
                        st.session_state.confirm_clear_inventory = False
                        st.session_state.selected_items = []
                        st.rerun()
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"):
                        st.session_state.confirm_clear_inventory = False
                        st.rerun()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            st.markdown("---")
            for _, item in inventory_df_sorted.iterrows():
                col1, col2, col3, col4, col5, col6 = st.columns([0.5, 3, 1.5, 1.5, 1, 1])
                
                with col1:
                    # Checkbox –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
                    is_selected = st.checkbox("", key=f"select_{item['id']}", 
                                            value=item['id'] in st.session_state.selected_items)
                    if is_selected and item['id'] not in st.session_state.selected_items:
                        st.session_state.selected_items.append(item['id'])
                    elif not is_selected and item['id'] in st.session_state.selected_items:
                        st.session_state.selected_items.remove(item['id'])
                
                with col2:
                    st.write(f"**üì¶ {item['product_name']}**")
                    if item['link']:
                        st.markdown(f"[üîó –°—Å—ã–ª–∫–∞]({item['link']})")
                
                with col3:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    new_quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                                                 min_value=0, 
                                                 value=int(item['quantity']), 
                                                 key=f"qty_{item['id']}")
                
                with col4:
                    # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    if item['quantity'] <= low_stock_threshold:
                        st.error(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫")
                    else:
                        st.success(f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏")
                    st.caption(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item['created_at'][:10]}")
                
                with col5:
                    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    if st.button("üíæ", key=f"save_{item['id']}", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"):
                        if update_inventory_quantity(st.session_state.user_id, item['id'], new_quantity):
                            if new_quantity == 0:
                                st.success("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0)")
                            else:
                                st.success("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                with col6:
                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    if st.button("üóëÔ∏è", key=f"del_{item['id']}", help="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"):
                        if delete_inventory_item(st.session_state.user_id, item['id']):
                            st.success("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
                            if item['id'] in st.session_state.selected_items:
                                st.session_state.selected_items.remove(item['id'])
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
            low_stock = inventory_df[inventory_df['quantity'] <= low_stock_threshold]
            if not low_stock.empty:
                st.markdown("---")
                st.warning(f"‚ö†Ô∏è **{len(low_stock)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:**")
                for _, item in low_stock.iterrows():
                    st.write(f"‚Ä¢ **{item['product_name']}**: {item['quantity']} —à—Ç.")
        else:
            st.info("üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'")
    
    with tab2:
        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥")
        st.info("üí° –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ. –¢–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        
        with st.form("add_inventory_form"):
            product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", min_value=1, value=1)
            link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", placeholder="https://example.com/product")
            
            submitted = st.form_submit_button("üì¶ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")
            
            if submitted:
                if product_name and quantity > 0:
                    success, message = add_to_inventory(st.session_state.user_id, product_name, quantity, link)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    with tab3:
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
        st.info("ÔøΩ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–∫–∞–∑–∞–Ω—ã –∏ –ø—Ä–æ–¥–∞–Ω—ã (–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ)")
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            history_limit = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π:", [50, 100, 200, None], 
                                       format_func=lambda x: "–í—Å–µ" if x is None else str(x))
        with col2:
            search_product = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞:")
        with col3:
            date_filter = st.selectbox("–ü–µ—Ä–∏–æ–¥:", ["–í—Å–µ –≤—Ä–µ–º—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if search_product:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            start_date = None
            if date_filter == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
                start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            elif date_filter == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞":
                start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
            
            history_df = search_order_history(st.session_state.user_id, search_product, start_date)
        else:
            history_df = get_order_history(st.session_state.user_id, history_limit)
        
        if not history_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(history_df))
            with col2:
                st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${history_df['total_cost'].sum():.2f}")
            with col3:
                st.metric("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"${(history_df['total_cost'] - history_df['cost_price'] * history_df['quantity'] - history_df['delivery_cost']).sum():.2f}")
            with col4:
                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", history_df['product_name'].nunique())
            
            st.markdown("---")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_stats = history_df.groupby('delivery_type').agg({
                'total_cost': 'sum',
                'quantity': 'sum',
                'id': 'count'
            }).rename(columns={'id': 'orders_count'})
            
            if len(delivery_stats) > 1:
                st.markdown("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:**")
                col1, col2 = st.columns(2)
                
                with col1:
                    for delivery_type, stats in delivery_stats.iterrows():
                        delivery_name = "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç" if delivery_type == 'airplane' else "üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
                        st.write(f"**{delivery_name}:**")
                        st.write(f"  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {stats['orders_count']}")
                        st.write(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['quantity']}")
                        st.write(f"  ‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${stats['total_cost']:.2f}")
                
                with col2:
                    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
                    fig_delivery = px.pie(
                        values=delivery_stats['total_cost'],
                        names=[f"{'–°–∞–º–æ–ª–µ—Ç' if idx == 'airplane' else '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'}" for idx in delivery_stats.index],
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ"
                    )
                    st.plotly_chart(fig_delivery, use_container_width=True)
            
            st.markdown("---")
            st.markdown("**üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:**")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
            for _, record in history_df.iterrows():
                with st.expander(f"üì¶ {record['product_name']} - {record['order_date'][:10]} (${record['total_cost']:.2f})"):
                    col1, col2, col3, col4 = st.columns([2, 2, 2, 1])
                    
                    with col1:
                        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {record['quantity']}")
                        st.write(f"**–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${record['cost_price']:.2f}")
                        st.write(f"**–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:** ${record['sale_price']:.2f}")
                    
                    with col2:
                        st.write(f"**–í–µ—Å:** {record['weight']} –∫–≥")
                        delivery_name = "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç" if record['delivery_type'] == 'airplane' else "üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å"
                        st.write(f"**–î–æ—Å—Ç–∞–≤–∫–∞:** {delivery_name}")
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:** ${record['delivery_cost']:.2f}")
                    
                    with col3:
                        profit = record['total_cost'] - (record['cost_price'] * record['quantity']) - record['delivery_cost']
                        st.write(f"**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${record['total_cost']:.2f}")
                        st.write(f"**–ü—Ä–∏–±—ã–ª—å:** ${profit:.2f}")
                        if record['order_name']:
                            st.write(f"**–ó–∞–∫–∞–∑:** {record['order_name']}")
                    
                    with col4:
                        st.write("**–î–µ–π—Å—Ç–≤–∏—è:**")
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_history_{record['id']}", 
                                   help="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"):
                            if delete_order_history_item(record['id']):
                                st.success("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            
            # –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            st.markdown("---")
            st.markdown("**üóëÔ∏è –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**")
            col1, col2 = st.columns(2)
            
            with col1:
                selected_products = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    options=history_df['id'].tolist(),
                    format_func=lambda x: f"{history_df[history_df['id']==x]['product_name'].iloc[0]} - {history_df[history_df['id']==x]['order_date'].iloc[0][:10]}"
                )
            
            with col2:
                if selected_products:
                    st.write(f"–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(selected_products)}")
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", type="secondary"):
                        if delete_order_history_items_bulk(selected_products):
                            st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(selected_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        else:
            st.info("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞")
    
    with tab4:
        st.subheader("üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üè™ –ü–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:**")
            search_term = st.text_input("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
            
            if search_term:
                search_results = search_inventory(st.session_state.user_id, search_term)
                
                if not search_results.empty:
                    st.write(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
                    for _, row in search_results.iterrows():
                        with st.expander(f"üì¶ {row['product_name']} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['quantity']})"):
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {row['quantity']}")
                                st.write(f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {row['created_at'][:10]}")
                            with col2:
                                if row['link']:
                                    st.markdown(f"**–°—Å—ã–ª–∫–∞:** [üîó –û—Ç–∫—Ä—ã—Ç—å]({row['link']})")
                                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {row['product_name']}", key=f"search_del_{row['id']}"):
                                    if delete_inventory_item(st.session_state.user_id, row['id']):
                                        st.success("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
                                        st.rerun()
                else:
                    st.info("–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with col2:
            st.markdown("**üìã –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:**")
            history_search = st.text_input("–ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:")
            
            if history_search:
                history_results = search_order_history(st.session_state.user_id, history_search)
                
                if not history_results.empty:
                    st.write(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(history_results)} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:")
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                    grouped = history_results.groupby('product_name').agg({
                        'quantity': 'sum',
                        'total_cost': 'sum',
                        'order_date': 'max'
                    }).sort_values('order_date', ascending=False)
                    
                    for product_name, stats in grouped.iterrows():
                        with st.expander(f"üìã {product_name} - {stats['quantity']} —à—Ç. (${stats['total_cost']:.2f})"):
                            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:** {stats['order_date'][:10]}")
                            st.write(f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {stats['quantity']}")
                            st.write(f"**–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:** ${stats['total_cost']:.2f}")
                else:
                    st.info("–ó–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_smart_functions():
    st.title("üß† –£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    tab1, tab2, tab3, tab4 = st.tabs(["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", "–°–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã"])
    
    with tab1:
        st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        
        try:
            from smart_functions import get_smart_functions
            smart_func = get_smart_functions()
            
            recommendations = smart_func.get_reorder_recommendations(st.session_state.user_id)
            
            if recommendations:
                st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
                
                for i, rec in enumerate(recommendations):
                    priority_color = "üî¥" if rec['priority'] == 'high' else "üü°"
                    
                    with st.expander(f"{priority_color} {rec['product_name']} (–Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª—Å—è {rec['days_since_last']} –¥–Ω–µ–π)"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("–ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤", rec['frequency'])
                        with col2:
                            st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", rec['suggested_quantity'])
                        with col3:
                            st.metric("–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${rec['suggested_cost_price']}")
                        
                        if st.button(f"–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è {rec['product_name']}", key=f"reorder_{i}"):
                            # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
                            st.session_state[f"auto_product_name"] = rec['product_name']
                            st.session_state[f"auto_quantity"] = rec['suggested_quantity']
                            st.session_state[f"auto_cost_price"] = rec['suggested_cost_price']
                            st.session_state[f"auto_weight"] = rec['suggested_weight']
                            st.success("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ó–∞–∫–∞–∑—ã.")
            else:
                st.info("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        
        except ImportError:
            st.error("–ú–æ–¥—É–ª—å —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with tab2:
        st.subheader("üîç –¢–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        try:
            search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
            
            if search_query:
                suggestions = smart_func.get_product_suggestions(st.session_state.user_id, search_query)
                
                if suggestions:
                    st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
                    for suggestion in suggestions:
                        st.write(f"- {suggestion['name']} (–∑–∞–∫–∞–∑—ã–≤–∞–ª—Å—è {suggestion['frequency']} —Ä–∞–∑)")
                else:
                    st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        except:
            st.error("–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    with tab3:
        st.subheader("‚≠ê –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        try:
            supplier_analysis = smart_func.analyze_supplier_performance(st.session_state.user_id)
            
            if supplier_analysis:
                for supplier_name, data in supplier_analysis.items():
                    with st.expander(f"{supplier_name} (–†–µ–π—Ç–∏–Ω–≥: {data['performance_score']})"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", data['orders_count'])
                            st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", f"${data['avg_delivery_cost']}")
                        
                        with col2:
                            st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${data['total_revenue']}")
                            st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–∫–∞–∑–æ–≤", f"{data['avg_order_age_days']} –¥–Ω–µ–π")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        except:
            st.error("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with tab4:
        st.subheader("üìÖ –°–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
        
        try:
            seasonal_data = smart_func.get_seasonal_insights(st.session_state.user_id)
            
            if seasonal_data:
                for month, products in seasonal_data.items():
                    with st.expander(f"ÔøΩ {month}"):
                        if products:
                            df = pd.DataFrame(products)
                            st.dataframe(df, use_container_width=True)
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
        
        except:
            st.error("–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def show_admin_panel():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    if not st.session_state.get('user_id'):
        st.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_admin FROM users WHERE id = ?', (st.session_state.user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if not result or not result[0]:
        st.error("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #2E4057; font-size: 2.5rem; font-weight: 300;">
            üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        </h1>
        <p style="color: #64748B; font-size: 1.1rem;">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_tab = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üí≥ –ü–ª–∞—Ç–µ–∂–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    if admin_tab == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_admin_users()
    elif admin_tab == "üí≥ –ü–ª–∞—Ç–µ–∂–∏":
        show_admin_payments()
    elif admin_tab == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_admin_statistics()
    elif admin_tab == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_admin_settings()

def show_admin_panel():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    admin_page = st.session_state.get('admin_page', 'users')
    
    if admin_page == "users":
        show_admin_users()
    elif admin_page == "payments":
        show_admin_payments()
    elif admin_page == "stats":
        show_admin_statistics()
    elif admin_page == "reports":
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∑–∂–µ
        st.header("üìà –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")
        st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif admin_page == "admin_settings":
        show_admin_settings()
    else:
        show_admin_users()

def show_admin_users():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    
    with col2:
        premium_filter = st.selectbox("–ü—Ä–µ–º–∏—É–º:", ["–í—Å–µ", "–¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º", "–ë–µ–∑ –ø—Ä–µ–º–∏—É–º–∞"])
    
    with col3:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:", ["–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ü–æ email", "–ü–æ —Å—Ç–∞—Ç—É—Å—É"])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('business_manager.db')
    
    query = '''
        SELECT 
            id, email, phone, full_name, business_name,
            premium_status, premium_end_date, created_at, last_login
        FROM users 
        WHERE is_admin = 0
    '''
    params = []
    
    if search_term:
        query += " AND (email LIKE ? OR phone LIKE ? OR full_name LIKE ?)"
        search_pattern = f"%{search_term}%"
        params.extend([search_pattern, search_pattern, search_pattern])
    
    if premium_filter == "–¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º":
        query += " AND premium_status = 1"
    elif premium_filter == "–ë–µ–∑ –ø—Ä–µ–º–∏—É–º–∞":
        query += " AND (premium_status = 0 OR premium_status IS NULL)"
    
    if sort_by == "–ü–æ email":
        query += " ORDER BY email"
    elif sort_by == "–ü–æ —Å—Ç–∞—Ç—É—Å—É":
        query += " ORDER BY premium_status DESC"
    else:
        query += " ORDER BY created_at DESC"
    
    users_df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    
    if not users_df.empty:
        st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = len(users_df)
        premium_users = len(users_df[users_df['premium_status'] == True])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
        with col2:
            st.metric("üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", premium_users)
        with col3:
            st.metric("üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–º–∏—É–º", f"{(premium_users/total_users*100):.1f}%" if total_users > 0 else "0%")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for idx, user in users_df.iterrows():
            with st.container():
                st.markdown(f"""
                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background: #f8f9fa;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4 style="margin: 0; color: #000000 !important;">
                                üë§ {user['full_name'] or user['email']}
                            </h4>
                            <p style="margin: 5px 0; color: #000000 !important;">
                                üìß {user['email']} | üì± {user['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                            </p>
                            <p style="margin: 5px 0; color: #000000 !important;">
                                üè¢ {user['business_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} | 
                                üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'][:10]}
                            </p>
                        </div>
                        <div style="text-align: right;">
                            <span style="background: {'#28a745' if user['premium_status'] else '#6c757d'}; 
                                  color: #ffffff !important; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                                {'–ü–†–ï–ú–ò–£–ú' if user['premium_status'] else '–û–ë–´–ß–ù–´–ô'}
                            </span>
                            {f'<p style="margin: 5px 0; font-size: 12px; color: #000000 !important;">–î–æ: {user["premium_end_date"][:10] if user["premium_end_date"] else ""}</p>' if user['premium_status'] else ''}
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if st.button(f"üíé {'–û—Ç–∫–ª—é—á–∏—Ç—å' if user['premium_status'] else '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'} –ø—Ä–µ–º–∏—É–º", 
                               key=f"toggle_premium_{user['id']}"):
                        if user['premium_status']:
                            deactivate_premium(user['id'])
                            st.success("–ü—Ä–µ–º–∏—É–º –æ—Ç–∫–ª—é—á–µ–Ω")
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                            if user['id'] == st.session_state.user_id:
                                st.session_state.is_premium = False
                        else:
                            activate_premium(user['id'])
                            st.success("–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Å—è—Ü")
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                            if user['id'] == st.session_state.user_id:
                                st.session_state.is_premium = True
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        time.sleep(0.5)
                        st.rerun()
                
                with col2:
                    if st.button(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", key=f"stats_{user['id']}"):
                        show_user_statistics(user['id'])
                
                with col3:
                    if st.button(f"üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", key=f"payments_{user['id']}"):
                        show_user_payments(user['id'])
                
                with col4:
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{user['id']}"):
                        if st.session_state.get(f'confirm_delete_{user["id"]}'):
                            if delete_user(user['id']):
                                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                if f'confirm_delete_{user["id"]}' in st.session_state:
                                    del st.session_state[f'confirm_delete_{user["id"]}']
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                if f'confirm_delete_{user["id"]}' in st.session_state:
                                    del st.session_state[f'confirm_delete_{user["id"]}']
                        else:
                            st.session_state[f'confirm_delete_{user["id"]}'] = True
                            st.warning("–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_user_statistics(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    conn = sqlite3.connect('business_manager.db')
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_df = pd.read_sql_query('SELECT email, created_at, premium_status FROM users WHERE id = ?', conn, params=(user_id,))
        if user_df.empty:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_info = user_df.iloc[0]
        st.write(f"**Email:** {user_info['email']}")
        st.write(f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_info['created_at']}")
        st.write(f"**–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user_info['premium_status'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        orders_df = pd.read_sql_query('''
            SELECT COUNT(*) as total_orders,
                   SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending_orders,
                   SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_orders
            FROM orders WHERE user_id = ?
        ''', conn, params=(user_id,))
        
        if not orders_df.empty:
            stats = orders_df.iloc[0]
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", stats['total_orders'])
            with col2:
                st.metric("–í –æ–∂–∏–¥–∞–Ω–∏–∏", stats['pending_orders'])
            with col3:
                st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", stats['completed_orders'])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        inventory_df = pd.read_sql_query('SELECT COUNT(*) as total_products, SUM(quantity) as total_quantity FROM inventory WHERE user_id = ?', conn, params=(user_id,))
        if not inventory_df.empty:
            inv_stats = inventory_df.iloc[0]
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ", inv_stats['total_products'])
            with col2:
                st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", inv_stats['total_quantity'])
        
    finally:
        conn.close()

def show_user_payments(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.subheader(f"üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    conn = sqlite3.connect('business_manager.db')
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_df = pd.read_sql_query('SELECT email FROM users WHERE id = ?', conn, params=(user_id,))
        if user_df.empty:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_df.iloc[0]['email']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        payments_df = pd.read_sql_query('''
            SELECT payment_date, amount, status, payment_method
            FROM payment_history 
            WHERE user_id = ? 
            ORDER BY payment_date DESC
        ''', conn, params=(user_id,))
        
        if not payments_df.empty:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            total_paid = payments_df[payments_df['status'] == 'confirmed']['amount'].sum()
            total_pending = payments_df[payments_df['status'] == 'pending']['amount'].sum()
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π", f"{total_paid:.2f} –¢–ú")
            with col2:
                st.metric("–í –æ–∂–∏–¥–∞–Ω–∏–∏", f"{total_pending:.2f} –¢–ú")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π
            st.dataframe(payments_df, use_container_width=True)
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    finally:
        conn.close()

def show_admin_payments():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    st.header("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        status_filter = st.selectbox("–°—Ç–∞—Ç—É—Å:", ["–í—Å–µ", "pending", "confirmed", "rejected"])
    
    with col2:
        days_filter = st.selectbox("–ü–µ—Ä–∏–æ–¥:", ["–í—Å–µ –≤—Ä–µ–º—è", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü"])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    conn = sqlite3.connect('business_manager.db')
    
    query = '''
        SELECT 
            ph.id, ph.user_id, ph.amount, ph.status, ph.payment_date,
            ph.confirmed_date, ph.notes, u.email, u.phone, u.full_name
        FROM payment_history ph
        JOIN users u ON ph.user_id = u.id
        WHERE 1=1
    '''
    params = []
    
    if status_filter != "–í—Å–µ":
        query += " AND ph.status = ?"
        params.append(status_filter)
    
    if days_filter == "–ó–∞ –Ω–µ–¥–µ–ª—é":
        query += " AND ph.payment_date >= datetime('now', '-7 days')"
    elif days_filter == "–ó–∞ –º–µ—Å—è—Ü":
        query += " AND ph.payment_date >= datetime('now', '-30 days')"
    
    query += " ORDER BY ph.payment_date DESC"
    
    payments_df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    
    if not payments_df.empty:
        st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        pending_count = len(payments_df[payments_df['status'] == 'pending'])
        confirmed_count = len(payments_df[payments_df['status'] == 'confirmed'])
        total_amount = payments_df[payments_df['status'] == 'confirmed']['amount'].sum()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", pending_count)
        with col2:
            st.metric("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", confirmed_count)
        with col3:
            st.metric("üí∞ –û–±—â–∞—è —Å—É–º–º–∞", f"{total_amount:.0f} ‚Çº")
        
        # –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        for idx, payment in payments_df.iterrows():
            with st.container():
                st.markdown(f"""
                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background: white;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4 style="margin: 0; color: #000000;">
                                üí≥ –ü–ª–∞—Ç–µ–∂ #{payment['id']} - {payment['amount']:.0f} ‚Çº
                            </h4>
                            <p style="margin: 5px 0; color: #333333;">
                                üë§ {payment['full_name'] or payment['email']} | üì± {payment['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                            </p>
                            <p style="margin: 5px 0; color: #333333;">
                                üìÖ –î–∞—Ç–∞: {payment['payment_date'][:16]} | 
                                {f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {payment['confirmed_date'][:16]}" if payment['confirmed_date'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"}
                            </p>
                        </div>
                        <div style="text-align: right;">
                            <span style="background: {'#28a745' if payment['status'] == 'confirmed' else '#ffc107' if payment['status'] == 'pending' else '#dc3545'}; 
                                  color: #000000; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                                {payment['status'].upper()}
                            </span>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                if payment['status'] == 'pending':
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if st.button(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key=f"confirm_payment_{payment['id']}"):
                            if confirm_payment(payment['id'], st.session_state.user_id):
                                st.success("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                                st.rerun()
                    
                    with col2:
                        if st.button(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key=f"reject_payment_{payment['id']}"):
                            reject_payment(payment['id'])
                            st.warning("–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                            st.rerun()
    else:
        st.info("–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def deactivate_premium(user_id):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–º–∏—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users 
        SET premium_status = 0,
            premium_end_date = NULL
        WHERE id = ?
    ''', (user_id,))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if 'user_id' in st.session_state and st.session_state.user_id == user_id:
        st.session_state.premium_status = 0
        st.session_state.is_premium = False
    
    conn.commit()
    conn.close()

def reject_payment(payment_id):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE payment_history 
        SET status = 'rejected'
        WHERE id = ?
    ''', (payment_id,))
    
    conn.commit()
    conn.close()

def show_admin_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    conn = sqlite3.connect('business_manager.db')
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = pd.read_sql_query("SELECT COUNT(*) as count FROM users WHERE is_admin = 0", conn).iloc[0]['count']
    premium_users = pd.read_sql_query("SELECT COUNT(*) as count FROM users WHERE premium_status = 1 AND is_admin = 0", conn).iloc[0]['count']
    total_revenue = pd.read_sql_query("SELECT SUM(amount) as total FROM payment_history WHERE status = 'confirmed'", conn).iloc[0]['total'] or 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
    
    with col2:
        st.metric("üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", premium_users)
    
    with col3:
        st.metric("üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥", f"{total_revenue:.0f} ‚Çº")
    
    with col4:
        conversion = (premium_users / total_users * 100) if total_users > 0 else 0
        st.metric("üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conversion:.1f}%")
    
    conn.close()

def show_admin_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    st.subheader("üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        premium_price = st.number_input("–¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ (–¢–ú):", value=150, min_value=1)
        payment_phone = st.text_input("–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", value="+993 658-425-20")
    
    with col2:
        admin_email = st.text_input("Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", value="alexkurumbayev@gmail.com")
        auto_deactivate = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞", value=True)
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_premium_settings():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.title("üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    is_premium = check_premium_status(st.session_state.user_id)
    
    if is_premium:
        st.success("‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT premium_end_date FROM users WHERE id = ?
        ''', (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0]:
            end_date = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
            st.info(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}")
        
        st.subheader("üéØ –í–∞—à–∏ –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        st.markdown("""
        - üß† **–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - üìä **–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã** - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        - üì¶ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º** - –º—É–ª—å—Ç–∏—Å–∫–ª–∞–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
        - üöö **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏** - —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        - üí± **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
        - üë• **–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø** - –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        - üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** - –≤—ã–≥—Ä—É–∑–∫–∞ –≤ Excel, PDF
        - üèÜ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** - –±—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        """)
        
    else:
        st.warning("‚ö†Ô∏è –£ –≤–∞—Å –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: #000000; padding: 30px; border-radius: 15px; margin: 20px 0;">
            <h2 style="color: #000000; text-align: center; margin-bottom: 20px;">
                üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ - 150 –¢–ú/–º–µ—Å—è—Ü
            </h2>
            <p style="text-align: center; font-size: 1.1rem;">
                –†–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Å –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º–∏!
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üéØ –ü—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            st.markdown("""
            - üß† **–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            - üìä **–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã** - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
            - üì¶ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º** - –º—É–ª—å—Ç–∏—Å–∫–ª–∞–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
            - üöö **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏** - —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            - üí± **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
            - üë• **–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø** - –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
            - üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** - –≤—ã–≥—Ä—É–∑–∫–∞ –≤ Excel, PDF
            - üèÜ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** - –±—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
            - üöÄ **–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** - –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –∑–∞–∫–∞–∑–∞–º
            """)
            
            st.info("""
            **üìà –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞:**
            - ‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 20 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
            - ‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 25 –∑–∞–∫–∞–∑–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            - ‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            - ‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            """)
        
        with col2:
            st.subheader("üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:")
            st.markdown("""
            **1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 150 –¢–ú –Ω–∞ –Ω–æ–º–µ—Ä:**
            
            üì± **+993 658-425-20**
            
            **2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª" –Ω–∏–∂–µ**
            
            **3Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 24 —á–∞—Å–æ–≤)**
            
            ‚ö†Ô∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–≤–Ω–æ 1 –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏*
            """)
            
            if st.button("üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É", type="primary"):
                payment_id = request_premium_payment(st.session_state.user_id)
                st.success(f"""
                ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! 
                
                üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                
                üîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                
                üìã –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: #{payment_id}
                """)

def show_settings():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if st.session_state.is_admin:
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ", "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üíæ –î–∞–Ω–Ω—ã–µ", "üë®‚Äçüíº –ê–¥–º–∏–Ω", "üíé –ü—Ä–µ–º–∏—É–º"])
    else:
        tab1, tab2, tab3, tab4 = st.tabs(["üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ", "ÔøΩ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üíæ –î–∞–Ω–Ω—ã–µ", "üíé –ü—Ä–µ–º–∏—É–º"])
    
    with tab1:
        st.markdown("""
        <div class="card">
            <h3 style="color: #000000; margin-bottom: 1rem;">üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('SELECT financial_cushion_percent FROM settings WHERE user_id = ?', 
                      (st.session_state.user_id,))
        current_settings = cursor.fetchone()
        current_cushion = current_settings[0] if current_settings else 20.0
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("financial_settings"):
                st.markdown("#### üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞")
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–∏–±—ã–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
                
                cushion_percent = st.slider(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏:",
                    min_value=0.0,
                    max_value=50.0,
                    value=current_cushion,
                    step=0.5,
                    help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-25% –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
                )
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                analytics = get_analytics(st.session_state.user_id)
                if analytics['profit'] > 0:
                    projected_cushion = analytics['profit'] * (cushion_percent / 100)
                    projected_personal = analytics['profit'] - projected_cushion
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("üõ°Ô∏è –†–µ–∑–µ—Ä–≤ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å", f"${projected_cushion:.2f}")
                    with col2:
                        st.metric("üè† –ù–∞ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞–Ω–µ—Ç—Å—è", f"${projected_personal:.2f}")
                
                submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)
                
                if submitted:
                    cursor.execute('''
                        UPDATE settings 
                        SET financial_cushion_percent = ? 
                        WHERE user_id = ?
                    ''', (cushion_percent, st.session_state.user_id))
                    conn.commit()
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        st.markdown("""
        <div class="card">
            <h3 style="color: #000000; margin-bottom: 1rem;">üöö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            cursor.execute('SELECT airplane_price_per_kg, truck_price_per_kg FROM settings WHERE user_id = ?', 
                          (st.session_state.user_id,))
            delivery_settings = cursor.fetchone()
            current_airplane_price = delivery_settings[0] if delivery_settings and delivery_settings[0] else 5.0
            current_truck_price = delivery_settings[1] if delivery_settings and delivery_settings[1] else 2.0
        except (sqlite3.OperationalError, sqlite3.ProgrammingError):
            # –ü–æ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            current_airplane_price = 5.0
            current_truck_price = 2.0
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            try:
                cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
                cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
                conn.commit()
            except (sqlite3.OperationalError, sqlite3.ProgrammingError):
                pass
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("delivery_settings"):
                st.markdown("#### üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º")
                st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    airplane_price = st.number_input(
                        "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç ($/–∫–≥):",
                        min_value=0.01,
                        max_value=100.0,
                        value=float(current_airplane_price),
                        step=0.1,
                        help="–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º"
                    )
                
                with col2:
                    truck_price = st.number_input(
                        "üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å ($/–∫–≥):",
                        min_value=0.01,
                        max_value=100.0,
                        value=float(current_truck_price),
                        step=0.1,
                        help="–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º"
                    )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç", f"${airplane_price:.2f}/–∫–≥")
                with col2:
                    st.metric("üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å", f"${truck_price:.2f}/–∫–≥")
                with col3:
                    difference = airplane_price - truck_price
                    st.metric("–†–∞–∑–Ω–∏—Ü–∞", f"${abs(difference):.2f}/–∫–≥", 
                             f"{'–°–∞–º–æ–ª–µ—Ç –¥–æ—Ä–æ–∂–µ' if difference > 0 else '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ—Ä–æ–∂–µ'}")
                
                delivery_submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏", use_container_width=True)
                
                if delivery_submitted:
                    try:
                        cursor.execute('''
                            UPDATE settings 
                            SET airplane_price_per_kg = ?, truck_price_per_kg = ?
                            WHERE user_id = ?
                        ''', (airplane_price, truck_price, st.session_state.user_id))
                        conn.commit()
                        st.success("‚úÖ –¶–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                        st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
                        # –ü–æ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                        try:
                            cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
                            cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
                            conn.commit()
                            cursor.execute('''
                                UPDATE settings 
                                SET airplane_price_per_kg = ?, truck_price_per_kg = ?
                                WHERE user_id = ?
                            ''', (airplane_price, truck_price, st.session_state.user_id))
                            conn.commit()
                            st.success("‚úÖ –ü–æ–ª—è —Å–æ–∑–¥–∞–Ω—ã –∏ —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        conn.close()
    
    with tab2:
        st.markdown("""
        <div class="card">
            <h3 style="color: #000000; margin-bottom: 1rem;">üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT email_notifications, smtp_server, smtp_port, email_username, email_password,
                   notify_new_orders, notify_low_stock, notify_daily_report
            FROM settings WHERE user_id = ?
        ''', (st.session_state.user_id,))
        smtp_settings = cursor.fetchone()
        
        current_notifications = smtp_settings[0] if smtp_settings else False
        current_server = smtp_settings[1] if smtp_settings else "smtp.gmail.com"
        current_port = smtp_settings[2] if smtp_settings else 587
        current_username = smtp_settings[3] if smtp_settings else ""
        current_password = smtp_settings[4] if smtp_settings else ""
        current_notify_orders = smtp_settings[5] if smtp_settings and len(smtp_settings) > 5 else True
        current_notify_stock = smtp_settings[6] if smtp_settings and len(smtp_settings) > 6 else True
        current_notify_daily = smtp_settings[7] if smtp_settings and len(smtp_settings) > 7 else False
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("email_settings"):
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                email_server = current_server
                email_port = current_port
                email_username = current_username
                email_password = current_password
                provider = "Gmail"
                
                enable_notifications = st.checkbox(
                    "üîî –í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                    value=current_notifications,
                    help="–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –±–∏–∑–Ω–µ—Å–µ"
                )
                
                if enable_notifications:
                    st.markdown("#### üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP")
                    
                    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                    provider = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ email:",
                        ["Gmail", "–Ø–Ω–¥–µ–∫—Å", "Mail.ru", "Outlook", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"]
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    if provider == "Gmail":
                        default_server = "smtp.gmail.com"
                        default_port = 587
                        st.info("üí° –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞")
                        st.markdown("""
                        **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gmail:**
                        1. –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                        2. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TLS (–ø–æ—Ä—Ç 587) –∏–ª–∏ SSL (–ø–æ—Ä—Ç 465)
                        """)
                    elif provider == "–Ø–Ω–¥–µ–∫—Å":
                        default_server = "smtp.yandex.ru"
                        default_port = 587
                        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã")
                    elif provider == "Mail.ru":
                        default_server = "smtp.mail.ru"
                        default_port = 587
                        st.info("üí° –í–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    elif provider == "Outlook":
                        default_server = "smtp-mail.outlook.com"
                        default_port = 587
                        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å Microsoft –∞–∫–∫–∞—É–Ω—Ç–∞")
                    else:
                        default_server = current_server
                        default_port = current_port
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        email_server = st.text_input(
                            "SMTP —Å–µ—Ä–≤–µ—Ä:", 
                            value=default_server,
                            placeholder="smtp.gmail.com"
                        )
                    with col2:
                        port_options = {
                            "587 (TLS - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)": 587,
                            "465 (SSL)": 465,
                            "25 (–Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)": 25
                        }
                        port_display = st.selectbox(
                            "–ü–æ—Ä—Ç SMTP:",
                            options=list(port_options.keys()),
                            index=0 if default_port == 587 else (1 if default_port == 465 else 2)
                        )
                        email_port = port_options[port_display]
                    
                    email_username = st.text_input(
                        "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", 
                        value=current_username,
                        placeholder="your.email@gmail.com"
                    )
                    email_password = st.text_input(
                        "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", 
                        type="password",
                        value=current_password,
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    )
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    st.markdown("#### üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    notify_new_orders = st.checkbox("–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", value=current_notify_orders)
                    notify_low_stock = st.checkbox("–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ", value=current_notify_stock)
                    notify_daily_report = st.checkbox("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", value=current_notify_daily)
                
                col1, col2 = st.columns(2)
                with col1:
                    save_smtp = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)
                with col2:
                    test_smtp = st.form_submit_button("üìß –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", use_container_width=True)
                
                if save_smtp:
                    try:
                        cursor.execute('''
                            UPDATE settings 
                            SET email_notifications = ?, smtp_server = ?, smtp_port = ?, 
                                email_username = ?, email_password = ?, notify_new_orders = ?,
                                notify_low_stock = ?, notify_daily_report = ?
                            WHERE user_id = ?
                        ''', (enable_notifications, email_server if enable_notifications else "", 
                             email_port if enable_notifications else 587, 
                             email_username if enable_notifications else "", 
                             email_password if enable_notifications else "", 
                             notify_new_orders, notify_low_stock, notify_daily_report,
                             st.session_state.user_id))
                        conn.commit()
                        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                
                if test_smtp and enable_notifications:
                    try:
                        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        import smtplib
                        from email.mime.text import MIMEText
                        import ssl
                        
                        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        context = ssl.create_default_context()
                        
                        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞
                        if email_port == 465:
                            # SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            server = smtplib.SMTP_SSL(email_server, email_port, context=context)
                        else:
                            # TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            server = smtplib.SMTP(email_server, email_port)
                            server.starttls(context=context)
                        
                        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        server.set_debuglevel(0)
                        
                        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                        server.login(email_username, email_password)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        msg = MIMEText(f"""
–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞! üéâ

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
- –°–µ—Ä–≤–µ—Ä: {email_server}
- –ü–æ—Ä—Ç: {email_port}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email_username}
- –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º
                        """)
                        msg['Subject'] = f"‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä ({datetime.now().strftime('%H:%M')})"
                        msg['From'] = email_username
                        msg['To'] = email_username
                        
                        server.send_message(msg)
                        server.quit()
                        
                        st.success("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                        st.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email_username}")
                        
                    except smtplib.SMTPAuthenticationError as e:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                        if "Gmail" in provider:
                            st.warning("""
                            **–î–ª—è Gmail –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:**
                            1. ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                            2. ‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å!)
                            3. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email
                            
                            **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
                            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google –∞–∫–∫–∞—É–Ω—Ç–∞
                            2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                            3. –ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                            """)
                        else:
                            st.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è")
                        st.code(f"–û—à–∏–±–∫–∞: {str(e)}")
                    
                    except smtplib.SMTPConnectError as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç–∞")
                    
                    except smtplib.SMTPServerDisconnected as e:
                        st.error("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    except Exception as e:
                        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        conn.close()
    
    with tab3:
        st.markdown("""
        <div class="card">
            <h3 style="color: #000000; margin-bottom: 1rem;">üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown("#### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.write("–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
                all_data = export_all_data(st.session_state.user_id)
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
                    data=all_data,
                    file_name=f"business_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown("#### üì§ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.write("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", 
                type=['xlsx', 'csv'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel –∏ CSV"
            )
            
            if uploaded_file is not None:
                if st.button("üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                    try:
                        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("---")
        st.markdown("#### ‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞")
        
        with st.expander("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"):
            st.warning("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.")
            
            confirm_text = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨ –í–°–ï' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                placeholder="–£–î–ê–õ–ò–¢–¨ –í–°–ï"
            )
            
            if confirm_text == "–£–î–ê–õ–ò–¢–¨ –í–°–ï":
                if st.button("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", type="primary"):
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    st.error("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏")
                    # delete_all_user_data(st.session_state.user_id)
                    # st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
                    # st.session_state.user_id = None
                    # st.rerun()
    
    # –ü—Ä–µ–º–∏—É–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if st.session_state.is_admin:
        with tab5:
            show_premium_settings()
    else:
        with tab4:
            show_premium_settings()
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if st.session_state.is_admin:
        with tab4:
            st.markdown("""
            <div class="card">
                <h3 style="color: #000000; margin-bottom: 1rem;">üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
            </div>
            """, unsafe_allow_html=True)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            show_admin_panel()
        
        conn.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def export_to_excel(df, sheet_name):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)
    output.seek(0)
    return output.getvalue()

def export_all_data(user_id):
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders_query = '''
        SELECT o.*, GROUP_CONCAT(oi.product_name || " (x" || oi.quantity || ")") as items
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        GROUP BY o.id
    '''
    orders_df = pd.read_sql_query(orders_query, conn, params=(user_id,))
    
    inventory_df = pd.read_sql_query('SELECT * FROM inventory WHERE user_id = ?', 
                                   conn, params=(user_id,))
    
    analytics = get_analytics(user_id)
    analytics_df = pd.DataFrame([analytics])
    
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        orders_df.to_excel(writer, sheet_name='Orders', index=False)
        inventory_df.to_excel(writer, sheet_name='Inventory', index=False)
        analytics_df.to_excel(writer, sheet_name='Analytics', index=False)
    
    output.seek(0)
    return output.getvalue()

def generate_full_report(user_id):
    conn = sqlite3.connect('business_manager.db')
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
    report_query = '''
        SELECT 
            o.order_name,
            o.order_type,
            o.created_at,
            oi.product_name,
            oi.quantity,
            oi.cost_price,
            oi.weight,
            oi.delivery_cost,
            oi.total_cost,
            (oi.total_cost - oi.cost_price - oi.delivery_cost) as profit
        FROM orders o
        JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        ORDER BY o.created_at DESC
    '''
    
    report_df = pd.read_sql_query(report_query, conn, params=(user_id,))
    conn.close()
    
    return report_df

def send_daily_report(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ email"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
        cursor.execute('''
            SELECT email_notifications, smtp_server, smtp_port, email_username, 
                   email_password, notify_daily_report
            FROM settings WHERE user_id = ?
        ''', (user_id,))
        settings = cursor.fetchone()
        
        if not settings or not settings[0] or not settings[5]:  # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT email FROM users WHERE id = ?', (user_id,))
        user_email = cursor.fetchone()[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        report_query = f'''
            SELECT 
                o.order_name,
                oi.product_name,
                oi.quantity,
                oi.total_cost,
                oi.cost_price,
                (oi.total_cost - oi.cost_price) as profit,
                o.status,
                o.order_date
            FROM order_items oi
            JOIN orders o ON oi.order_id = o.id
            WHERE o.user_id = ? AND DATE(o.order_date) = ?
            ORDER BY o.order_date DESC
        '''
        
        cursor.execute(report_query, (user_id, today))
        orders_today = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        if orders_today:
            html_content = f"""
            <html>
            <body>
                <h2>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}</h2>
                <p>–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–æ—Ç –≤–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</p>
                
                <h3>üì¶ –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(orders_today)} –ø–æ–∑–∏—Ü–∏–π):</h3>
                <table border="1" style="border-collapse: collapse; width: 100%;">
                    <tr style="background-color: #f2f2f2;">
                        <th>–ó–∞–∫–∞–∑</th>
                        <th>–¢–æ–≤–∞—Ä</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                        <th>–í—ã—Ä—É—á–∫–∞</th>
                        <th>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</th>
                        <th>–ü—Ä–∏–±—ã–ª—å</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
            """
            
            total_revenue = 0
            total_cost = 0
            
            for order in orders_today:
                order_name, product_name, quantity, total_cost_item, cost_price, profit, status, order_date = order
                total_revenue += total_cost_item or 0
                total_cost += cost_price or 0
                
                html_content += f"""
                    <tr>
                        <td>{order_name}</td>
                        <td>{product_name}</td>
                        <td>{quantity}</td>
                        <td>${total_cost_item:.2f}</td>
                        <td>${cost_price:.2f}</td>
                        <td>${profit:.2f}</td>
                        <td>{status}</td>
                    </tr>
                """
            
            total_profit = total_revenue - total_cost
            html_content += f"""
                </table>
                
                <h3>üí∞ –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</h3>
                <ul>
                    <li><strong>–í—ã—Ä—É—á–∫–∞:</strong> ${total_revenue:.2f}</li>
                    <li><strong>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${total_cost:.2f}</li>
                    <li><strong>–ü—Ä–∏–±—ã–ª—å:</strong> ${total_profit:.2f}</li>
                </ul>
                
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</p>
            </body>
            </html>
            """
        else:
            html_content = f"""
            <html>
            <body>
                <h2>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}</h2>
                <p>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</p>
                <p>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±—ã–ª–æ.</p>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</p>
            </body>
            </html>
            """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        import ssl
        
        msg = MIMEMultipart()
        msg['From'] = settings[3]  # email_username
        msg['To'] = user_email
        msg['Subject'] = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}"
        
        msg.attach(MIMEText(html_content, 'html'))
        
        context = ssl.create_default_context()
        with smtplib.SMTP(settings[1], settings[2]) as server:  # smtp_server, smtp_port
            server.starttls(context=context)
            server.login(settings[3], settings[4])  # username, password
            server.send_message(msg)
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return False

if __name__ == "__main__":
    main()
