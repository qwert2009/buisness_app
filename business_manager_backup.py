import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
import io
import base64
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏
try:
    from ai_functions import business_ai
except ImportError:
    business_ai = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç-–±–æ—Ç–∞
try:
    from chatbot import business_chatbot
except ImportError:
    business_chatbot = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from smart_notifications import smart_notifications
except ImportError:
    smart_notifications = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω
st.markdown("""
<style>
    /* –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap');
    
    /* –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif !important;
        box-sizing: border-box;
    }
    
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω - —á–∏—Å—Ç—ã–π –±–µ–ª—ã–π */
    .main, .block-container, .stApp, .stMain {
        background: #ffffff !important;
        color: #2c2c2c !important;
        line-height: 1.6;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ - —Å—Ç—Ä–æ–≥–∏–µ –∏ —á–µ—Ç–∫–∏–µ */
    h1, h2, h3, h4, h5, h6 {
        color: #1a1a1a !important;
        background: transparent !important;
        font-weight: 600 !important;
        letter-spacing: -0.01em !important;
        margin: 0 0 1.5rem 0 !important;
        line-height: 1.2 !important;
    }
    
    h1 { font-size: 2rem !important; }
    h2 { font-size: 1.5rem !important; }
    h3 { font-size: 1.25rem !important; }
    
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç */
    p, div, span, li, td, th, label, .stMarkdown, .stText {
        color: #2c2c2c !important;
        background: transparent !important;
        font-weight: 400 !important;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
    .stButton > button {
        background: #f8f9fa !important;
        color: #2c2c2c !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
        font-size: 0.875rem !important;
        transition: all 0.15s ease !important;
        box-shadow: none !important;
    }
    
    .stButton > button:hover {
        background: #e9ecef !important;
        color: #1a1a1a !important;
        border-color: #adb5bd !important;
        transform: none !important;
        box-shadow: none !important;
    }
    
    /* Primary –∫–Ω–æ–ø–∫–∏ */
    .stButton > button[kind="primary"] {
        background: #2c2c2c !important;
        color: #ffffff !important;
        border: 1px solid #2c2c2c !important;
    }
    
    .stButton > button[kind="primary"]:hover {
        background: #1a1a1a !important;
        color: #ffffff !important;
        border-color: #1a1a1a !important;
    }
    
    /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput > div > div > input,
    .stNumberInput > div > div > input,
    .stTextArea > div > div > textarea,
    .stDateInput > div > div > input {
        background: #ffffff !important;
        color: #2c2c2c !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 0.5rem !important;
        font-size: 0.875rem !important;
        font-weight: 400 !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stNumberInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus,
    .stDateInput > div > div > input:focus {
        border-color: #2c2c2c !important;
        box-shadow: 0 0 0 2px rgba(44, 44, 44, 0.1) !important;
        outline: none !important;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
    .stSelectbox > div > div {
        background: #ffffff !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        color: #2c2c2c !important;
    }
    
    .stSelectbox > div > div > div {
        color: #2c2c2c !important;
        background: #ffffff !important;
    }
    
    /* –ú–µ—Ç–∫–∏ –ø–æ–ª–µ–π */
    .stTextInput > label,
    .stSelectbox > label,
    .stTextArea > label,
    .stNumberInput > label,
    .stDateInput > label {
        color: #2c2c2c !important;
        font-weight: 500 !important;
        font-size: 0.875rem !important;
        margin-bottom: 0.25rem !important;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .stDataFrame, .stTable {
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
    }
    
    .stDataFrame table {
        background: #ffffff !important;
        color: #2c2c2c !important;
        border-collapse: collapse !important;
    }
    
    .stDataFrame th {
        background: #f8f9fa !important;
        color: #1a1a1a !important;
        font-weight: 600 !important;
        padding: 0.75rem !important;
        border-bottom: 1px solid #dee2e6 !important;
    }
    
    .stDataFrame td {
        padding: 0.75rem !important;
        border-bottom: 1px solid #f8f9fa !important;
        color: #2c2c2c !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .stMetric {
        background: #ffffff !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 1rem !important;
    }
    
    .stMetric [data-testid="metric-container"] {
        background: transparent !important;
    }
    
    .stMetric [data-testid="metric-container"] > div {
        color: #2c2c2c !important;
        font-weight: 600 !important;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
    .element-container, .stContainer {
        background: transparent !important;
    }
    
    /* –ù–∞–≤–∏–≥–∞—Ü–∏—è */
    .nav-item {
        background: #ffffff !important;
        color: #2c2c2c !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 0.75rem !important;
        text-align: center !important;
        margin-bottom: 0.5rem !important;
        transition: all 0.15s ease !important;
    }
    
    .nav-item:hover {
        background: #f8f9fa !important;
        border-color: #adb5bd !important;
    }
    
    .nav-item.active {
        background: #2c2c2c !important;
        color: #ffffff !important;
        border-color: #2c2c2c !important;
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .stSidebar {
        background: #f8f9fa !important;
        border-right: 1px solid #dee2e6 !important;
    }
    
    .stSidebar .stButton > button {
        width: 100% !important;
        text-align: left !important;
        justify-content: flex-start !important;
    }
    
    /* –ê–ª–µ—Ä—Ç—ã */
    .stAlert {
        border-radius: 4px !important;
        border: 1px solid !important;
        font-weight: 400 !important;
    }
    
    .stSuccess {
        background: #f8f9fa !important;
        color: #2c2c2c !important;
        border-color: #28a745 !important;
    }
    
    .stError {
        background: #f8f9fa !important;
        color: #2c2c2c !important;
        border-color: #dc3545 !important;
    }
    
    .stWarning {
        background: #f8f9fa !important;
        color: #2c2c2c !important;
        border-color: #ffc107 !important;
    }
    
    .stInfo {
        background: #f8f9fa !important;
        color: #2c2c2c !important;
        border-color: #17a2b8 !important;
    }
    
    /* –§–æ—Ä–º—ã */
    .stForm {
        background: #ffffff !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 1.5rem !important;
    }
    
    /* –¢–∞–±—ã */
    .stTabs [data-baseweb="tab-list"] {
        background: transparent !important;
        border-bottom: 1px solid #dee2e6 !important;
        gap: 0 !important;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent !important;
        color: #6c757d !important;
        border: none !important;
        border-bottom: 2px solid transparent !important;
        padding: 0.75rem 1rem !important;
        font-weight: 500 !important;
    }
    
    .stTabs [aria-selected="true"] {
        background: transparent !important;
        color: #2c2c2c !important;
        border-bottom-color: #2c2c2c !important;
    }
    
    /* –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    .stDeployButton { display: none !important; }
    .stDecoration { display: none !important; }
    #MainMenu { visibility: hidden !important; }
    footer { visibility: hidden !important; }
    header { visibility: hidden !important; }
    .stToolbar { display: none !important; }
    .viewerBadge_container__1QSob { display: none !important; }
    
    /* –û—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
    .block-container {
        padding-top: 2rem !important;
        padding-bottom: 2rem !important;
        max-width: 1200px !important;
    }
    
    /* –ö–æ–ª–æ–Ω–∫–∏ */
    .row-widget {
        gap: 1rem !important;
    }
    
    /* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .metric-card {
        background: #ffffff !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 4px !important;
        padding: 1.5rem !important;
        text-align: center !important;
    }
    
    .metric-value {
        font-size: 2rem !important;
        font-weight: 600 !important;
        color: #1a1a1a !important;
        margin-bottom: 0.25rem !important;
    }
    
    .metric-label {
        font-size: 0.875rem !important;
        color: #6c757d !important;
        font-weight: 500 !important;
        text-transform: uppercase !important;
        letter-spacing: 0.05em !important;
    }
</style>
""", unsafe_allow_html=True)
        color: #ffffff !important;
        border-color: #888888 !important;
    }
    
    /* Primary –∫–Ω–æ–ø–∫–∏ - —Å–∏–Ω–∏–µ —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º */
    .stButton[data-baseweb="button"][kind="primary"] > button,
    .stButton > button[kind="primary"] {
        background: #0066cc !important;
        color: #ffffff !important;
        border: none !important;
    }
    
    .stButton[data-baseweb="button"][kind="primary"] > button:hover,
    .stButton > button[kind="primary"]:hover {
        background: #0052a3 !important;
        color: #ffffff !important;
    }
    
    /* –§–æ—Ä–º—ã –∏ –≤–≤–æ–¥ - —Ç–µ–º–Ω—ã–µ —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º */
    .stTextInput > div > div > input {
        color: #ffffff !important;
        background-color: #2d2d2d !important;
        border: 1px solid #666666 !important;
        border-radius: 6px !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #0066cc !important;
        background-color: #2d2d2d !important;
        color: #ffffff !important;
    }
    
    .stSelectbox > div > div > div {
        color: #ffffff !important;
        background-color: #2d2d2d !important;
        border: 1px solid #666666 !important;
        border-radius: 6px !important;
    }
    
    .stTextArea > div > div > textarea {
        color: #ffffff !important;
        background-color: #2d2d2d !important;
        border: 1px solid #666666 !important;
        border-radius: 6px !important;
    }
    
    .stNumberInput > div > div > input {
        color: #ffffff !important;
        background-color: #2d2d2d !important;
        border: 1px solid #666666 !important;
        border-radius: 6px !important;
    }
    
    .stDateInput > div > div > input {
        color: #ffffff !important;
        background-color: #2d2d2d !important;
        border: 1px solid #666666 !important;
        border-radius: 6px !important;
    }
    
    /* –ú–µ—Ç–∫–∏ –ø–æ–ª–µ–π - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
    .stTextInput > label, .stSelectbox > label, .stTextArea > label, 
    .stNumberInput > label, .stDateInput > label, .stTimeInput > label {
        color: #ffffff !important;
        background: transparent !important;
        font-weight: 500;
    }
    
    /* –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    :root {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --bg-tertiary: #404040;
        --text-primary: #ffffff;
        --text-secondary: #cccccc;
        --text-muted: #999999;
        --accent-blue: #0066cc;
        --accent-green: #28a745;
        --accent-red: #dc3545;
        --accent-orange: #fd7e14;
        --border-light: #666666;
        --border-medium: #888888;
        --shadow-subtle: 0 1px 3px rgba(0,0,0,0.3);
        --shadow-medium: 0 2px 8px rgba(0,0,0,0.5);
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    .main {
        background: var(--bg-primary) !important;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        color: var(--text-primary) !important;
        line-height: 1.5;
    }
    
    /* –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –±–µ–ª—ã–µ */
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-primary) !important;
        background: transparent !important;
        font-weight: 600;
        letter-spacing: -0.025em;
        margin: 0 0 1rem 0;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ - —Ç–µ–º–Ω—ã–µ */
    .card {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: var(--shadow-subtle);
        transition: box-shadow 0.2s ease;
    }
    
    .card:hover {
        box-shadow: var(--shadow-medium);
    }
    
    /* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —Ç–µ–º–Ω–∞—è */
    .modern-nav {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 2rem;
    }
    
    .nav-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 0.75rem;
    }
    
    .nav-item {
        background: var(--bg-tertiary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light);
        border-radius: 6px;
        padding: 0.75rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
    }
    
    .nav-item:hover {
        border-color: var(--accent-blue);
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        transform: translateY(-1px);
    }
    
    .nav-item.active {
        background: var(--accent-blue) !important;
        color: #ffffff !important;
        border-color: var(--accent-blue);
    }
    
    .nav-icon {
        font-size: 1.25rem;
        margin-bottom: 0.25rem;
        display: block;
    }
    
    .nav-text {
        font-size: 0.875rem;
        font-weight: 500;
        color: inherit;
    }
    
    /* –í—Å–µ –∫–Ω–æ–ø–∫–∏ - —Ç–µ–º–Ω—ã–µ —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º */
    .stButton > button {
        background: var(--bg-tertiary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light) !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
        box-shadow: var(--shadow-subtle) !important;
    }
    
    .stButton > button:hover {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border-color: var(--border-medium) !important;
        transform: translateY(-1px) !important;
        box-shadow: var(--shadow-medium) !important;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–æ–º primary - —Å–∏–Ω–∏–µ */
    .stButton[data-baseweb="button"][kind="primary"] > button,
    .stButton > button[kind="primary"] {
        background: var(--accent-blue) !important;
        color: #ffffff !important;
        border: none !important;
    }
    
    .stButton[data-baseweb="button"][kind="primary"] > button:hover,
    .stButton > button[kind="primary"]:hover {
        background: #0052a3 !important;
        color: #ffffff !important;
    }
    
    /* –í—Å–µ —Ñ–æ—Ä–º—ã –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ - —Ç–µ–º–Ω—ã–µ */
    .stTextInput > div > div > input {
        border: 1px solid var(--border-light) !important;
        border-radius: 6px !important;
        padding: 0.5rem !important;
        font-size: 0.875rem !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--accent-blue) !important;
        box-shadow: 0 0 0 2px rgba(0,102,204,0.3) !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
    }
    
    .stSelectbox > div > div > div {
        border: 1px solid var(--border-light) !important;
        border-radius: 6px !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
    }
    
    .stTextArea > div > div > textarea {
        border: 1px solid var(--border-light) !important;
        border-radius: 6px !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        padding: 0.5rem !important;
    }
    
    .stNumberInput > div > div > input {
        border: 1px solid var(--border-light) !important;
        border-radius: 6px !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        padding: 0.5rem !important;
    }
    
    /* –ú–µ—Ç–∫–∏ –ø–æ–ª–µ–π - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
    .stTextInput > label, .stSelectbox > label, .stTextArea > label, 
    .stNumberInput > label, .stDateInput > label, .stTimeInput > label {
        color: var(--text-primary) !important;
        background: transparent !important;
        font-weight: 500;
    }
    
    /* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —Ç–µ–º–Ω—ã–µ */
    .stat-card {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: var(--shadow-subtle);
    }
    
    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary) !important;
        background: transparent !important;
        margin-bottom: 0.25rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: var(--text-secondary) !important;
        background: transparent !important;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: 500;
    }
    
    /* –°—Ç–∞—Ç—É—Å—ã */
    .status-success { 
        color: var(--accent-green) !important; 
        background: transparent !important;
    }
    .status-warning { 
        color: var(--accent-orange) !important; 
        background: transparent !important;
    }
    .status-danger { 
        color: var(--accent-red) !important; 
        background: transparent !important;
    }
    
    /* –ó–∞–∫–∞–∑—ã - —Ç–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .order-card {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: var(--shadow-subtle);
        transition: all 0.2s ease;
    }
    
    /* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .stat-card {
        background: #ffffff !important;
        color: #000000 !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: var(--shadow-subtle);
    }
    
    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #000000 !important;
        background: #ffffff !important;
        margin-bottom: 0.25rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: #333333 !important;
        background: #ffffff !important;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: 500;
    }
    
    /* –°—Ç–∞—Ç—É—Å—ã */
    .status-success { 
        color: var(--accent-green) !important; 
        background: #ffffff !important;
    }
    .status-warning { 
        color: var(--accent-orange) !important; 
        background: #ffffff !important;
    }
    .status-danger { 
        color: var(--accent-red) !important; 
        background: #ffffff !important;
    }
    
    /* –ó–∞–∫–∞–∑—ã */
    .order-card {
        background: #ffffff !important;
        color: #000000 !important;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: var(--shadow-subtle);
        transition: all 0.2s ease;
    }
    
    .order-card:hover {
        box-shadow: var(--shadow-medium);
        border-color: var(--border-medium);
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }
    
    .order-title {
        color: var(--accent-blue);
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0;
        cursor: pointer;
        text-decoration: none;
    }
    
    .order-title:hover {
        text-decoration: underline;
    }
    
    .order-meta {
        color: var(--text-muted);
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }
    
    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .status-pending {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    
    .status-delivered {
        background: #d1e7dd;
        color: #0f5132;
        border: 1px solid #badbcc;
    }
    
    .status-delayed {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c2c7;
    }
    
    /* –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ */
    .order-details {
        background: var(--bg-secondary);
        border-radius: 6px;
        padding: 1rem;
        margin-top: 1rem;
        border: 1px solid var(--border-light);
    }
    
    .detail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .detail-item {
        text-align: center;
    }
    
    .detail-value {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
    }
    
    .detail-label {
        font-size: 0.75rem;
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-top: 0.25rem;
    }
    
    /* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º */
    .order-actions {
        border-top: 1px solid var(--border-light);
        padding-top: 1rem;
        margin-top: 1rem;
    }
    
    /* –°–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    .stDeployButton {display: none !important;}
    .stDecoration {display: none !important;}
    #MainMenu {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    header {visibility: hidden !important;}
    .stToolbar {display: none !important;}
    .viewerBadge_container__1QSob {display: none !important;}
    .styles_viewerBadge__1yB5_ {display: none !important;}
    #stDecoration {display: none !important;}
    .reportview-container .main .block-container {
        padding-top: 1rem;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ */
    .stButton > button, .stSelectbox, .stTextInput, 
    .stMarkdown, .stMetric, h1, h2, h3, h4, h5, h6 {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", "Twitter Color Emoji", "EmojiOne Color", system-ui, sans-serif !important;
    }
    
    /* –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏ */
    .stButton > button {
        font-variant-emoji: emoji !important;
        text-rendering: optimizeSpeed !important;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .nav-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .detail-grid {
            grid-template-columns: 1fr;
        }
        
        .order-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

def show_modern_navigation():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è"""
    
    st.markdown("""
    <div class="modern-nav">
        <div class="nav-grid">
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'dashboard'}, '*');">
                <span class="nav-icon">üìä</span>
                <div class="nav-text">–ü–∞–Ω–µ–ª—å</div>
            </div>
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'orders'}, '*');">
                <span class="nav-icon">üì¶</span>
                <div class="nav-text">–ó–∞–∫–∞–∑—ã</div>
            </div>
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'analytics'}, '*');">
                <span class="nav-icon">üìà</span>
                <div class="nav-text">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
            </div>
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'inventory'}, '*');">
                <span class="nav-icon">üè™</span>
                <div class="nav-text">–°–∫–ª–∞–¥</div>
            </div>
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'smart'}, '*');">
                <span class="nav-icon">üß†</span>
                <div class="nav-text">–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏</div>
            </div>
            <div class="nav-item" onclick="window.parent.postMessage({type: 'streamlit:setComponentValue', value: 'settings'}, '*');">
                <span class="nav-icon">‚öôÔ∏è</span>
                <div class="nav-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col1:
        if st.button("üìä –ü–∞–Ω–µ–ª—å", use_container_width=True, 
                    type="primary" if st.session_state.current_page == "dashboard" else "secondary"):
            st.session_state.current_page = "dashboard"
            st.rerun()
    
    with col2:
        if st.button("üì¶ –ó–∞–∫–∞–∑—ã", use_container_width=True,
                    type="primary" if st.session_state.current_page == "orders" else "secondary"):
            st.session_state.current_page = "orders"
            st.rerun()
    
    with col3:
        if st.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", use_container_width=True,
                    type="primary" if st.session_state.current_page == "analytics" else "secondary"):
            st.session_state.current_page = "analytics"
            st.rerun()
    
    with col4:
        if st.button("üè™ –°–∫–ª–∞–¥", use_container_width=True,
                    type="primary" if st.session_state.current_page == "inventory" else "secondary"):
            st.session_state.current_page = "inventory"
            st.rerun()
    
    with col5:
        if st.button("üß† –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏", use_container_width=True,
                    type="primary" if st.session_state.current_page == "smart" else "secondary"):
            st.session_state.current_page = "smart"
            st.rerun()
    
    with col6:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                    type="primary" if st.session_state.current_page == "settings" else "secondary"):
            st.session_state.current_page = "settings"
            st.rerun()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_type TEXT NOT NULL,
            order_name TEXT NOT NULL,
            total_payment REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            delivery_type TEXT,
            notification_sent INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL DEFAULT 0,
            weight REAL NOT NULL,
            delivery_cost REAL,
            total_cost REAL,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sale_price –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN sale_price REAL DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É delivery_type –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN item_delivery_type TEXT DEFAULT "truck"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN status TEXT DEFAULT "pending"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN expected_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN actual_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN delay_notification_sent INTEGER DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            link TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            financial_cushion_percent REAL DEFAULT 20.0,
            email_notifications BOOLEAN DEFAULT 1,
            smtp_server TEXT,
            smtp_port INTEGER DEFAULT 587,
            email_username TEXT,
            email_password TEXT,
            notify_new_orders BOOLEAN DEFAULT 1,
            notify_low_stock BOOLEAN DEFAULT 1,
            notify_daily_report BOOLEAN DEFAULT 0,
            airplane_rate REAL DEFAULT 7.0,
            truck_rate REAL DEFAULT 0.68,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_new_orders BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_low_stock BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_daily_report BOOLEAN DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN airplane_rate REAL DEFAULT 7.0")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN truck_rate REAL DEFAULT 0.68")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(email, password):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    try:
        password_hash = hash_password(password)
        cursor.execute('INSERT INTO users (email, password_hash) VALUES (?, ?)', 
                      (email, password_hash))
        conn.commit()
        user_id = cursor.lastrowid
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('INSERT INTO settings (user_id) VALUES (?)', (user_id,))
        conn.commit()
        return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
    except sqlite3.IntegrityError:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    finally:
        conn.close()

def login_user(email, password):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    password_hash = hash_password(password)
    cursor.execute('SELECT id FROM users WHERE email = ? AND password_hash = ?', 
                  (email, password_hash))
    user = cursor.fetchone()
    conn.close()
    return user[0] if user else None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_DELIVERY_RATES = {
    'airplane': 7.0,
    'truck': 0.68
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
def get_delivery_rates(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT airplane_rate, truck_rate FROM settings WHERE user_id = ?
    ''', (user_id,))
    
    rates = cursor.fetchone()
    conn.close()
    
    if rates and rates[0] is not None and rates[1] is not None:
        return {
            'airplane': rates[0],
            'truck': rates[1]
        }
    else:
        return DEFAULT_DELIVERY_RATES

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
def add_single_order(user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type, order_date=None, expected_delivery_date=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_rates = get_delivery_rates(user_id)
    delivery_cost = weight * delivery_rates[delivery_type]
    total_cost = sale_price * quantity + delivery_cost
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if order_date is None:
        order_date = datetime.now().date()
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—ë
    if expected_delivery_date is None:
        delivery_days = 7 if delivery_type == "airplane" else 14
        expected_delivery_date = order_date + timedelta(days=delivery_days)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    cursor.execute('''
        INSERT INTO orders (user_id, order_type, order_name, delivery_type, status, created_at, expected_delivery_date) 
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, 'single', product_name, delivery_type, 'pending', order_date, expected_delivery_date))
    
    order_id = cursor.lastrowid
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    cursor.execute('''
        INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, delivery_type))
    
    conn.commit()
    conn.close()
    return order_id

def delete_order(order_id, user_id):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç–æ–≤–∞—Ä—ã"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('SELECT id FROM orders WHERE id = ? AND user_id = ?', (order_id, user_id))
    order = cursor.fetchone()
    
    if not order:
        conn.close()
        return False
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    cursor.execute('DELETE FROM order_items WHERE order_id = ?', (order_id,))
    
    # –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
    cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
    
    conn.commit()
    conn.close()
    return True

def add_complex_order(user_id, order_name, total_payment, items):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_rates = get_delivery_rates(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (2 –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
    from datetime import datetime, timedelta
    today = datetime.now()
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    days_ahead = 0 - today.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –ø–æ–∑–∂–µ
        days_ahead += 7
    next_monday = today + timedelta(days=days_ahead)
    expected_delivery = next_monday + timedelta(weeks=2)  # +2 –Ω–µ–¥–µ–ª–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    cursor.execute('''
        INSERT INTO orders (user_id, order_type, order_name, total_payment, status, expected_delivery_date) 
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, 'complex', order_name, total_payment, 'pending', expected_delivery))
    
    order_id = cursor.lastrowid
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    total_cost_price = sum(item['cost_price'] * item['quantity'] for item in items)
    total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in items)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–º–∏–Ω—É—Å –¥–æ—Å—Ç–∞–≤–∫–∞)
    remaining_payment = total_payment - total_delivery_cost
    
    for item in items:
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        item_total_cost_price = item['cost_price'] * item['quantity']
        item_share = item_total_cost_price / total_cost_price if total_cost_price > 0 else 1 / len(items)
        item_payment = remaining_payment * item_share
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –µ–≥–æ —Ç–∏–ø–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        item_delivery_cost = item['weight'] * delivery_rates[item['delivery_type']]
        item_total_cost = item_payment + item_delivery_cost
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        effective_sale_price = item_payment / item['quantity'] if item['quantity'] > 0 else 0
        
        cursor.execute('''
            INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (order_id, item['product_name'], item['quantity'], item['cost_price'], 
              effective_sale_price, item['weight'], item_delivery_cost, item_total_cost, item['delivery_type']))
    
    conn.commit()
    conn.close()
    return order_id

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
def update_order_status(order_id, user_id, new_status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('SELECT id FROM orders WHERE id = ? AND user_id = ?', (order_id, user_id))
    order = cursor.fetchone()
    
    if not order:
        conn.close()
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if new_status == 'delivered':
        from datetime import datetime
        cursor.execute('''
            UPDATE orders 
            SET status = ?, actual_delivery_date = ? 
            WHERE id = ?
        ''', (new_status, datetime.now(), order_id))
    else:
        cursor.execute('UPDATE orders SET status = ? WHERE id = ?', (new_status, order_id))
    
    conn.commit()
    conn.close()
    return True

def get_order_details(order_id, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cursor.execute('''
        SELECT o.id, o.order_name, o.order_type, o.total_payment, o.delivery_type, 
               o.status, o.created_at, o.expected_delivery_date
        FROM orders o
        WHERE o.id = ? AND o.user_id = ?
    ''', (order_id, user_id))
    
    order_info = cursor.fetchone()
    if not order_info:
        conn.close()
        return None, None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    cursor.execute('''
        SELECT oi.id, oi.product_name, oi.quantity, oi.cost_price, oi.sale_price, 
               oi.weight, oi.item_delivery_type
        FROM order_items oi
        WHERE oi.order_id = ?
    ''', (order_id,))
    
    order_items = cursor.fetchall()
    conn.close()
    
    return order_info, order_items

def update_single_order(order_id, user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_rates = get_delivery_rates(user_id)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = weight * delivery_rates[delivery_type]
        total_cost = sale_price * quantity + delivery_cost
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute('''
            UPDATE orders 
            SET order_name = ?, delivery_type = ?
            WHERE id = ? AND user_id = ?
        ''', (product_name, delivery_type, order_id, user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
        cursor.execute('''
            UPDATE order_items 
            SET product_name = ?, quantity = ?, cost_price = ?, sale_price = ?, 
                weight = ?, item_delivery_type = ?, delivery_cost = ?, total_cost = ?
            WHERE order_id = ?
        ''', (product_name, quantity, cost_price, sale_price, weight, delivery_type, 
              delivery_cost, total_cost, order_id))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        conn.close()
        return False

def update_complex_order(order_id, user_id, order_name, total_payment, items):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute('''
            UPDATE orders 
            SET order_name = ?, total_payment = ?
            WHERE id = ? AND user_id = ?
        ''', (order_name, total_payment, order_id, user_id))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute('DELETE FROM order_items WHERE order_id = ?', (order_id,))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_rates = get_delivery_rates(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        total_cost_price = sum(item['cost_price'] * item['quantity'] for item in items)
        total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in items)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–º–∏–Ω—É—Å –¥–æ—Å—Ç–∞–≤–∫–∞)
        remaining_payment = total_payment - total_delivery_cost
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for item in items:
            item_total_cost_price = item['cost_price'] * item['quantity']
            item_share = item_total_cost_price / total_cost_price if total_cost_price > 0 else 1 / len(items)
            item_payment = remaining_payment * item_share
            
            item_delivery_cost = item['weight'] * delivery_rates[item['delivery_type']]
            item_total_cost = item_payment + item_delivery_cost
            
            effective_sale_price = item_payment / item['quantity'] if item['quantity'] > 0 else 0
            
            cursor.execute('''
                INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (order_id, item['product_name'], item['quantity'], item['cost_price'], 
                  effective_sale_price, item['weight'], item_delivery_cost, item_total_cost, item['delivery_type']))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        conn.close()
        return False

def show_edit_order_form(order_id, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_info, order_items = get_order_details(order_id, user_id)
    
    if not order_info:
        st.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    order_type = order_info[2]
    
    st.markdown(f"""
    <div style="
        background: var(--bg-secondary);
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        border: 1px solid var(--border-light);
    ">
        <h3 style="color: var(--accent-blue); text-align: center; margin-bottom: 20px;">
            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    if order_type == "single":
        show_edit_single_order_form(order_id, user_id, order_info, order_items[0] if order_items else None)
    else:
        show_edit_complex_order_form(order_id, user_id, order_info, order_items)

def show_edit_single_order_form(order_id, user_id, order_info, order_item):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    if not order_item:
        st.error("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    with st.form(f"edit_single_order_{order_id}"):
        st.subheader("üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            product_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *", 
                value=order_item[1],
                help="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            )
            quantity = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", 
                min_value=1, 
                value=int(order_item[2])
            )
            cost_price = st.number_input(
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[3])
            )
            sale_price = st.number_input(
                "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[4])
            )
        
        with col2:
            weight = st.number_input(
                "–í–µ—Å (–∫–≥) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_item[5])
            )
            delivery_type = st.selectbox(
                "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ *",
                options=["airplane", "truck"],
                format_func=lambda x: "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "üöõ –ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                index=0 if order_item[6] == "airplane" else 1
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            if weight > 0:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_rates = get_delivery_rates(user_id)
                delivery_cost = weight * delivery_rates[delivery_type]
                total_cost = sale_price * quantity + delivery_cost
                profit = (sale_price - cost_price) * quantity
                
                st.info(f"""
                **üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**
                - –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery_cost:.2f}
                - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.2f}
                - –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}
                """)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            save_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        with col2:
            if st.form_submit_button("üö´ –û—Ç–º–µ–Ω–∞", use_container_width=True):
                st.session_state[f'edit_mode_{order_id}'] = False
                st.rerun()
        
        with col3:
            preview_btn = st.form_submit_button("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", use_container_width=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if save_btn:
            if product_name and quantity > 0 and cost_price >= 0 and sale_price >= 0 and weight > 0:
                if update_single_order(order_id, user_id, product_name, quantity, cost_price, sale_price, weight, delivery_type):
                    st.success("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    st.session_state[f'edit_mode_{order_id}'] = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if preview_btn and product_name and quantity > 0 and weight > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_rates = get_delivery_rates(user_id)
            delivery_cost = weight * delivery_rates[delivery_type]
            total_cost = sale_price * quantity + delivery_cost
            profit = (sale_price - cost_price) * quantity
            
            st.markdown("""
            ### üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                **üì¶ –¢–æ–≤–∞—Ä:** {product_name}  
                **üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity} —à—Ç.  
                **üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${cost_price:.2f}  
                **üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:** ${sale_price:.2f}
                """)
            
            with col2:
                st.markdown(f"""
                **‚öñÔ∏è –í–µ—Å:** {weight} –∫–≥  
                **üöö –î–æ—Å—Ç–∞–≤–∫–∞:** {'‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç' if delivery_type == 'airplane' else 'üöõ –ú–∞—à–∏–Ω–∞'}  
                **üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:** ${delivery_cost:.2f}
                """)
            
            with col3:
                profit_color = "green" if profit > 0 else "red"
                st.markdown(f"""
                **üí≤ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${total_cost:.2f}  
                **üìà –ü—Ä–∏–±—ã–ª—å:** <span style="color: {profit_color}">${profit:.2f}</span>  
                **üìä –ú–∞—Ä–∂–∞:** {(profit / (sale_price * quantity) * 100) if sale_price * quantity > 0 else 0:.1f}%
                """, unsafe_allow_html=True)

def show_edit_complex_order_form(order_id, user_id, order_info, order_items):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    edit_items_key = f'edit_complex_items_{order_id}'
    if edit_items_key not in st.session_state:
        st.session_state[edit_items_key] = [
            {
                'product_name': item[1],
                'quantity': int(item[2]),
                'cost_price': float(item[3]),
                'weight': float(item[5]),
                'delivery_type': item[6] or 'truck'
            }
            for item in order_items
        ]
    
    with st.form(f"edit_complex_order_{order_id}"):
        st.subheader("üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            order_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ *", 
                value=order_info[1],
                help="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            )
        
        with col2:
            total_payment = st.number_input(
                "–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ($) *", 
                min_value=0.0, 
                format="%.2f",
                value=float(order_info[3] or 0)
            )
        
        st.subheader("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        items_to_edit = st.session_state[edit_items_key]
        
        for i, item in enumerate(items_to_edit):
            with st.expander(f"üì¶ {item['product_name']} (–¢–æ–≤–∞—Ä {i+1})"):
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    new_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ", value=item['product_name'], key=f"edit_name_{order_id}_{i}")
                    items_to_edit[i]['product_name'] = new_name
                
                with col2:
                    new_quantity = st.number_input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=item['quantity'], key=f"edit_qty_{order_id}_{i}")
                    items_to_edit[i]['quantity'] = new_quantity
                
                with col3:
                    new_cost = st.number_input(f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", min_value=0.0, format="%.2f", value=item['cost_price'], key=f"edit_cost_{order_id}_{i}")
                    items_to_edit[i]['cost_price'] = new_cost
                
                with col4:
                    new_weight = st.number_input(f"–í–µ—Å (–∫–≥)", min_value=0.0, format="%.2f", value=item['weight'], key=f"edit_weight_{order_id}_{i}")
                    items_to_edit[i]['weight'] = new_weight
                
                delivery_type = st.selectbox(
                    f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
                    options=["airplane", "truck"],
                    format_func=lambda x: "‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "üöõ –ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                    index=0 if item['delivery_type'] == "airplane" else 1,
                    key=f"edit_delivery_{order_id}_{i}"
                )
                items_to_edit[i]['delivery_type'] = delivery_type
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_rates = get_delivery_rates(user_id)
                item_delivery_cost = new_weight * delivery_rates[delivery_type]
                st.info(f"üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ${item_delivery_cost:.2f}")
        
        # –û–±—â–∏–π —Ä–∞—Å—á–µ—Ç
        if items_to_edit and total_payment > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_rates = get_delivery_rates(user_id)
            total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in items_to_edit)
            total_weight = sum(item['weight'] for item in items_to_edit)
            
            st.markdown("### üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å", f"{total_weight:.2f} –∫–≥")
            
            with col2:
                st.metric("üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", f"${total_delivery_cost:.2f}")
            
            with col3:
                remaining = max(0, total_payment - total_delivery_cost)
                st.metric("üí∞ –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã", f"${remaining:.2f}")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            save_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        with col2:
            if st.form_submit_button("üö´ –û—Ç–º–µ–Ω–∞", use_container_width=True):
                st.session_state[f'edit_mode_{order_id}'] = False
                if edit_items_key in st.session_state:
                    del st.session_state[edit_items_key]
                st.rerun()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if save_btn:
            if order_name and total_payment > 0 and items_to_edit:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                valid_items = all(
                    item['product_name'] and item['quantity'] > 0 and 
                    item['cost_price'] >= 0 and item['weight'] > 0
                    for item in items_to_edit
                )
                
                if valid_items:
                    if update_complex_order(order_id, user_id, order_name, total_payment, items_to_edit):
                        st.success("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        st.session_state[f'edit_mode_{order_id}'] = False
                        if edit_items_key in st.session_state:
                            del st.session_state[edit_items_key]
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                else:
                    st.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def get_delayed_orders(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    from datetime import datetime
    current_time = datetime.now()
    
    query = '''
        SELECT id, order_name, expected_delivery_date, delay_notification_sent
        FROM orders 
        WHERE user_id = ? 
        AND status = 'pending' 
        AND expected_delivery_date < ?
        ORDER BY expected_delivery_date
    '''
    
    cursor.execute(query, (user_id, current_time))
    delayed_orders = cursor.fetchall()
    conn.close()
    
    return delayed_orders

def mark_delay_notification_sent(order_id):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE orders SET delay_notification_sent = 1 WHERE id = ?', (order_id,))
    conn.commit()
    conn.close()

def send_delay_notifications(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"""
    delayed_orders = get_delayed_orders(user_id)
    notifications_sent = 0
    
    for order in delayed_orders:
        order_id, order_name, expected_date, notification_sent = order
        
        if not notification_sent:  # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            print(f"üö® –ó–ê–î–ï–†–ñ–ö–ê: –ó–∞–∫–∞–∑ '{order_name}' –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–±—ã—Ç—å {expected_date}")
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mark_delay_notification_sent(order_id)
            notifications_sent += 1
    
    return notifications_sent

def get_analytics(user_id, start_date=None, end_date=None, delivery_method=None):
    conn = sqlite3.connect('business_manager.db')
    
    # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query = '''
        SELECT oi.*, o.created_at, o.order_type
        FROM order_items oi
        JOIN orders o ON oi.order_id = o.id
        WHERE o.user_id = ?
    '''
    
    params = [user_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if start_date:
        query += ' AND DATE(o.created_at) >= ?'
        params.append(start_date.strftime('%Y-%m-%d'))
    
    if end_date:
        query += ' AND DATE(o.created_at) <= ?'
        params.append(end_date.strftime('%Y-%m-%d'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if delivery_method and delivery_method != 'all':
        query += ' AND oi.delivery_type = ?'
        params.append(delivery_method)
    
    df = pd.read_sql_query(query, conn, params=params)
    
    if df.empty:
        conn.close()
        return {
            'total_revenue': 0,
            'total_costs': 0,
            'total_cost_price': 0,
            'total_delivery_costs': 0,
            'profit': 0,
            'margin': 0,
            'profitability': 0,
            'financial_cushion': 0,
            'personal_expenses': 0,
            'cushion_percent': 20.0
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings_query = 'SELECT financial_cushion_percent FROM settings WHERE user_id = ?'
    cursor = conn.cursor()
    cursor.execute(settings_query, (user_id,))
    settings = cursor.fetchone()
    cushion_percent = settings[0] if settings else 20.0
    
    conn.close()
    
    # –†–∞—Å—á–µ—Ç—ã
    total_revenue = df['total_cost'].sum()
    total_cost_price = (df['cost_price'] * df['quantity']).sum()
    total_delivery_costs = df['delivery_cost'].sum()
    total_costs = total_cost_price + total_delivery_costs
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
    total_sale_value = (df['sale_price'].fillna(0) * df['quantity']).sum()
    profit = total_sale_value - total_cost_price  # –ü—Ä–∏–±—ã–ª—å –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    margin = (profit / total_sale_value * 100) if total_sale_value > 0 else 0
    profitability = (profit / total_cost_price * 100) if total_cost_price > 0 else 0
    
    financial_cushion = profit * (cushion_percent / 100)
    personal_expenses = profit - financial_cushion
    
    return {
        'total_revenue': total_revenue,
        'total_costs': total_costs,
        'total_cost_price': total_cost_price,
        'total_delivery_costs': total_delivery_costs,
        'profit': profit,
        'margin': margin,
        'profitability': profitability,
        'financial_cushion': financial_cushion,
        'personal_expenses': personal_expenses,
        'cushion_percent': cushion_percent
    }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–æ–º
def add_to_inventory(user_id, product_name, quantity, link=""):
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
    cursor.execute('SELECT id, quantity FROM inventory WHERE user_id = ? AND product_name = ?', 
                  (user_id, product_name))
    existing = cursor.fetchone()
    
    if existing:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        new_quantity = existing[1] + quantity
        cursor.execute('UPDATE inventory SET quantity = ?, link = ? WHERE id = ?', 
                      (new_quantity, link, existing[0]))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        cursor.execute('INSERT INTO inventory (user_id, product_name, quantity, link) VALUES (?, ?, ?, ?)', 
                      (user_id, product_name, quantity, link))
    
    conn.commit()
    conn.close()

def get_inventory(user_id):
    conn = sqlite3.connect('business_manager.db')
    df = pd.read_sql_query('SELECT * FROM inventory WHERE user_id = ? ORDER BY product_name', 
                          conn, params=(user_id,))
    conn.close()
    return df

def search_inventory(user_id, search_term):
    conn = sqlite3.connect('business_manager.db')
    query = '''
        SELECT * FROM inventory 
        WHERE user_id = ? AND product_name LIKE ? 
        ORDER BY product_name
    '''
    df = pd.read_sql_query(query, conn, params=(user_id, f'%{search_term}%'))
    conn.close()
    return df

def clear_inventory(user_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('DELETE FROM inventory WHERE user_id = ?', (user_id,))
    deleted_count = cursor.rowcount
    
    conn.commit()
    conn.close()
    return deleted_count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def show_navigation():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    if 'sidebar_expanded' not in st.session_state:
        st.session_state.sidebar_expanded = True
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    with st.sidebar:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div class="nav-header">
            <div class="nav-title">üìä –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</div>
            <div class="nav-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if st.session_state.email:
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, #E3F2FD, #F0F7FF); 
                        padding: 12px; border-radius: 8px; margin-bottom: 20px; text-align: center;">
                <strong style="color: var(--accent-color);">üë§ {st.session_state.email}</strong>
            </div>
            """, unsafe_allow_html=True)
        
        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        menu_items = [
            ("dashboard", "üìä", "–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"),
            ("orders", "üì¶", "–ó–∞–∫–∞–∑—ã"),
            ("analytics", "üìà", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            ("inventory", "üè™", "–°–∫–ª–∞–¥"),
            ("smart", "üß†", "–£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            ("settings", "‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        ]
        
        st.markdown('<div class="nav-menu">', unsafe_allow_html=True)
        
        for page_key, icon, title in menu_items:
            active_class = "active" if st.session_state.current_page == page_key else ""
            
            if st.button(
                f"{icon} {title}", 
                key=f"nav_{page_key}",
                use_container_width=True,
                type="primary" if active_class == "active" else "secondary"
            ):
                st.session_state.current_page = page_key
                st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        st.markdown("---")
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.user_id = None
            st.session_state.email = None
            st.session_state.current_page = "dashboard"
            st.rerun()

def show_notifications_dashboard():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å —É–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    st.title("üîî –¶–µ–Ω—Ç—Ä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    if smart_notifications is None:
        st.error("üö´ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É smart_notifications.py")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications = smart_notifications.get_all_notifications(st.session_state.user_id)
    
    if not notifications:
        st.success("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π! –í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    col1, col2, col3, col4 = st.columns(4)
    
    critical_count = len([n for n in notifications if n['priority'] == 'high'])
    warning_count = len([n for n in notifications if n['priority'] == 'medium'])
    info_count = len([n for n in notifications if n['priority'] == 'low'])
    
    with col1:
        st.metric("üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–µ", critical_count)
    
    with col2:
        st.metric("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warning_count)
    
    with col3:
        st.metric("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", info_count)
    
    with col4:
        st.metric("üìä –í—Å–µ–≥–æ", len(notifications))
    
    st.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        filter_priority = st.selectbox(
            "üéØ –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É",
            options=["–í—Å–µ", "–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"],
            key="notification_priority_filter"
        )
    
    with col2:
        filter_type = st.selectbox(
            "üìã –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            options=["–í—Å–µ", "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "–£—Å–ø–µ—Ö", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
            key="notification_type_filter"
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_notifications = notifications
    
    if filter_priority != "–í—Å–µ":
        priority_map = {"–í—ã—Å–æ–∫–∏–π": "high", "–°—Ä–µ–¥–Ω–∏–π": "medium", "–ù–∏–∑–∫–∏–π": "low"}
        filtered_notifications = [n for n in filtered_notifications if n['priority'] == priority_map[filter_priority]]
    
    if filter_type != "–í—Å–µ":
        type_map = {"–ö—Ä–∏—Ç–∏—á–Ω—ã–µ": "critical", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "warning", "–£—Å–ø–µ—Ö": "success", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "info"}
        filtered_notifications = [n for n in filtered_notifications if n['type'] == type_map[filter_type]]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    st.markdown("### üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    for notification in filtered_notifications:
        html_content = smart_notifications.format_notification_html(notification)
        st.markdown(html_content, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type="primary"):
        st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ç–µ–º–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
def show_modern_navigation():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è"""
    
    # CSS –¥–ª—è —Å–≤–µ—Ç–ª–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    st.markdown("""
    <style>
    .light-nav {
        background: #ffffff;
        color: #000000;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border: 1px solid #dee2e6;
    }
    
    .nav-title {
        color: #000000 !important;
        background: #ffffff !important;
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0;
        text-align: center;
    }
    
    .nav-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        flex-wrap: wrap;
        justify-content: center;
    }
    
    .nav-button {
        background: #f8f9fa;
        color: #000000;
        border: 1px solid #dee2e6;
        padding: 12px 20px;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        min-width: 120px;
        text-align: center;
    }
    
    .nav-button:hover {
        background: linear-gradient(135deg, #00d4ff, #a8edea);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,212,255,0.4);
        border-color: #00d4ff;
    }
    
    .nav-button.active {
        background: linear-gradient(135deg, #00d4ff, #a8edea);
        color: #1a1a2e;
        font-weight: 700;
        box-shadow: 0 5px 15px rgba(0,212,255,0.4);
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }
    
    .stat-card-dark {
        background: linear-gradient(135deg, #2c3e50, #34495e);
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        border: 1px solid rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }
    
    .stat-card-dark:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,212,255,0.2);
        border-color: #00d4ff;
    }
    
    .stat-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: #00d4ff;
        margin-bottom: 8px;
        text-shadow: 0 2px 10px rgba(0,212,255,0.3);
    }
    
    .stat-label {
        color: #bdc3c7;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    st.markdown("""
    <div class="dark-nav">
        <h1 class="nav-title">üåü Business Manager Pro</h1>
    </div>
    """, unsafe_allow_html=True)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
    
    current_page = st.session_state.current_page
    
    with col1:
        if st.button("üè† –ì–ª–∞–≤–Ω–∞—è", key="modern_nav_dashboard", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.rerun()
    
    with col2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_count = 0
        if smart_notifications:
            try:
                notifications = smart_notifications.get_all_notifications(st.session_state.user_id)
                notification_count = len([n for n in notifications if n['priority'] == 'high'])
            except:
                notification_count = 0
        
        button_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        if notification_count > 0:
            button_text = f"üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({notification_count})"
        
        if st.button(button_text, key="modern_nav_notifications", use_container_width=True):
            st.session_state.current_page = "notifications"
            st.rerun()
    
    with col3:
        if st.button("üìã –ó–∞–∫–∞–∑—ã", key="modern_nav_orders", use_container_width=True):
            st.session_state.current_page = "orders"
            st.rerun()
    
    with col4:
        if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", key="modern_nav_analytics", use_container_width=True):
            st.session_state.current_page = "analytics"
            st.rerun()
    
    with col5:
        if st.button("üì¶ –°–∫–ª–∞–¥", key="modern_nav_inventory", use_container_width=True):
            st.session_state.current_page = "inventory"
            st.rerun()
    
    with col6:
        if st.button("ü§ñ –ò–ò", key="modern_nav_smart", use_container_width=True):
            st.session_state.current_page = "smart"
            st.rerun()
    
    with col7:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", key="modern_nav_settings", use_container_width=True):
            st.session_state.current_page = "settings"
            st.rerun()
    
    # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("""
    <div class="dark-nav">
        <div class="stats-grid">
    """, unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    try:
        total_orders = get_total_orders()
        total_revenue = get_total_revenue()
        pending_orders = get_pending_orders_count()
        
        with col1:
            st.markdown(f"""
            <div class="stat-card-dark">
                <div class="stat-value">{total_orders}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="stat-card-dark">
                <div class="stat-value">${total_revenue:,.0f}</div>
                <div class="stat-label">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="stat-card-dark">
                <div class="stat-value">{pending_orders}</div>
                <div class="stat-label">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            profit_margin = 15.5  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –º–∞—Ä–∂–∞
            st.markdown(f"""
            <div class="stat-card-dark">
                <div class="stat-value">{profit_margin}%</div>
                <div class="stat-label">–ú–∞—Ä–∂–∞</div>
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.markdown(f"""
        <div class="stat-card-dark">
            <div class="stat-value">‚ö†Ô∏è</div>
            <div class="stat-label">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("</div></div>", unsafe_allow_html=True)

def get_pending_orders_count():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ? AND status = 'pending'", 
                      (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0
    except:
        return 0

def show_sidebar_menu():
    """–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.markdown("""
        <div style="background: #f8f9fa; 
                    padding: 15px; border-radius: 10px; margin-bottom: 20px;
                    text-align: center; border: 1px solid #dee2e6;">
            <h2 style="color: #000000; margin: 0; background: #f8f9fa;">üçî –ú–µ–Ω—é</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if st.button("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", key="menu_dashboard", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", key="menu_orders", use_container_width=True):
            st.session_state.current_page = "orders"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã", key="menu_analytics", use_container_width=True):
            st.session_state.current_page = "analytics"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º", key="menu_inventory", use_container_width=True):
            st.session_state.current_page = "inventory"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("ü§ñ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏", key="menu_smart", use_container_width=True):
            st.session_state.current_page = "smart"
            st.session_state.menu_open = False
            st.rerun()
        
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", key="menu_settings", use_container_width=True):
            st.session_state.current_page = "settings"
            st.session_state.menu_open = False
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            total_orders = get_total_orders()
            total_revenue = get_total_revenue()
            delayed_orders = len(get_delayed_orders(st.session_state.user_id))
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("–ó–∞–∫–∞–∑–æ–≤", total_orders)
                st.metric("–ó–∞–¥–µ—Ä–∂–µ–∫", delayed_orders)
            with col_b:
                st.metric("–í—ã—Ä—É—á–∫–∞", f"${total_revenue:,.0f}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("ÔøΩ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏", key="quick_delays", use_container_width=True):
            try:
                notifications = send_delay_notifications(st.session_state.user_id)
                if notifications > 0:
                    st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {notifications} –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                else:
                    st.success("‚úÖ –ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
        
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", key="quick_export", use_container_width=True):
            st.info("üìÑ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", key="close_menu", use_container_width=True):
            st.session_state.menu_open = False
            st.rerun()
        
        # –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if st.button("üö™ –í—ã–π—Ç–∏", key="menu_logout", use_container_width=True, type="secondary"):
            st.session_state.user_id = None
            st.session_state.email = None
            st.session_state.current_page = "dashboard"
            st.session_state.menu_open = False
            st.rerun()

def get_total_orders():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0
    except:
        return 0

def get_total_revenue():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(total_price) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result and result[0] else 0
    except:
        return 0
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            conn = sqlite3.connect('business_manager.db')
            cursor = conn.cursor()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
            total_orders = cursor.fetchone()[0]
            
            # –ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            delayed_orders = get_delayed_orders(st.session_state.user_id)
            delayed_count = len(delayed_orders)
            
            # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
            cursor.execute("SELECT SUM(profit) FROM orders WHERE user_id = ?", (st.session_state.user_id,))
            total_profit = cursor.fetchone()[0] or 0
            
            conn.close()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            st.markdown(f"""
            <div style="background: #f0f2f6; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: #1f77b4; margin: 0;">üìã {total_orders}</h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</p>
                </div>
            </div>
            
            <div style="background: {'#ffe6e6' if delayed_count > 0 else '#e6ffe6'}; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: {'#ff4444' if delayed_count > 0 else '#44ff44'}; margin: 0;">
                        {'‚ö†Ô∏è' if delayed_count > 0 else '‚úÖ'} {delayed_count}
                    </h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
                </div>
            </div>
            
            <div style="background: #e6f7ff; padding: 15px; border-radius: 10px; margin: 10px 0;">
                <div style="text-align: center;">
                    <h3 style="color: #52c41a; margin: 0;">üí∞ ${total_profit:,.0f}</h3>
                    <p style="margin: 5px 0 0 0; color: #666;">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏", use_container_width=True):
            notifications_sent = send_delay_notifications(st.session_state.user_id)
            if notifications_sent > 0:
                st.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                st.success("–ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            st.cache_data.clear()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", use_container_width=True, type="primary"):
            st.session_state.show_sidebar_menu = False
            st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def apply_custom_styles():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º–Ω—ã–µ —Å—Ç–∏–ª–∏"""
    st.markdown("""
    <style>
    /* –°–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display: none;}
    .viewerBadge_container__1QSob {display: none;}
    
    /* CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    :root {
        --primary-light: #1a1a1a;
        --secondary-light: #2d2d2d;
        --accent-light: #404040;
        --text-dark: #ffffff;
        --text-secondary: #cccccc;
        --accent-blue: #0066cc;
        --accent-gradient: linear-gradient(135deg, #0066cc, #007bff);
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --border-light: rgba(255,255,255,0.2);
        --shadow-light: 0 2px 10px rgba(0,0,0,0.3);
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ */
    .stApp {
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .main .block-container {
        padding: 1rem 2rem;
        max-width: 1400px;
        background: var(--bg-primary) !important;
        color: var(--text-primary) !important;
        border-radius: 20px;
        margin: 1rem auto;
        box-shadow: var(--shadow-medium);
        backdrop-filter: none;
        border: 1px solid var(--border-light);
    }
    
    /* –¢–µ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
    .auth-container {
        max-width: 400px;
        margin: 50px auto;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border-radius: 20px;
        padding: 40px;
        box-shadow: var(--shadow-medium);
        border: 1px solid var(--border-light);
    }
    
    .auth-title {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary) !important;
        background: transparent !important;
        margin-bottom: 30px;
    }
    
    /* –ü–æ–ª—è –≤–≤–æ–¥–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stTextInput > div > div > input {
        background: var(--bg-primary) !important;
        border: 2px solid var(--border-medium) !important;
        border-radius: 8px !important;
        padding: 0.75rem !important;
        font-size: 0.9rem !important;
        color: var(--text-primary) !important;
        transition: all 0.3s ease !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--accent-blue) !important;
        box-shadow: 0 0 0 2px rgba(0,102,204,0.2) !important;
        background: var(--bg-primary) !important;
    }
    
    .stTextInput > div > div > input::placeholder {
        color: var(--text-muted) !important;
    }
    
    /* –°–≤–µ—Ç–ª—ã–µ –∫–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: #f0f0f0 !important;
        color: #000000 !important;
        border: 1px solid #cccccc !important;
        border-radius: 12px !important;
        padding: 12px 30px !important;
        font-weight: 600 !important;
        font-size: 14px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(0,212,255,0.3) !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(0,212,255,0.4) !important;
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-primary) !important;
        background: transparent !important;
        font-weight: 700 !important;
    }
    
    h1 {
        font-size: 2.5rem !important;
        margin-bottom: 10px !important;
        color: var(--text-primary) !important;
        background: transparent !important;
    }
    
    /* –¢–µ–∫—Å—Ç –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
    .stMarkdown p, .stText, .element-container p {
        color: var(--text-primary) !important;
        background: transparent !important;
    }
    
    /* –¢–µ–º–Ω—ã–µ —Ç–∞–±—ã */
    .stTabs [data-baseweb="tab-list"] {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border-radius: 15px;
        padding: 5px;
        border: 1px solid var(--border-light);
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent !important;
        color: var(--text-secondary) !important;
        border-radius: 10px !important;
        padding: 10px 20px !important;
        font-weight: 600 !important;
        border: none !important;
    }
    
    .stTabs [aria-selected="true"] {
        background: var(--accent-blue) !important;
        color: #ffffff !important;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã - —Ç–µ–º–Ω—ã–µ */
    .stSelectbox > div > div {
        background: var(--bg-secondary) !important;
        border: 2px solid var(--border-light) !important;
        border-radius: 12px !important;
        color: var(--text-primary) !important;
    }
    
    .stSelectbox > div > div > div {
        color: var(--text-primary) !important;
        background: var(--bg-secondary) !important;
    }
    
    /* Number input - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stNumberInput > div > div > input {
        background: #ffffff !important;
        border: 2px solid #dee2e6 !important;
        border-radius: 8px !important;
        color: #000000 !important;
        padding: 0.75rem !important;
    }
    
    /* Date input - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stDateInput > div > div > input {
        background: #ffffff !important;
        border: 2px solid #dee2e6 !important;
        border-radius: 8px !important;
        color: #000000 !important;
        padding: 0.75rem !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        color: #000000 !important;
        background: #ffffff !important;
        text-shadow: none;
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: #666666 !important;
        background: #ffffff !important;
    }
    
    /* –°–≤–µ—Ç–ª—ã–µ –∞–ª–µ—Ä—Ç—ã */
    .stAlert {
        background: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
        color: #000000 !important;
        border-radius: 12px !important;
    }
    
    .stSuccess {
        background: rgba(40, 167, 69, 0.1) !important;
        border: 1px solid var(--success-color) !important;
        color: #000000 !important;
    }
    
    .stError {
        background: rgba(220, 53, 69, 0.1) !important;
        border: 1px solid var(--danger-color) !important;
        color: #000000 !important;
    }
    
    .stWarning {
        background: rgba(255, 193, 7, 0.1) !important;
        border: 1px solid var(--warning-color) !important;
        color: #000000 !important;
    }
    
    .stInfo {
        background: rgba(0, 102, 204, 0.1) !important;
        border: 1px solid var(--accent-blue) !important;
        color: #000000 !important;
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background: #ffffff !important;
    }
    
    .css-1cypcdb {
        background: #f8f9fa !important;
        border-right: 1px solid #dee2e6 !important;
    }
    
    /* –§–æ—Ä–º—ã */
    .stForm {
        background: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
        border-radius: 15px !important;
        padding: 20px !important;
        color: #000000 !important;
    }
    
    /* –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ */
    .stRadio > div {
        background: var(--secondary-dark) !important;
        border-radius: 12px !important;
        padding: 15px !important;
        border: 1px solid var(--border-light) !important;
    }
    
    .stRadio label {
        color: var(--text-light) !important;
    }
    
    /* –¢–æ–ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
    .top-nav {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        padding: 15px 30px;
        border-radius: 15px;
        margin-bottom: 25px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .nav-item {
        display: inline-block;
        padding: 8px 20px;
        margin: 0 5px;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border-radius: 25px;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .nav-item:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .nav-item.active {
        background: linear-gradient(135deg, #3498db, #2980b9);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin: 15px 0;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        border: none;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 12px !important;
        padding: 12px 30px !important;
        font-weight: 600 !important;
        font-size: 14px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3) !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4) !important;
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%) !important;
    }
    
    /* –§–æ—Ä–º—ã –≤—Ö–æ–¥–∞ */
    .auth-container {
        max-width: 400px;
        margin: 50px auto;
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .auth-title {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 30px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput > div > div > input {
        border: 2px solid #e1e8ed !important;
        border-radius: 12px !important;
        padding: 15px !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        background: #f8f9fa !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea !important;
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.2) !important;
        background: white !important;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #2c3e50 !important;
        font-weight: 700 !important;
    }
    
    h1 {
        font-size: 2.5rem !important;
        margin-bottom: 10px !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    /* –°–ø–∏—Å–∫–∏ –∑–∞–∫–∞–∑–æ–≤ */
    .order-item {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        border-left: 4px solid #667eea;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .order-item:hover {
        transform: translateX(10px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        border-left-color: #764ba2;
    }
    
    .order-title {
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.1rem;
        margin-bottom: 5px;
    }
    
    .order-meta {
        color: #7f8c8d;
        font-size: 0.9rem;
    }
    
    /* –°—Ç–∞—Ç—É—Å—ã */
    .status-badge {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-pending {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
    }
    
    .status-delivered {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
            margin: 0.5rem;
        }
        
        .top-nav {
            padding: 10px 15px;
        }
        
        .nav-item {
            display: block;
            margin: 5px 0;
            text-align: center;
        }
        
        .auth-container {
            margin: 20px;
            padding: 30px 20px;
        }
    }
    </style>
    """, unsafe_allow_html=True)

def main():
    init_db()
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    apply_custom_styles()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    if 'email' not in st.session_state:
        st.session_state.email = None
    if 'show_smart_insights' not in st.session_state:
        st.session_state.show_smart_insights = True
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not st.session_state.user_id:
        show_auth()
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    show_modern_navigation()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = st.session_state.current_page
    
    if page == "dashboard":
        show_dashboard()
    elif page == "notifications":
        show_notifications_dashboard()
    elif page == "orders":
        show_orders()
    elif page == "analytics":
        show_analytics()
    elif page == "inventory":
        show_inventory()
    elif page == "smart":
        show_smart_functions()
    elif page == "settings":
        show_settings()
    else:
        show_dashboard()

def show_auth():
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="text-align: center; padding: 3rem 0 2rem 0;">
            <h1 style="
                color: #2E4057; 
                font-size: 2.5rem; 
                font-weight: 300; 
                margin-bottom: 0.5rem;
                letter-spacing: -1px;
            ">–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
            <p style="
                color: #64748B; 
                font-size: 1.1rem; 
                margin: 0;
                font-weight: 300;
            ">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –±–∏–∑–Ω–µ—Å–æ–º</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with tab1:
            st.markdown("""
            <div class="auth-card">
                <div class="auth-header">
                    <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h2>
                    <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            with st.form("login_form", clear_on_submit=False):
                email = st.text_input(
                    "Email", 
                    placeholder="example@company.com",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å"
                )
                password = st.text_input(
                    "–ü–∞—Ä–æ–ª—å", 
                    type="password", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    help="–í–∞—à –ø–∞—Ä–æ–ª—å"
                )
                
                st.markdown("<br>", unsafe_allow_html=True)
                
                submitted = st.form_submit_button(
                    "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", 
                    use_container_width=True,
                    type="primary"
                )
                
                if submitted:
                    if email and password:
                        user_id = login_user(email, password)
                        if user_id:
                            st.session_state.user_id = user_id
                            st.session_state.email = email
                            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                            st.rerun()
                        else:
                            st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        with tab2:
            st.markdown("""
            <div class="auth-card">
                <div class="auth-header">
                    <h2>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h2>
                    <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            with st.form("register_form", clear_on_submit=False):
                reg_email = st.text_input(
                    "Email", 
                    placeholder="example@company.com",
                    key="reg_email",
                    help="–í–∞—à email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞"
                )
                reg_password = st.text_input(
                    "–ü–∞—Ä–æ–ª—å", 
                    type="password", 
                    placeholder="–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    key="reg_password",
                    help="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                )
                reg_password_confirm = st.text_input(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", 
                    type="password", 
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    key="reg_password_confirm"
                )
                
                st.markdown("<br>", unsafe_allow_html=True)
                
                submitted = st.form_submit_button(
                    "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                    use_container_width=True,
                    type="primary"
                )
                
                if submitted:
                    if reg_email and reg_password and reg_password_confirm:
                        if len(reg_password) < 6:
                            st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                        elif reg_password == reg_password_confirm:
                            success, message = register_user(reg_email, reg_password)
                            if success:
                                st.success(message)
                            else:
                                st.error(message)
                        else:
                            st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

def show_dashboard():
    st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    analytics = get_analytics(st.session_state.user_id)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${analytics['total_revenue']:.2f}")
    
    with col2:
        st.metric("üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"${analytics['total_costs']:.2f}")
    
    with col3:
        st.metric("üìà –ü—Ä–∏–±—ã–ª—å", f"${analytics['profit']:.2f}")
    
    with col4:
        st.metric("üìä –ú–∞—Ä–∂–∞", f"{analytics['margin']:.1f}%")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –∏ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞", f"${analytics['financial_cushion']:.2f}")
    
    with col2:
        st.metric("üè† –ù–∞ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"${analytics['personal_expenses']:.2f}")
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    st.subheader("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    conn = sqlite3.connect('business_manager.db')
    recent_orders = pd.read_sql_query('''
        SELECT o.order_name, o.order_type, o.created_at, 
               COUNT(oi.id) as items_count,
               SUM(oi.total_cost) as total_value
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        GROUP BY o.id
        ORDER BY o.created_at DESC
        LIMIT 5
    ''', conn, params=(st.session_state.user_id,))
    conn.close()
    
    if not recent_orders.empty:
        st.dataframe(recent_orders, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

def show_orders():
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="
            color: #2E4057; 
            font-size: 2.5rem; 
            font-weight: 300; 
            margin-bottom: 0.5rem;
            letter-spacing: -1px;
        ">üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h1>
        <p style="
            color: #64748B; 
            font-size: 1.1rem; 
            margin: 0;
            font-weight: 300;
        ">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üìã –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "üìã –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã"])
    
    with tab1:
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <h2 style="color: #2E4057; font-weight: 400;">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞</h2>
        </div>
        """, unsafe_allow_html=True)
        
        order_type = st.radio(
            "–¢–∏–ø –∑–∞–∫–∞–∑–∞:", 
            ["–û–¥–∏–Ω–æ—á–Ω—ã–π", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π"],
            horizontal=True,
            help="–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤"
        )
        
        if order_type == "–û–¥–∏–Ω–æ—á–Ω—ã–π":
            show_single_order_form()
        else:
            show_complex_order_form()
    
    with tab2:
        show_simple_order_history("single")
    
    with tab3:
        show_simple_order_history("complex")

def show_single_order_form():
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑")
    
    with st.form("single_order_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", min_value=1, value=1)
            cost_price = st.number_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($) *", min_value=0.0, format="%.2f")
            sale_price = st.number_input("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($) *", min_value=0.0, format="%.2f")
        
        with col2:
            weight = st.number_input("–í–µ—Å (–∫–≥) *", min_value=0.0, format="%.2f")
            delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ *", 
                                       options=["airplane", "truck"],
                                       format_func=lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)")
            
            # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            st.markdown("### üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞")
            order_date = st.date_input(
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
                value=datetime.now().date(),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –û—Ç —ç—Ç–æ–π –¥–∞—Ç—ã –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞."
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_days = 7 if delivery_type == "airplane" else 14  # –°–∞–º–æ–ª–µ—Ç - 7 –¥–Ω–µ–π, –º–∞—à–∏–Ω–∞ - 14 –¥–Ω–µ–π
            expected_delivery = order_date + timedelta(days=delivery_days)
            
            st.info(f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: **{expected_delivery.strftime('%d.%m.%Y')}** ({delivery_days} –¥–Ω–µ–π)")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        if weight > 0 and sale_price > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_rates = get_delivery_rates(st.session_state.user_id)
            delivery_cost = weight * delivery_rates[delivery_type]
            total_cost = sale_price * quantity + delivery_cost
            profit_per_item = sale_price - cost_price
            total_profit = profit_per_item * quantity
            
            st.markdown("---")
            st.markdown("### üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
            
            calc_col1, calc_col2, calc_col3 = st.columns(3)
            
            with calc_col1:
                st.metric("üöö –î–æ—Å—Ç–∞–≤–∫–∞", f"${delivery_cost:.2f}")
                st.metric("üìä –ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥.", f"${profit_per_item:.2f}")
            
            with calc_col2:
                st.metric("üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"${total_profit:.2f}")
                st.metric("üíº –ú–∞—Ä–∂–∞", f"{(profit_per_item/sale_price*100):.1f}%" if sale_price > 0 else "0%")
            
            with calc_col3:
                st.metric("üí∞ –ò—Ç–æ–≥–æ", f"${total_cost:.2f}")
                profit_color = "normal" if total_profit >= 0 else "inverse"
                st.metric("üéØ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", f"{'–ü—Ä–∏–±—ã–ª—å–Ω–æ' if total_profit >= 0 else '–£–±—ã—Ç–æ—á–Ω–æ'}", delta=f"{total_profit:.2f}")
        
        submitted = st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", use_container_width=True)
        
        if submitted:
            if product_name and quantity > 0 and cost_price >= 0 and sale_price >= 0 and weight > 0:
                order_id = add_single_order(
                    st.session_state.user_id, 
                    product_name, 
                    quantity, 
                    cost_price, 
                    sale_price, 
                    weight, 
                    delivery_type,
                    order_date,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    expected_delivery  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
                )
                if order_id:
                    st.success(f"‚úÖ –ó–∞–∫–∞–∑ '{product_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    st.success(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date.strftime('%d.%m.%Y')}")
                    st.success(f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {expected_delivery.strftime('%d.%m.%Y')}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
                    add_to_inventory(st.session_state.user_id, product_name, quantity)
                    st.info(f"üì¶ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥")
                    time.sleep(2)
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def show_complex_order_form():
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    if 'complex_items' not in st.session_state:
        st.session_state.complex_items = []
    
    with st.form("complex_order_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            order_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ *")
            total_payment = st.number_input("–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ($) *", min_value=0.0, format="%.2f")
        
        st.subheader("–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"):
            item_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                item_quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=1, key="item_qty")
            with col2:
                item_cost = st.number_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", min_value=0.0, format="%.2f", key="item_cost")
            with col3:
                item_weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=0.0, format="%.2f", key="item_weight")
            with col4:
                item_delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", 
                                                options=["airplane", "truck"],
                                                format_func=lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)",
                                                key="item_delivery")
            
            add_item_btn = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            
            if add_item_btn and item_name and item_quantity > 0 and item_cost >= 0 and item_weight > 0:
                st.session_state.complex_items.append({
                    'product_name': item_name,
                    'quantity': item_quantity,
                    'cost_price': item_cost,
                    'weight': item_weight,
                    'delivery_type': item_delivery_type
                })
                st.success(f"–¢–æ–≤–∞—Ä '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if st.session_state.complex_items:
            st.write("**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_rates = get_delivery_rates(st.session_state.user_id)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —á–∏—Ç–∞–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            items_display = []
            for item in st.session_state.complex_items:
                display_item = item.copy()
                airplane_rate = delivery_rates['airplane']
                truck_rate = delivery_rates['truck']
                display_item['delivery_type_display'] = f"–°–∞–º–æ–ª–µ—Ç (${airplane_rate}/–∫–≥)" if item['delivery_type'] == "airplane" else f"–ú–∞—à–∏–Ω–∞ (${truck_rate}/–∫–≥)"
                display_item['item_delivery_cost'] = item['weight'] * delivery_rates[item['delivery_type']]
                items_display.append(display_item)
            
            items_df = pd.DataFrame(items_display)
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = {
                'product_name': '–¢–æ–≤–∞—Ä',
                'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'cost_price': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)',
                'weight': '–í–µ—Å (–∫–≥)',
                'delivery_type_display': '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏',
                'item_delivery_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ($)'
            }
            items_df_display = items_df[list(display_columns.keys())].rename(columns=display_columns)
            st.dataframe(items_df_display, use_container_width=True)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            total_delivery_cost = sum(item['weight'] * delivery_rates[item['delivery_type']] for item in st.session_state.complex_items)
            total_weight = sum(item['weight'] for item in st.session_state.complex_items)
            
            st.write("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:**")
            st.write(f"- –û–±—â–∏–π –≤–µ—Å: {total_weight:.2f} –∫–≥")
            st.write(f"- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${total_delivery_cost:.2f}")
            st.write(f"- –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã: ${max(0, total_payment - total_delivery_cost):.2f}")
        
        col1, col2 = st.columns(2)
        with col1:
            submit_order = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        with col2:
            clear_items = st.form_submit_button("–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        
        if clear_items:
            st.session_state.complex_items = []
            st.rerun()
        
        if submit_order:
            if order_name and total_payment > 0 and st.session_state.complex_items:
                order_id = add_complex_order(st.session_state.user_id, order_name, 
                                           total_payment, st.session_state.complex_items)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
                for item in st.session_state.complex_items:
                    add_to_inventory(st.session_state.user_id, item['product_name'], item['quantity'])
                
                st.success(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                st.session_state.complex_items = []
                st.rerun()
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")

def show_order_history(order_type):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    
    # CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.markdown("""
    <style>
    .order-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 2px solid #e9ecef;
        border-radius: 20px;
        padding: 25px;
        margin: 20px 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .order-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    .order-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        border-color: #667eea;
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f8f9fa;
    }
    
    .order-title {
        font-size: 1.6rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .order-status {
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 700;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: 2px solid;
        min-width: 120px;
        text-align: center;
    }
    
    .status-pending {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        border-color: #ffc107;
    }
    
    .status-delivered {
        background: linear-gradient(135deg, #d1f2eb 0%, #a3d9c6 100%);
        color: #155724;
        border-color: #28a745;
    }
    
    .status-delayed {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        color: #721c24;
        border-color: #dc3545;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .order-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 25px 0;
    }
    
    .info-card {
        background: rgba(255,255,255,0.8);
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        border: 1px solid rgba(102, 126, 234, 0.2);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }
    
    .info-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
        border-color: #667eea;
    }
    
    .info-label {
        font-size: 0.9rem;
        color: #6c757d;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 1px;
        margin-bottom: 8px;
    }
    
    .info-value {
        font-size: 1.4rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }
    
    .profit-positive {
        color: #28a745;
    }
    
    .profit-negative {
        color: #dc3545;
    }
    
    .order-actions {
        display: flex;
        gap: 15px;
        margin-top: 25px;
        flex-wrap: wrap;
        justify-content: flex-start;
    }
    
    .action-button {
        padding: 12px 24px;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: 0.95rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: 2px solid transparent;
    }
    
    .btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: 2px solid transparent;
    }
    
    .btn-danger {
        background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        color: white;
        border: 2px solid transparent;
    }
    
    .action-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }
    
    .search-panel {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 25px;
        border-radius: 20px;
        margin-bottom: 30px;
        border: 2px solid #dee2e6;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
    }
    
    .stat-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .no-orders {
        text-align: center;
        padding: 80px 40px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        margin: 40px 0;
        border: 2px dashed #dee2e6;
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin: 30px 0;
        padding: 20px;
        background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-primary) 100%);
        border-radius: 15px;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
    .stDataFrame {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light) !important;
        border-radius: 10px !important;
    }
    
    /* Plotly –≥—Ä–∞—Ñ–∏–∫–∏ - —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω */
    .js-plotly-plot {
        background: var(--bg-secondary) !important;
    }
    
    /* –°–ø–∏–Ω–Ω–µ—Ä - –≥–æ–ª—É–±–æ–π */
    .stSpinner {
        color: var(--accent-blue) !important;
    }
    
    /* –ö–æ–¥ –±–ª–æ–∫–∏ - —Ç–µ–º–Ω—ã–µ */
    .stCode {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-light) !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ - —Ç–µ–º–Ω—ã–µ */
    .metric-container {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 2px solid var(--border-light) !important;
        border-radius: 15px !important;
        padding: 20px !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    .stMarkdown, .stMarkdown *, .stText, .stText * {
        color: var(--text-primary) !important;
        background: transparent !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 30px; border-radius: 20px; margin-bottom: 30px; text-align: center;
                box-shadow: 0 8px 30px rgba(0,0,0,0.1);">
        <h1 style="color: white; margin: 0; font-size: 2.2rem; font-weight: 700;">
            üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ - {order_type.upper()}
        </h1>
        <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 1.1rem;">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        with st.container():
            st.markdown('<div class="search-panel">', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            
            with col1:
                search_term = st.text_input(
                    "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...",
                    key=f"search_{order_type}"
                )
            
            with col2:
                status_filter = st.selectbox(
                    "üìä –°—Ç–∞—Ç—É—Å", 
                    ["–í—Å–µ", "–í –æ–∂–∏–¥–∞–Ω–∏–∏", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", "–ó–∞–¥–µ—Ä–∂–∞–Ω"],
                    key=f"status_filter_{order_type}"
                )
            
            with col3:
                sort_option = st.selectbox(
                    "üìà –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", 
                    ["–î–∞—Ç–µ (–Ω–æ–≤—ã–µ)", "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)", "–ü—Ä–∏–±—ã–ª–∏ ‚Üì", "–ü—Ä–∏–±—ã–ª–∏ ‚Üë", "–ù–∞–∑–≤–∞–Ω–∏—é"],
                    key=f"sort_{order_type}"
                )
            
            with col4:
                per_page = st.selectbox(
                    "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å", 
                    [5, 10, 20, 50], 
                    index=1,
                    key=f"per_page_{order_type}"
                )
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if order_type == "single":
            base_query = '''
                SELECT o.id, o.order_name, 
                       oi.quantity, 
                       oi.sale_price as price, 
                       oi.cost_price as cost,
                       (oi.sale_price - oi.cost_price) * oi.quantity as profit,
                       o.created_at as order_date, 
                       o.status, 
                       o.expected_delivery_date, 
                       o.actual_delivery_date,
                       o.delivery_type
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "single"
            '''
        else:
            base_query = '''
                SELECT o.id, o.order_name, 
                       COUNT(oi.id) as total_items,
                       SUM(oi.sale_price * oi.quantity) as price,
                       SUM(oi.cost_price * oi.quantity) as cost,
                       SUM((oi.sale_price - oi.cost_price) * oi.quantity) as profit,
                       o.created_at as order_date, 
                       o.status, 
                       o.expected_delivery_date, 
                       o.actual_delivery_date,
                       o.delivery_type
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "complex"
                GROUP BY o.id, o.order_name, o.created_at, o.status, o.expected_delivery_date, 
                         o.actual_delivery_date, o.delivery_type
            '''
        
        params = [st.session_state.user_id]
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if search_term:
            base_query += " AND LOWER(order_name) LIKE LOWER(?)"
            params.append(f"%{search_term}%")
        
        if status_filter != "–í—Å–µ":
            status_map = {"–í –æ–∂–∏–¥–∞–Ω–∏–∏": "pending", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "delivered"}
            if status_filter == "–ó–∞–¥–µ—Ä–∂–∞–Ω":
                # –î–ª—è –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                base_query += " AND status = 'pending' AND expected_delivery_date < date('now')"
            elif status_filter in status_map:
                base_query += " AND status = ?"
                params.append(status_map[status_filter])
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_option == "–î–∞—Ç–µ (–Ω–æ–≤—ã–µ)":
            base_query += " ORDER BY order_date DESC"
        elif sort_option == "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)":
            base_query += " ORDER BY order_date ASC"
        elif sort_option == "–ü—Ä–∏–±—ã–ª–∏ ‚Üì":
            base_query += " ORDER BY profit DESC"
        elif sort_option == "–ü—Ä–∏–±—ã–ª–∏ ‚Üë":
            base_query += " ORDER BY profit ASC"
        elif sort_option == "–ù–∞–∑–≤–∞–Ω–∏—é":
            base_query += " ORDER BY order_name ASC"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_sql_query(base_query, conn, params=params)
        
        if df.empty:
            st.markdown("""
            <div class="no-orders">
                <h2 style="color: #6c757d; margin-bottom: 20px;">üì≠ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
                <p style="color: #6c757d; font-size: 1.2rem; margin-bottom: 30px;">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                </p>
                <div style="margin-top: 30px;">
                    <a href="#" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                                      color: white; padding: 15px 30px; border-radius: 12px; 
                                      text-decoration: none; font-weight: 600;">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
                    </a>
                </div>
            </div>
            """, unsafe_allow_html=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
        delayed_orders = get_delayed_orders(st.session_state.user_id)
        delayed_ids = [order[0] for order in delayed_orders]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_orders = len(df)
        total_pages = max(1, (total_orders + per_page - 1) // per_page)
        
        if f'page_{order_type}' not in st.session_state:
            st.session_state[f'page_{order_type}'] = 1
        
        current_page = st.session_state[f'page_{order_type}']
        
        # –ü–∞–Ω–µ–ª—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            st.markdown(f"""
            <div class="pagination">
                <span style="color: #6c757d; font-weight: 600;">
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages} ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
                </span>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])
            
            with col1:
                if st.button("‚èÆÔ∏è –ü–µ—Ä–≤–∞—è", disabled=current_page == 1, key=f"first_{order_type}"):
                    st.session_state[f'page_{order_type}'] = 1
                    st.rerun()
            
            with col2:
                if st.button("‚óÄÔ∏è –ù–∞–∑–∞–¥", disabled=current_page == 1, key=f"prev_{order_type}"):
                    st.session_state[f'page_{order_type}'] -= 1
                    st.rerun()
            
            with col4:
                if st.button("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", disabled=current_page == total_pages, key=f"next_{order_type}"):
                    st.session_state[f'page_{order_type}'] += 1
                    st.rerun()
            
            with col5:
                if st.button("–ü–æ—Å–ª–µ–¥–Ω—è—è ‚è≠Ô∏è", disabled=current_page == total_pages, key=f"last_{order_type}"):
                    st.session_state[f'page_{order_type}'] = total_pages
                    st.rerun()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * per_page
        end_idx = start_idx + per_page
        page_orders = df.iloc[start_idx:end_idx]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        for _, order in page_orders.iterrows():
            order_id = order['id']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫
            status = order['status']
            is_delayed = order_id in delayed_ids
            
            if is_delayed:
                status_display = "delayed"
                status_text = "‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∞–Ω"
                status_color = "#e74c3c"
            elif status == "delivered":
                status_display = "delivered"
                status_text = "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                status_color = "#27ae60"
            else:
                status_display = "pending"
                status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                status_color = "#f39c12"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            order_date = pd.to_datetime(order['order_date']).strftime('%d.%m.%Y')
            expected_date = pd.to_datetime(order['expected_delivery_date']).strftime('%d.%m.%Y') if order['expected_delivery_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
            profit = order['profit']
            profit_color = "#27ae60" if profit > 0 else "#e74c3c"
            
            # –¢–µ–º–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                border-radius: 20px;
                padding: 25px;
                margin: 20px 0;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                border: 1px solid rgba(255,255,255,0.1);
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            " onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 15px 40px rgba(0,212,255,0.2)'; this.style.borderColor='#00d4ff';" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 10px 30px rgba(0,0,0,0.3)'; this.style.borderColor='rgba(255,255,255,0.1)';">
                
                <!-- –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ -->
                <div style="
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 4px;
                    background: linear-gradient(90deg, {status_color}, {status_color}88);
                "></div>
                
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º -->
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <div>
                        <h2 style="
                            color: #00d4ff; 
                            margin: 0; 
                            font-size: 1.5rem; 
                            font-weight: 700;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            background: linear-gradient(135deg, #00d4ff, #a8edea);
                            -webkit-background-clip: text;
                            -webkit-text-fill-color: transparent;
                            background-clip: text;
                        " onclick="document.getElementById('detail_btn_{order_id}').click();">
                            üì¶ {order['order_name']}
                        </h2>
                        <p style="color: #95a5a6; margin: 5px 0 0 0; font-size: 0.9rem;">
                            ID: #{order_id} ‚Ä¢ {order_type.upper()}
                        </p>
                    </div>
                    <div style="
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-weight: 700;
                        font-size: 0.9rem;
                        color: white;
                        background: {status_color};
                        box-shadow: 0 4px 15px {status_color}44;
                    ">
                        {status_text}
                    </div>
                </div>
                
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                <div style="
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
                    gap: 15px;
                    margin: 20px 0;
                ">
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(0,212,255,0.1)'; this.style.borderColor='#00d4ff';"
                       onmouseout="this.style.background='rgba(255,255,255,0.05)'; this.style.borderColor='rgba(255,255,255,0.1)';">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üí∞ –ü—Ä–∏–±—ã–ª—å</div>
                        <div style="color: {profit_color}; font-size: 1.4rem; font-weight: 700;">${profit:,.0f}</div>
                    </div>
                    
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</div>
                        <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{order_date}</div>
                    </div>
                    
                    <div style="
                        background: rgba(255,255,255,0.05);
                        padding: 15px;
                        border-radius: 12px;
                        text-align: center;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                        <div style="color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;">üöö –î–æ—Å—Ç–∞–≤–∫–∞</div>
                        <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{expected_date}</div>
                    </div>
                    
                    {"<div style='background: rgba(255,255,255,0.05); padding: 15px; border-radius: 12px; text-align: center; border: 1px solid rgba(255,255,255,0.1);'><div style='color: #95a5a6; font-size: 0.8rem; text-transform: uppercase; margin-bottom: 8px;'>üìä –ü–æ–∑–∏—Ü–∏–π</div><div style='color: #ecf0f1; font-size: 1.2rem; font-weight: 600;'>" + str(int(order.get('total_items', 1))) + "</div></div>" if order_type == "complex" and 'total_items' in order else ""}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # –¢–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3, col4 = st.columns([2, 2, 2, 2])
            
            with col1:
                if st.button(f"üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"detail_btn_{order_id}", use_container_width=True):
                    st.session_state[f'show_details_{order_id}'] = not st.session_state.get(f'show_details_{order_id}', False)
                    st.rerun()
            
            with col2:
                if st.button(f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", key=f"manage_{order_id}_{order_type}", use_container_width=True):
                    st.session_state[f'show_management_{order_id}'] = not st.session_state.get(f'show_management_{order_id}', False)
                    st.rerun()
            
            with col3:
                # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if status == "pending":
                    if st.button(f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", key=f"quick_deliver_{order_id}", use_container_width=True):
                        if update_order_status(order_id, st.session_state.user_id, "delivered"):
                            st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            time.sleep(0.5)
                            st.rerun()
                else:
                    if st.button(f"üîÑ –í–µ—Ä–Ω—É—Ç—å", key=f"quick_pending_{order_id}", use_container_width=True):
                        if update_order_status(order_id, st.session_state.user_id, "pending"):
                            st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            time.sleep(0.5)
                            st.rerun()
            
            with col4:
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{order_id}_{order_type}", use_container_width=True):
                    st.session_state[f'confirm_delete_{order_id}'] = True
                    st.rerun()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
            if st.session_state.get(f'show_details_{order_id}', False):
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                    border-radius: 15px;
                    padding: 20px;
                    margin: 15px 0;
                    border: 1px solid #00d4ff;
                    box-shadow: 0 5px 20px rgba(0,212,255,0.2);
                ">
                    <h3 style="color: #00d4ff; margin-bottom: 15px;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</h3>
                </div>
                """, unsafe_allow_html=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                if order_type == "complex":
                    show_order_details(order_id)
                else:
                    detail_col1, detail_col2 = st.columns(2)
                    with detail_col1:
                        st.info(f"üì¶ **–¢–æ–≤–∞—Ä:** {order['order_name']}")
                        st.info(f"üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {order.get('quantity', 'N/A')}")
                        st.info(f"üí∞ **–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:** ${order.get('price', 0):.0f}")
                    with detail_col2:
                        st.info(f"üí∏ **–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${order.get('cost', 0):.0f}")
                        st.info(f"üìà **–ü—Ä–∏–±—ã–ª—å:** ${profit:.0f}")
                        st.info(f"üöö **–î–æ—Å—Ç–∞–≤–∫–∞:** {order.get('delivery_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
            if st.session_state.get(f'show_management_{order_id}', False):
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                    border-radius: 15px;
                    padding: 20px;
                    margin: 15px 0;
                    border: 1px solid #f39c12;
                    box-shadow: 0 5px 20px rgba(243,156,18,0.2);
                ">
                    <h3 style="color: #f39c12; margin-bottom: 15px;">‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º #{order_id}</h3>
                </div>
                """, unsafe_allow_html=True)
                
                mgmt_col1, mgmt_col2, mgmt_col3 = st.columns(3)
                
                with mgmt_col1:
                    st.subheader("üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
                    new_delivery_date = st.date_input(
                        "–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:",
                        value=pd.to_datetime(order['expected_delivery_date']).date() if order['expected_delivery_date'] else None,
                        key=f"delivery_date_{order_id}"
                    )
                    if st.button("üíæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", key=f"update_date_{order_id}"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
                        st.success("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                
                with mgmt_col2:
                    st.subheader("üìã –°—Ç–∞—Ç—É—Å")
                    current_status_idx = 0 if status == "pending" else 1
                    new_status = st.selectbox(
                        "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                        ["pending", "delivered"],
                        index=current_status_idx,
                        key=f"status_mgmt_{order_id}",
                        format_func=lambda x: "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏" if x == "pending" else "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                    )
                    if st.button("ÔøΩ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"change_status_{order_id}"):
                        if update_order_status(order_id, new_status):
                            st.success("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!")
                            st.rerun()
                
                with mgmt_col3:
                    st.subheader("üö® –î–µ–π—Å—Ç–≤–∏—è")
                    if st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", key=f"notify_{order_id}"):
                        st.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    
                    if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", key=f"export_{order_id}"):
                        st.info("üìÑ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            if st.session_state.get(f'confirm_delete_{order_id}', False):
                st.error("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**")
                delete_col1, delete_col2, delete_col3 = st.columns([1, 1, 2])
                
                with delete_col1:
                    if st.button("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"confirm_yes_{order_id}"):
                        if delete_order(order_id, st.session_state.user_id):
                            st.success("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!")
                            st.session_state[f'confirm_delete_{order_id}'] = False
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
                with delete_col2:
                    if st.button("‚úÖ –û—Ç–º–µ–Ω–∞", key=f"confirm_no_{order_id}"):
                        st.session_state[f'confirm_delete_{order_id}'] = False
                        st.rerun()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
            if st.session_state.get(f'edit_mode_{order_id}', False):
                show_edit_order_form(order_id, st.session_state.user_id)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            st.markdown("<hr style='border: 1px solid rgba(255,255,255,0.1); margin: 30px 0;'>", unsafe_allow_html=True)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            st.markdown("<hr style='margin: 30px 0; border: none; height: 1px; background: linear-gradient(90deg, transparent, #dee2e6, transparent);'>", unsafe_allow_html=True)
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        total_profit = df['profit'].sum()
        pending_count = len(df[df['status'] == 'pending'])
        delivered_count = len(df[df['status'] == 'delivered']) 
        delayed_count = len([oid for oid in df['id'] if oid in delayed_ids])
        
        with col1:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #28a745;">
                <h3 style="color: #28a745; margin: 0; font-size: 2rem;">üí∞ ${total_profit:,.0f}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #ffc107;">
                <h3 style="color: #ffc107; margin: 0; font-size: 2rem;">‚è≥ {pending_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–í –æ–∂–∏–¥–∞–Ω–∏–∏</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #17a2b8;">
                <h3 style="color: #17a2b8; margin: 0; font-size: 2rem;">‚úÖ {delivered_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="stat-card" style="border-left: 4px solid #dc3545;">
                <h3 style="color: #dc3545; margin: 0; font-size: 2rem;">‚ö†Ô∏è {delayed_count}</h3>
                <p style="color: #6c757d; margin: 5px 0 0 0; font-weight: 600;">–ó–∞–¥–µ—Ä–∂–∞–Ω–æ</p>
            </div>
            """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        if delayed_count > 0:
            st.markdown("### üö® –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–¥–µ—Ä–∂–∫–∞–º")
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                if st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type="primary", use_container_width=True):
                    notifications_sent = send_delay_notifications(st.session_state.user_id)
                    if notifications_sent > 0:
                        st.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        st.info("‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
            with col2:
                st.warning(f"–£ –≤–∞—Å {delayed_count} –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏.")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        st.exception(e)
    
    finally:
        conn.close()

def show_simple_order_history(order_type):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); 
        padding: 30px; 
        border-radius: 20px; 
        margin-bottom: 30px; 
        text-align: center;
        box-shadow: 0 8px 30px rgba(0,0,0,0.3);
    ">
        <h1 style="color: #00d4ff; margin: 0; font-size: 2.2rem; font-weight: 700;">
            üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ - {order_type.upper()}
        </h1>
        <p style="color: rgba(255,255,255,0.7); margin: 10px 0 0 0; font-size: 1.1rem;">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if order_type == "single":
            query = '''
                SELECT o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date,
                       oi.quantity, oi.sale_price, oi.cost_price,
                       (oi.sale_price - oi.cost_price) * oi.quantity as profit
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "single"
                ORDER BY o.created_at DESC
            '''
        else:  # complex
            query = '''
                SELECT o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date,
                       COUNT(oi.id) as item_count,
                       SUM(oi.sale_price * oi.quantity) as total_sale,
                       SUM(oi.cost_price * oi.quantity) as total_cost,
                       SUM((oi.sale_price - oi.cost_price) * oi.quantity) as profit
                FROM orders o
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.user_id = ? AND o.order_type = "complex"
                GROUP BY o.id, o.order_name, o.status, o.created_at, o.expected_delivery_date
                ORDER BY o.created_at DESC
            '''
        
        cursor.execute(query, (st.session_state.user_id,))
        orders = cursor.fetchall()
        
        if not orders:
            st.markdown("""
            <div style="
                text-align: center;
                padding: 60px 40px;
                background: rgba(255,255,255,0.05);
                border-radius: 20px;
                margin: 40px 0;
                border: 2px dashed rgba(255,255,255,0.2);
            ">
                <h3 style="color: #95a5a6; margin-bottom: 20px;">üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p style="color: #7f8c8d;">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        for order in orders:
            order_id = order[0]
            order_name = order[1]
            status = order[2]
            created_at = order[3]
            expected_delivery = order[4]
            
            # –°—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
            if status == "delivered":
                status_text = "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                status_color = "#27ae60"
            elif status == "pending":
                status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                status_color = "#f39c12"
            else:
                status_text = "‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∞–Ω"
                status_color = "#e74c3c"
            
            # –ü—Ä–∏–±—ã–ª—å –∏ –µ–µ —Ü–≤–µ—Ç
            profit = order[-1] if order[-1] else 0
            profit_color = "#27ae60" if profit > 0 else "#e74c3c"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            order_date = pd.to_datetime(created_at).strftime('%d.%m.%Y') if created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            delivery_date = pd.to_datetime(expected_delivery).strftime('%d.%m.%Y') if expected_delivery else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π
            details_key = f"details_{order_id}"
            if details_key not in st.session_state:
                st.session_state[details_key] = False
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                border: 1px solid rgba(255,255,255,0.1);
                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            ">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h3 style="
                            color: #00d4ff; 
                            margin: 0; 
                            font-size: 1.4rem; 
                            font-weight: 600;
                            cursor: pointer;
                        " onclick="document.getElementById('detail_btn_{order_id}').click();">
                            {'üì¶' if order_type == 'single' else 'üìã'} {order_name}
                        </h3>
                        <p style="color: #95a5a6; margin: 5px 0 0 0; font-size: 0.9rem;">
                            {order_type.upper()}
                        </p>
                    </div>
                    <div style="
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-weight: 600;
                        font-size: 0.9rem;
                        color: white;
                        background: {status_color};
                        box-shadow: 0 4px 15px {status_color}44;
                    ">
                        {status_text}
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π (—Å–∫—Ä—ã—Ç–∞—è)
            if st.button("üëÅÔ∏è", key=f"detail_btn_{order_id}", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"):
                st.session_state[details_key] = not st.session_state[details_key]
                st.rerun()
            
            # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã)
            if st.session_state[details_key]:
                with st.container():
                    st.markdown(f"""
                    <div style="
                        background: rgba(255,255,255,0.05);
                        border-radius: 12px;
                        padding: 20px;
                        margin: 10px 0 20px 0;
                        border: 1px solid rgba(255,255,255,0.1);
                    ">
                    """, unsafe_allow_html=True)
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üí∞ –ü–†–ò–ë–´–õ–¨</div>
                            <div style="color: {profit_color}; font-size: 1.4rem; font-weight: 700;">${profit:.2f}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üìÖ –î–ê–¢–ê –ó–ê–ö–ê–ó–ê</div>
                            <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{order_date}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col3:
                        st.markdown(f"""
                        <div style="text-align: center; padding: 15px;">
                            <div style="color: #95a5a6; font-size: 0.8rem; margin-bottom: 8px;">üöö –î–û–°–¢–ê–í–ö–ê</div>
                            <div style="color: #ecf0f1; font-size: 1.2rem; font-weight: 600;">{delivery_date}</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
                    st.markdown("### üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞–∫–∞–∑–∞
                    cursor.execute('''
                        SELECT oi.product_name, oi.quantity, oi.cost_price, oi.sale_price, 
                               oi.weight, oi.item_delivery_type, oi.delivery_cost,
                               (oi.sale_price - oi.cost_price) * oi.quantity as item_profit
                        FROM order_items oi
                        WHERE oi.order_id = ?
                    ''', (order_id,))
                    
                    order_items = cursor.fetchall()
                    
                    if order_items:
                        for i, item in enumerate(order_items):
                            item_name, item_qty, item_cost, item_sale, item_weight, item_delivery_type, item_delivery_cost, item_profit = item
                            
                            # –¶–≤–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ç–æ–≤–∞—Ä–∞
                            item_profit_color = "#27ae60" if item_profit > 0 else "#e74c3c"
                            
                            st.markdown(f"""
                            <div style="
                                background: rgba(255,255,255,0.03);
                                border-radius: 8px;
                                padding: 15px;
                                margin: 10px 0;
                                border: 1px solid rgba(255,255,255,0.1);
                            ">
                                <h4 style="color: #00d4ff; margin: 0 0 10px 0;">üì¶ {item_name}</h4>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–ö–û–õ–ò–ß–ï–°–¢–í–û</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{item_qty} —à—Ç.</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_cost:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–¶–ï–ù–ê –ü–†–û–î–ê–ñ–ò</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_sale:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–í–ï–°</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{item_weight:.2f} –∫–≥</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–î–û–°–¢–ê–í–ö–ê</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">{'‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç' if item_delivery_type == 'airplane' else 'üöõ –ú–∞—à–∏–Ω–∞'}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–ê–í–ö–ò</div>
                                        <div style="color: #ecf0f1; font-weight: 600;">${item_delivery_cost:.2f}</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <div style="color: #95a5a6; font-size: 0.7rem; margin-bottom: 4px;">–ü–†–ò–ë–´–õ–¨</div>
                                        <div style="color: {item_profit_color}; font-weight: 700;">${item_profit:.2f}</div>
                                    </div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    st.markdown("### üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if status == "pending":
                            if st.button(f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º", key=f"deliver_{order_id}", use_container_width=True):
                                if update_order_status(order_id, st.session_state.user_id, "delivered"):
                                    st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    st.rerun()
                    
                    with col2:
                        edit_key = f'edit_mode_{order_id}'
                        if edit_key not in st.session_state:
                            st.session_state[edit_key] = False
                        
                        if not st.session_state[edit_key]:
                            if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{order_id}", use_container_width=True):
                                st.session_state[edit_key] = True
                                st.rerun()
                        else:
                            if st.button(f"ÔøΩ –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cancel_edit_{order_id}", use_container_width=True):
                                st.session_state[edit_key] = False
                                st.rerun()
                    
                    with col3:
                        if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_{order_id}", use_container_width=True):
                            if delete_order(order_id, st.session_state.user_id):
                                st.success("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                    
                    st.markdown("</div>", unsafe_allow_html=True)
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    finally:
        conn.close()

def show_order_details(order_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    st.subheader(f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_query = '''
        SELECT order_name, total_payment, created_at 
        FROM orders 
        WHERE id = ?
    '''
    order_info = pd.read_sql_query(order_query, conn, params=(order_id,))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    items_query = '''
        SELECT product_name, quantity, cost_price, sale_price, weight, 
               delivery_cost, total_cost, item_delivery_type
        FROM order_items 
        WHERE order_id = ?
    '''
    items_df = pd.read_sql_query(items_query, conn, params=(order_id,))
    conn.close()
    
    if not order_info.empty:
        order_data = order_info.iloc[0]
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", order_data['order_name'])
        with col2:
            st.metric("üí∞ –û–±—â–∏–π –ø–ª–∞—Ç–µ–∂", f"${order_data['total_payment']:.2f}")
        with col3:
            st.metric("üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", order_data['created_at'][:10])
        
        if not items_df.empty:
            st.write("**–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:**")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
            items_df['delivery_type_display'] = items_df['item_delivery_type'].apply(
                lambda x: "–°–∞–º–æ–ª–µ—Ç ($7/–∫–≥)" if x == "airplane" else "–ú–∞—à–∏–Ω–∞ ($0.68/–∫–≥)"
            )
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = {
                'product_name': '–¢–æ–≤–∞—Ä',
                'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'cost_price': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)',
                'sale_price': '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ($)',
                'weight': '–í–µ—Å (–∫–≥)',
                'delivery_type_display': '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏',
                'delivery_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ($)',
                'total_cost': '–ò—Ç–æ–≥–æ ($)'
            }
            
            items_display = items_df[list(display_columns.keys())].rename(columns=display_columns)
            st.dataframe(items_display, use_container_width=True)

def show_analytics():
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("üìÖ **–ü–µ—Ä–∏–æ–¥**")
        use_date_filter = st.checkbox("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥—É")
        
        start_date = None
        end_date = None
        
        if use_date_filter:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=None)
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=None)
    
    with col2:
        st.write("üöö **–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏**")
        delivery_method = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏",
            options=['all', 'airplane', 'truck'],
            format_func=lambda x: {
                'all': '–í—Å–µ –º–µ—Ç–æ–¥—ã',
                'airplane': '–°–∞–º–æ–ª–µ—Ç',
                'truck': '–ú–∞—à–∏–Ω–∞'
            }[x],
            index=0
        )
    
    with col3:
        st.write(" ")  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.rerun()
    
    st.divider()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    analytics = get_analytics(
        st.session_state.user_id, 
        start_date=start_date, 
        end_date=end_date, 
        delivery_method=delivery_method
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        metrics_data = {
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', 
                          '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–ú–∞—Ä–∂–∞ (%)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"${analytics['total_revenue']:.2f}",
                f"${analytics['total_cost_price']:.2f}",
                f"${analytics['total_delivery_costs']:.2f}",
                f"${analytics['total_costs']:.2f}",
                f"${analytics['profit']:.2f}",
                f"{analytics['margin']:.1f}%",
                f"{analytics['profitability']:.1f}%"
            ]
        }
        
        metrics_df = pd.DataFrame(metrics_data)
        st.dataframe(metrics_df, use_container_width=True, hide_index=True)
    
    with col2:
        st.subheader("üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        planning_data = {
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞', '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'],
            '–°—É–º–º–∞': [
                f"${analytics['profit']:.2f}",
                f"${analytics['financial_cushion']:.2f}",
                f"${analytics['personal_expenses']:.2f}"
            ],
            '–ü—Ä–æ—Ü–µ–Ω—Ç': [
                "100%",
                f"{analytics['cushion_percent']:.1f}%",
                f"{100 - analytics['cushion_percent']:.1f}%"
            ]
        }
        
        planning_df = pd.DataFrame(planning_data)
        st.dataframe(planning_df, use_container_width=True, hide_index=True)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    if analytics['total_revenue'] > 0:
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
            fig_pie = go.Figure(data=[go.Pie(
                labels=['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', '–ü—Ä–∏–±—ã–ª—å'],
                values=[analytics['total_cost_price'], analytics['total_delivery_costs'], analytics['profit']],
                hole=0.3
            )])
            fig_pie.update_layout(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏", height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            fig_bar = go.Figure(data=[go.Bar(
                x=['–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞', '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'],
                y=[analytics['financial_cushion'], analytics['personal_expenses']],
                marker_color=['lightblue', 'lightgreen']
            )])
            fig_bar.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏", height=400)
            st.plotly_chart(fig_bar, use_container_width=True)
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
        st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
        conn = sqlite3.connect('business_manager.db')
        
        sales_query = '''
            SELECT DATE(o.created_at) as date, 
                   SUM(oi.total_cost) as daily_revenue,
                   SUM(oi.cost_price + oi.delivery_cost) as daily_costs,
                   SUM(oi.total_cost - oi.cost_price - oi.delivery_cost) as daily_profit
            FROM orders o
            JOIN order_items oi ON o.id = oi.order_id
            WHERE o.user_id = ?
            GROUP BY DATE(o.created_at)
            ORDER BY date
        '''
        
        sales_df = pd.read_sql_query(sales_query, conn, params=(st.session_state.user_id,))
        conn.close()
        
        if not sales_df.empty:
            fig_line = go.Figure()
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_revenue'], 
                                        mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞', line=dict(color='blue')))
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_costs'], 
                                        mode='lines+markers', name='–†–∞—Å—Ö–æ–¥—ã', line=dict(color='red')))
            fig_line.add_trace(go.Scatter(x=sales_df['date'], y=sales_df['daily_profit'], 
                                        mode='lines+markers', name='–ü—Ä–∏–±—ã–ª—å', line=dict(color='green')))
            
            fig_line.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", 
                                 xaxis_title="–î–∞—Ç–∞", yaxis_title="–°—É–º–º–∞ ($)", height=500)
            st.plotly_chart(fig_line, use_container_width=True)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"):
        report_data = generate_full_report(st.session_state.user_id)
        excel_data = export_to_excel(report_data, "full_analytics_report")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
            data=excel_data,
            file_name=f"analytics_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def show_inventory():
    st.title("üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º")
    
    tab1, tab2, tab3 = st.tabs(["–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–ª–∞–¥–∞", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ü–æ–∏—Å–∫"])
    
    with tab1:
        st.subheader("üì¶ –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–∞
        col1, col2 = st.columns([3, 1])
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–∫–ª–∞–¥", type="secondary", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞"):
                if st.session_state.get('confirm_clear_inventory', False):
                    deleted_count = clear_inventory(st.session_state.user_id)
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞")
                    st.session_state.confirm_clear_inventory = False
                    st.rerun()
                else:
                    st.session_state.confirm_clear_inventory = True
                    st.rerun()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        if st.session_state.get('confirm_clear_inventory', False):
            st.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", type="primary"):
                    deleted_count = clear_inventory(st.session_state.user_id)
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞")
                    st.session_state.confirm_clear_inventory = False
                    st.rerun()
            with col2:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                    st.session_state.confirm_clear_inventory = False
                    st.rerun()
        
        inventory_df = get_inventory(st.session_state.user_id)
        
        if not inventory_df.empty:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            col1, col2 = st.columns(2)
            with col1:
                sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", 
                                     ["product_name", "quantity", "created_at"])
            with col2:
                sort_order = st.selectbox("–ü–æ—Ä—è–¥–æ–∫:", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"])
            
            ascending = sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"
            inventory_df_sorted = inventory_df.sort_values(sort_by, ascending=ascending)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edited_df = st.data_editor(
                inventory_df_sorted[['product_name', 'quantity', 'link']],
                use_container_width=True,
                num_rows="dynamic"
            )
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
            low_stock_threshold = st.number_input("–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", min_value=1, value=5)
            low_stock = inventory_df[inventory_df['quantity'] <= low_stock_threshold]
            
            if not low_stock.empty:
                st.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:")
                st.dataframe(low_stock[['product_name', 'quantity']], use_container_width=True)
        else:
            st.info("–°–∫–ª–∞–¥ –ø—É—Å—Ç")
    
    with tab2:
        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥")
        
        with st.form("add_inventory_form"):
            product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", min_value=1, value=1)
            link = st.text_input("–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", placeholder="https://example.com/product")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            
            if submitted:
                if product_name and quantity > 0:
                    add_to_inventory(st.session_state.user_id, product_name, quantity, link)
                    st.success(f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥")
                else:
                    st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    with tab3:
        st.subheader("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        
        search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:")
        
        if search_term:
            search_results = search_inventory(st.session_state.user_id, search_term)
            
            if not search_results.empty:
                st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ç–æ–≤–∞—Ä–æ–≤:")
                for _, row in search_results.iterrows():
                    with st.expander(f"üì¶ {row['product_name']} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['quantity']})"):
                        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {row['quantity']}")
                        if row['link']:
                            st.write(f"**–°—Å—ã–ª–∫–∞:** [{row['link']}]({row['link']})")
                        st.write(f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {row['created_at']}")
            else:
                st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_smart_functions():
    st.title("üß† –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ë–∏–∑–Ω–µ—Å–∞")
    
    if business_ai is None:
        st.error("üö´ –ò–ò –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É ai_functions.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
        "ü§ñ –ò–ò –ß–∞—Ç-–ë–æ—Ç", 
        "üí∞ –£–º–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
        "üìä –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞", 
        "üö® –£–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã", 
        "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏", 
        "üì¶ –ê–≤—Ç–æ-–¥–æ–∑–∞–∫–∞–∑", 
        "üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
        "üèÜ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    ])
    
    # –ò–ò –ß–ê–¢-–ë–û–¢
    with tab1:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>ü§ñ –ò–ò –ë–∏–∑–Ω–µ—Å-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</h2>
            <p>–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ - –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!</p>
        </div>
        """, unsafe_allow_html=True)
        
        if business_chatbot is None:
            st.error("üö´ –ß–∞—Ç-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É chatbot.py")
        else:
            # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
            if "chat_history" not in st.session_state:
                st.session_state.chat_history = []
            
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
            user_question = st.text_input("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ:", 
                                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å? –ß—Ç–æ —Å –º–æ–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏?",
                                        key="user_question")
            
            # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary", key="chat_send_btn"):
                    if user_question.strip():
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
                        response = business_chatbot.generate_smart_response(st.session_state.get('user_id', 1), user_question)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.chat_history.append({
                            "user": user_question,
                            "bot": response,
                            "timestamp": datetime.now().strftime("%H:%M")
                        })
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                        st.session_state.user_question = ""
                        st.rerun()
            
            with col2:
                if st.button("üìä –°–≤–æ–¥–∫–∞", key="chat_summary_btn"):
                    summary = business_chatbot.get_quick_business_summary(st.session_state.get('user_id', 1))
                    st.session_state.chat_history.append({
                        "user": "–î–∞–π –±—ã—Å—Ç—Ä—É—é —Å–≤–æ–¥–∫—É –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
                        "bot": summary,
                        "timestamp": datetime.now().strftime("%H:%M")
                    })
                    st.rerun()
            
            with col3:
                if st.button("üí° –ë–∏–∑–Ω–µ—Å-—Å–æ–≤–µ—Ç", key="chat_business_tip_btn"):
                    tip = business_chatbot.get_business_tips()
                    st.session_state.chat_history.append({
                        "user": "–î–∞–π –±–∏–∑–Ω–µ—Å-—Å–æ–≤–µ—Ç",
                        "bot": tip,
                        "timestamp": datetime.now().strftime("%H:%M")
                    })
                    st.rerun()
            
            with col4:
                if st.button("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", key="chat_motivation_btn"):
                    quote = business_chatbot.get_motivational_quote()
                    st.session_state.chat_history.append({
                        "user": "–î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É",
                        "bot": quote,
                        "timestamp": datetime.now().strftime("%H:%M")
                    })
                    st.rerun()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            st.markdown("### üéØ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
            col5, col6, col7, col8 = st.columns(4)
            
            with col5:
                if st.button("üéØ –†—ã–Ω–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", key="chat_market_advice_btn"):
                    advice = business_chatbot.get_market_advice(st.session_state.get('user_id', 1))
                    st.session_state.chat_history.append({
                        "user": "–î–∞–π —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
                        "bot": advice,
                        "timestamp": datetime.now().strftime("%H:%M")
                    })
                    st.rerun()
            
            with col6:
                if st.button("üìÖ –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", key="chat_seasonal_advice_btn"):
                    seasonal = business_chatbot.get_seasonal_advice()
                    st.session_state.chat_history.append({
                        "user": "–î–∞–π —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
                        "bot": seasonal,
                        "timestamp": datetime.now().strftime("%H:%M")
                    })
                    st.rerun()
            
            with col7:
                if st.button("üöÄ –°–æ–≤–µ—Ç—ã —Ä–æ—Å—Ç–∞", key="chat_growth_advice_btn"):
                    if st.session_state.get('user_id'):
                        growth_advice = business_chatbot._get_growth_advice()
                        st.session_state.chat_history.append({
                            "user": "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å?",
                            "bot": growth_advice,
                            "timestamp": datetime.now().strftime("%H:%M")
                        })
                        st.rerun()
            
            with col8:
                if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", key="chat_clear_btn"):
                    st.session_state.chat_history = []
                    st.rerun()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            if st.session_state.chat_history:
                st.markdown("### üí¨ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
                
                for i, chat in enumerate(reversed(st.session_state.chat_history[-10:])):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    with st.container():
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        st.markdown(f"""
                        <div style="
                            background: #e3f2fd;
                            padding: 15px;
                            border-radius: 15px;
                            margin: 10px 0;
                            border-left: 4px solid #2196f3;
                            color: #333333;
                        ">
                            <strong style="color: #1976d2;">üë§ –í—ã ({chat['timestamp']}):</strong><br>
                            <span style="color: #333333;">{chat['user']}</span>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
                        st.markdown(f"""
                        <div style="
                            background: #f3e5f5;
                            padding: 15px;
                            border-radius: 15px;
                            margin: 10px 0;
                            border-left: 4px solid #9c27b0;
                            color: #333333;
                        ">
                            <strong style="color: #7b1fa2;">ü§ñ –ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:</strong><br>
                            <span style="color: #333333;">{chat['bot']}</span>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                st.info("üí° –ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º!")
    
    with tab2:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üí∞ –ò–ò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¶–µ–Ω—ã</h2>
            <p>–ü–æ–ª—É—á–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("price_recommendation"):
            col1, col2 = st.columns(2)
            
            with col1:
                product_name = st.text_input("üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
                cost_price = st.number_input("üíµ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", min_value=0.01, value=10.0, step=0.01)
            
            with col2:
                weight = st.number_input("‚öñÔ∏è –í–µ—Å (–∫–≥)", min_value=0.1, value=1.0, step=0.1)
                delivery_type = st.selectbox("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", 
                                           options=['truck', 'airplane'],
                                           format_func=lambda x: 'üöõ –ú–∞—à–∏–Ω–∞' if x == 'truck' else 'üõ©Ô∏è –°–∞–º–æ–ª–µ—Ç')
            
            if st.form_submit_button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", use_container_width=True):
                if product_name and cost_price > 0:
                    with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ..."):
                        recommendation = business_ai.smart_price_recommendation(
                            st.session_state.user_id, product_name, cost_price, weight, delivery_type
                        )
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.markdown("### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞", f"${recommendation['recommended_price']}")
                    with col2:
                        st.metric("‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"${recommendation['min_price']}")
                    with col3:
                        st.metric("‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"${recommendation['max_price']}")
                    with col4:
                        confidence_color = "üü¢" if recommendation['confidence'] > 0.8 else "üü°" if recommendation['confidence'] > 0.5 else "üî¥"
                        st.metric("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence_color} {recommendation['confidence']*100:.0f}%")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.markdown("---")
                    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    
                    info_col1, info_col2 = st.columns(2)
                    
                    with info_col1:
                        st.info(f"**üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {recommendation['reasoning']}")
                        st.success(f"**üìà –ú–∞—Ä–∂–∞:** {recommendation['profit_margin']:.1f}%")
                    
                    with info_col2:
                        trend_emoji = "üìà" if recommendation['market_trend'] == 'growing' else "üìâ" if recommendation['market_trend'] == 'declining' else "üìä"
                        st.info(f"**{trend_emoji} –¢—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞:** {recommendation['market_trend']}")
                        st.warning(f"**üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:** ${recommendation['delivery_cost']:.2f}")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    with tab2:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üìä –ò–ò –ü—Ä–æ–≥–Ω–æ–∑ –°–ø—Ä–æ—Å–∞</h2>
            <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            days_ahead = st.slider("üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–∏)", 7, 90, 30, key="forecast_days_slider")
            
            if st.button("üîÆ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True, key="create_forecast_btn"):
                with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø—Ä–æ—Å–∞..."):
                    forecasts = business_ai.demand_forecasting(st.session_state.user_id, days_ahead)
        
        with col2:
            st.markdown("### üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            show_confidence = st.checkbox("ÔøΩ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", key="show_confidence_checkbox")
            show_trends = st.checkbox("üìà –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã", key="show_trends_checkbox")
                
            if 'forecasts' in locals() and not forecasts.get('error'):
                st.markdown("### üìà –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
                
                for product, forecast in forecasts.items():
                    with st.expander(f"üì¶ {product}"):
                        metric_col1, metric_col2, metric_col3 = st.columns(3)
                        
                        with metric_col1:
                            st.metric("üéØ –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞", f"{forecast['forecasted_demand']:.1f} —à—Ç")
                        with metric_col2:
                            trend_emoji = "üìà" if forecast['trend'] == '—Ä–∞—Å—Ç—É—â–∏–π' else "üìâ" if forecast['trend'] == '–ø–∞–¥–∞—é—â–∏–π' else "üìä"
                            st.metric(f"{trend_emoji} –¢—Ä–µ–Ω–¥", forecast['trend'])
                        with metric_col3:
                            confidence_color = "üü¢" if forecast['confidence'] > 0.8 else "üü°" if forecast['confidence'] > 0.5 else "üî¥"
                            st.metric("üéØ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", f"{confidence_color} {forecast['confidence']*100:.0f}%")
                        
                        st.info(f"üìä –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {forecast['daily_average']:.2f} —à—Ç")
                        st.info(f"üìÖ –î–Ω–µ–π –≤ –∞–Ω–∞–ª–∏–∑–µ: {forecast['historical_days']}")
            elif 'forecasts' in locals() and forecasts.get('error'):
                st.warning(f"‚ö†Ô∏è {forecasts['error']}")
    
    with tab3:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üö® –£–º–Ω—ã–µ –ê–ª–µ—Ä—Ç—ã –°–∫–ª–∞–¥–∞</h2>
            <p>–ò–ò –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞", use_container_width=True, key="check_inventory_alerts_btn"):
            with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Å–∫–ª–∞–¥–µ..."):
                alerts = business_ai.smart_inventory_alerts(st.session_state.user_id)
            
            if alerts:
                for alert in alerts:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
                    if alert['type'] == 'critical':
                        color = "#ff4757"
                        icon = "üî¥"
                        border_color = "#ff3838"
                    elif alert['type'] == 'warning':
                        color = "#ffa502"
                        icon = "üü°"
                        border_color = "#ff9500"
                    elif alert['type'] == 'info':
                        color = "#3742fa"
                        icon = "üîµ"
                        border_color = "#2f3542"
                    else:  # stagnant
                        color = "#747d8c"
                        icon = "‚ö´"
                        border_color = "#57606f"
                    
                    st.markdown(f"""
                    <div style="
                        background: {color};
                        color: white;
                        padding: 15px;
                        border-radius: 10px;
                        margin-bottom: 10px;
                        border-left: 5px solid {border_color};
                    ">
                        <h4>{icon} {alert['message']}</h4>
                        <p><strong>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</strong> {alert['current_stock']} —à—Ç</p>
                        <p><strong>–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂:</strong> {alert['daily_rate']} —à—Ç/–¥–µ–Ω—å</p>
                        <p><strong>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {alert['recommended_action']}</p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.success("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ—Ç.")
    
    with tab4:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            color: #2c3e50;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üéØ –ò–ò –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ü—Ä–∏–±—ã–ª–∏</h2>
            <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏", use_container_width=True, key="get_profit_recommendations_btn"):
            with st.spinner("ü§ñ –ò–ò –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞..."):
                suggestions = business_ai.profit_optimization_suggestions(st.session_state.user_id)
            
            if not suggestions.get('error'):
                st.markdown("### üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò")
                
                for i, suggestion in enumerate(suggestions):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    type_icons = {
                        'focus_profitable': 'üéØ',
                        'improve_margin': 'üìà',
                        'optimize_delivery': 'üöõ',
                        'seasonal_planning': 'üìÖ',
                        'premium_focus': 'üíé'
                    }
                    
                    icon = type_icons.get(suggestion['type'], 'üí°')
                    
                    with st.expander(f"{icon} {suggestion['title']}"):
                        st.info(suggestion['description'])
                        st.success(f"**üéØ –î–µ–π—Å—Ç–≤–∏–µ:** {suggestion['action']}")
                        
                        if 'products' in suggestion:
                            st.write("**üì¶ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã:**")
                            for product in suggestion['products'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                st.write(f"‚Ä¢ {product}")
            else:
                st.warning(f"‚ö†Ô∏è {suggestions['error']}")
    
    with tab5:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –î–æ–∑–∞–∫–∞–∑</h2>
            <p>–ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Å–∫–ª–∞–¥–∞</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–∑–∞–∫–∞–∑–∞", use_container_width=True, key="get_reorder_recommendations_btn"):
            with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–∞..."):
                recommendations = business_ai.automated_reorder_suggestions(st.session_state.user_id)
            
            if recommendations:
                st.markdown("### üéØ –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–∑–∞–∫–∞–∑–∞")
                
                for rec in recommendations:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
                    if rec['urgency_level'] == '–ö–†–ò–¢–ò–ß–ù–û':
                        card_color = "#ff4757"
                        urgency_icon = "üî¥"
                    elif rec['urgency_level'] == '–í–´–°–û–ö–ê–Ø':
                        card_color = "#ffa502"
                        urgency_icon = "üü°"
                    else:
                        card_color = "#3742fa"
                        urgency_icon = "üîµ"
                    
                    st.markdown(f"""
                    <div style="
                        background: {card_color};
                        color: white;
                        padding: 20px;
                        border-radius: 15px;
                        margin-bottom: 15px;
                    ">
                        <h3>{urgency_icon} {rec['product']} - {rec['urgency_level']}</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                            <div>
                                <strong>üì¶ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</strong><br>{rec['current_stock']} —à—Ç
                            </div>
                            <div>
                                <strong>üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑:</strong><br>{rec['recommended_quantity']} —à—Ç
                            </div>
                            <div>
                                <strong>‚è∞ –î–Ω–∏ –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è:</strong><br>{rec['days_until_empty']:.1f} –¥–Ω–µ–π
                            </div>
                            <div>
                                <strong>üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:</strong><br>${rec['estimated_profit']:.2f}
                            </div>
                        </div>
                        <p style="margin-top: 15px;"><strong>üìä –ú–∞—Ä–∂–∞:</strong> {rec['profit_margin']:.1f}% | <strong>üìà –ü—Ä–æ–¥–∞–∂–∏:</strong> {rec['daily_sales_rate']:.2f} —à—Ç/–¥–µ–Ω—å</p>
                        <p style="background: rgba(255,255,255,0.2); padding: 10px; border-radius: 8px; margin-top: 10px;">
                            <strong>üí° –ü—Ä–∏—á–∏–Ω—ã:</strong> {', '.join(rec['reasons'])}
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–æ–∑–∞–∫–∞–∑—É –ø–æ–∫–∞ –Ω–µ—Ç")
    
    with tab6:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            color: #2c3e50;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–π –ê–Ω–∞–ª–∏–∑</h2>
            <p>–ò–ò –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã", use_container_width=True, key="analyze_trends_btn"):
            with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã..."):
                trends = business_ai.market_trend_analysis(st.session_state.user_id)
            
            if not trends.get('error'):
                # –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω
                if 'price_trends' in trends and trends['price_trends']:
                    st.markdown("### üí∞ –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
                    
                    for product, trend_data in trends['price_trends'].items():
                        trend_icon = "üìà" if trend_data['trend'] == '—Ä–∞—Å—Ç–µ—Ç' else "üìâ" if trend_data['trend'] == '–ø–∞–¥–∞–µ—Ç' else "üìä"
                        
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("üì¶ –¢–æ–≤–∞—Ä", product)
                        with col2:
                            st.metric(f"{trend_icon} –¢—Ä–µ–Ω–¥", trend_data['trend'])
                        with col3:
                            st.metric("üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${trend_data['current_price']}")
                        with col4:
                            change_color = "normal" if abs(trend_data['change_amount']) < 1 else "normal"
                            st.metric("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"${trend_data['change_amount']:+.2f}")
                
                # –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–æ–≤
                if 'volume_trend' in trends:
                    st.markdown("---")
                    st.markdown("### üìä –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂")
                    
                    vol_trend = trends['volume_trend']
                    trend_icon = "üìà" if vol_trend['direction'] == '—Ä–∞—Å—Ç–µ—Ç' else "üìâ" if vol_trend['direction'] == '–ø–∞–¥–∞–µ—Ç' else "üìä"
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric(f"{trend_icon} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", vol_trend['direction'])
                    with col2:
                        st.metric("üìà –ù–µ–¥–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", f"{vol_trend['weekly_change']:+.2f} —à—Ç")
                    with col3:
                        st.metric("üéØ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞", vol_trend['trend_strength'])
                
                # –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if 'seasonal_pattern' in trends:
                    st.markdown("---")
                    st.markdown("### üìÖ –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
                    
                    seasonal = trends['seasonal_pattern']
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üî• –ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü", seasonal['peak_month'])
                    with col2:
                        st.metric("üìâ –°–ª–∞–±—ã–π –º–µ—Å—è—Ü", seasonal['low_month'])
                    with col3:
                        seasonality_strength = "–í—ã—Å–æ–∫–∞—è" if seasonal['seasonality_strength'] > 0.5 else "–°—Ä–µ–¥–Ω—è—è" if seasonal['seasonality_strength'] > 0.2 else "–ù–∏–∑–∫–∞—è"
                        st.metric("üåä –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", seasonality_strength)
                
                # –¢—Ä–µ–Ω–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                if 'delivery_trend' in trends:
                    st.markdown("---")
                    st.markdown("### üöö –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
                    
                    delivery = trends['delivery_trend']
                    st.info(f"üí° **–ò–Ω—Å–∞–π—Ç:** {delivery['recommendation']}")
                    st.success(f"üéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥:** {delivery['preferred_method']}")
            else:
                st.warning(f"‚ö†Ô∏è {trends['error']}")
    
    with tab7:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
        ">
            <h2>üèÜ –ò–ò –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –ê–Ω–∞–ª–∏–∑</h2>
            <p>–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö —Ü–µ–Ω</p>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("competitor_analysis"):
            col1, col2 = st.columns(2)
            
            with col1:
                product_name = st.text_input("üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            
            with col2:
                your_price = st.number_input("üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞ ($)", min_value=0.01, value=20.0, step=0.01)
            
            if st.form_submit_button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", use_container_width=True):
                if product_name and your_price > 0:
                    with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é..."):
                        analysis = business_ai.smart_competitor_analysis(
                            st.session_state.user_id, product_name, your_price
                        )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                    score = analysis['competitive_score']
                    if score >= 8:
                        score_color = "#2ecc71"  # –ó–µ–ª–µ–Ω—ã–π
                        score_emoji = "üü¢"
                    elif score >= 6:
                        score_color = "#f39c12"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                        score_emoji = "üü°"
                    else:
                        score_color = "#e74c3c"  # –ö—Ä–∞—Å–Ω—ã–π
                        score_emoji = "üî¥"
                    
                    st.markdown(f"""
                    <div style="
                        background: {score_color};
                        color: white;
                        padding: 25px;
                        border-radius: 15px;
                        margin-bottom: 20px;
                        text-align: center;
                    ">
                        <h2>{score_emoji} –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {score}/10</h2>
                        <h3>–ü–æ–∑–∏—Ü–∏—è: {analysis['price_position']}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("üéØ –í–∞—à–∞ —Ü–µ–Ω–∞", f"${analysis['your_price']:.2f}")
                    
                    with col2:
                        if 'market_average' in analysis:
                            st.metric("üìä –°—Ä–µ–¥–Ω—è—è –ø–æ —Ä—ã–Ω–∫—É", f"${analysis['market_average']:.2f}")
                    
                    with col3:
                        if 'price_difference' in analysis:
                            diff_color = "normal" if abs(analysis['price_difference']) < 2 else "inverse"
                            st.metric("üí± –†–∞–∑–Ω–∏—Ü–∞", f"${analysis['price_difference']:+.2f}", delta_color=diff_color)
                    
                    st.markdown("---")
                    st.success(f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:** {analysis['recommendation']}")
                    st.info(f"üéØ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** {analysis['suggested_action']}")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –≤–Ω–∏–∑—É
    st.markdown("---")
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin-top: 30px;
    ">
        <h3>ü§ñ –û —Å–∏—Å—Ç–µ–º–µ –ò–ò</h3>
        <p>–ù–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã—è–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 
        –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ 
        –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.</p>
        <p><strong>üí° –°–æ–≤–µ—Ç:</strong> –ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —É –≤–∞—Å –µ—Å—Ç—å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò!</p>
    </div>
    """, unsafe_allow_html=True)

def show_settings():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    tab1, tab2, tab3 = st.tabs(["üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ", "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üíæ –î–∞–Ω–Ω—ã–µ"])
    
    with tab1:
        st.markdown("""
        <div class="card">
            <h3 style="color: var(--accent-color); margin-bottom: 1rem;">üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('SELECT financial_cushion_percent FROM settings WHERE user_id = ?', 
                      (st.session_state.user_id,))
        current_settings = cursor.fetchone()
        current_cushion = current_settings[0] if current_settings else 20.0
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("financial_settings"):
                st.markdown("#### üõ°Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞")
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–∏–±—ã–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
                
                cushion_percent = st.slider(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏:",
                    min_value=0.0,
                    max_value=50.0,
                    value=current_cushion,
                    step=0.5,
                    help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-25% –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
                )
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                analytics = get_analytics(st.session_state.user_id)
                if analytics['profit'] > 0:
                    projected_cushion = analytics['profit'] * (cushion_percent / 100)
                    projected_personal = analytics['profit'] - projected_cushion
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("üõ°Ô∏è –†–µ–∑–µ—Ä–≤ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å", f"${projected_cushion:.2f}")
                    with col2:
                        st.metric("üè† –ù–∞ –ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞–Ω–µ—Ç—Å—è", f"${projected_personal:.2f}")
                
                submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)
                
                if submitted:
                    cursor.execute('''
                        UPDATE settings 
                        SET financial_cushion_percent = ? 
                        WHERE user_id = ?
                    ''', (cushion_percent, st.session_state.user_id))
                    conn.commit()
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        st.markdown("""
        <div class="card">
            <h3 style="color: var(--accent-color); margin-bottom: 1rem;">üöö –¢–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã
        current_rates = get_delivery_rates(st.session_state.user_id)
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("delivery_rates_settings"):
                st.markdown("#### üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º")
                st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("##### üõ©Ô∏è –°–∞–º–æ–ª–µ—Ç")
                    airplane_rate = st.number_input(
                        "–¶–µ–Ω–∞ –∑–∞ –∫–≥ (—Å–∞–º–æ–ª–µ—Ç):",
                        min_value=0.01,
                        max_value=100.0,
                        value=float(current_rates['airplane']),
                        step=0.01,
                        format="%.2f",
                        help="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–æ–ª–µ—Ç–æ–º –∑–∞ 1 –∫–≥"
                    )
                
                with col2:
                    st.markdown("##### üöõ –ú–∞—à–∏–Ω–∞")
                    truck_rate = st.number_input(
                        "–¶–µ–Ω–∞ –∑–∞ –∫–≥ (–º–∞—à–∏–Ω–∞):",
                        min_value=0.01,
                        max_value=100.0,
                        value=float(current_rates['truck']),
                        step=0.01,
                        format="%.2f",
                        help="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—à–∏–Ω–æ–π –∑–∞ 1 –∫–≥"
                    )
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
                st.markdown("##### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤")
                sample_weight = st.slider("–ü—Ä–∏–º–µ—Ä –≤–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–∫–≥):", 1, 50, 10)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üõ©Ô∏è –°–∞–º–æ–ª–µ—Ç", f"${airplane_rate * sample_weight:.2f}")
                with col2:
                    st.metric("üöõ –ú–∞—à–∏–Ω–∞", f"${truck_rate * sample_weight:.2f}") 
                with col3:
                    difference = abs(airplane_rate - truck_rate) * sample_weight
                    st.metric("üí∞ –†–∞–∑–Ω–∏—Ü–∞", f"${difference:.2f}")
                
                submitted_rates = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã", use_container_width=True)
                
                if submitted_rates:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    cursor.execute('''
                        UPDATE settings 
                        SET airplane_rate = ?, truck_rate = ?
                        WHERE user_id = ?
                    ''', (airplane_rate, truck_rate, st.session_state.user_id))
                    
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                    if cursor.rowcount == 0:
                        cursor.execute('''
                            INSERT INTO settings (user_id, airplane_rate, truck_rate, financial_cushion_percent)
                            VALUES (?, ?, ?, 20.0)
                        ''', (st.session_state.user_id, airplane_rate, truck_rate))
                    
                    conn.commit()
                    st.success("‚úÖ –¢–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        conn.close()
    
    with tab2:
        st.markdown("""
        <div class="card">
            <h3 style="color: var(--accent-color); margin-bottom: 1rem;">üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT email_notifications, smtp_server, smtp_port, email_username, email_password,
                   notify_new_orders, notify_low_stock, notify_daily_report
            FROM settings WHERE user_id = ?
        ''', (st.session_state.user_id,))
        smtp_settings = cursor.fetchone()
        
        current_notifications = smtp_settings[0] if smtp_settings else False
        current_server = smtp_settings[1] if smtp_settings else "smtp.gmail.com"
        current_port = smtp_settings[2] if smtp_settings else 587
        current_username = smtp_settings[3] if smtp_settings else ""
        current_password = smtp_settings[4] if smtp_settings else ""
        current_notify_orders = smtp_settings[5] if smtp_settings and len(smtp_settings) > 5 else True
        current_notify_stock = smtp_settings[6] if smtp_settings and len(smtp_settings) > 6 else True
        current_notify_daily = smtp_settings[7] if smtp_settings and len(smtp_settings) > 7 else False
        
        with st.container():
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            with st.form("email_settings"):
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                email_server = current_server
                email_port = current_port
                email_username = current_username
                email_password = current_password
                provider = "Gmail"
                
                enable_notifications = st.checkbox(
                    "üîî –í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                    value=current_notifications,
                    help="–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –±–∏–∑–Ω–µ—Å–µ"
                )
                
                if enable_notifications:
                    st.markdown("#### üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP")
                    
                    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                    provider = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ email:",
                        ["Gmail", "–Ø–Ω–¥–µ–∫—Å", "Mail.ru", "Outlook", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"]
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    if provider == "Gmail":
                        default_server = "smtp.gmail.com"
                        default_port = 587
                        st.info("üí° –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞")
                        st.markdown("""
                        **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gmail:**
                        1. –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                        2. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TLS (–ø–æ—Ä—Ç 587) –∏–ª–∏ SSL (–ø–æ—Ä—Ç 465)
                        """)
                    elif provider == "–Ø–Ω–¥–µ–∫—Å":
                        default_server = "smtp.yandex.ru"
                        default_port = 587
                        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã")
                    elif provider == "Mail.ru":
                        default_server = "smtp.mail.ru"
                        default_port = 587
                        st.info("üí° –í–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    elif provider == "Outlook":
                        default_server = "smtp-mail.outlook.com"
                        default_port = 587
                        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å Microsoft –∞–∫–∫–∞—É–Ω—Ç–∞")
                    else:
                        default_server = current_server
                        default_port = current_port
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        email_server = st.text_input(
                            "SMTP —Å–µ—Ä–≤–µ—Ä:", 
                            value=default_server,
                            placeholder="smtp.gmail.com"
                        )
                    with col2:
                        port_options = {
                            "587 (TLS - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)": 587,
                            "465 (SSL)": 465,
                            "25 (–Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)": 25
                        }
                        port_display = st.selectbox(
                            "–ü–æ—Ä—Ç SMTP:",
                            options=list(port_options.keys()),
                            index=0 if default_port == 587 else (1 if default_port == 465 else 2)
                        )
                        email_port = port_options[port_display]
                    
                    email_username = st.text_input(
                        "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", 
                        value=current_username,
                        placeholder="your.email@gmail.com"
                    )
                    email_password = st.text_input(
                        "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", 
                        type="password",
                        value=current_password,
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    )
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    st.markdown("#### üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    notify_new_orders = st.checkbox("–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", value=current_notify_orders)
                    notify_low_stock = st.checkbox("–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ", value=current_notify_stock)
                    notify_daily_report = st.checkbox("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", value=current_notify_daily)
                
                col1, col2 = st.columns(2)
                with col1:
                    save_smtp = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)
                with col2:
                    test_smtp = st.form_submit_button("üìß –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", use_container_width=True)
                
                if save_smtp:
                    try:
                        cursor.execute('''
                            UPDATE settings 
                            SET email_notifications = ?, smtp_server = ?, smtp_port = ?, 
                                email_username = ?, email_password = ?, notify_new_orders = ?,
                                notify_low_stock = ?, notify_daily_report = ?
                            WHERE user_id = ?
                        ''', (enable_notifications, email_server if enable_notifications else "", 
                             email_port if enable_notifications else 587, 
                             email_username if enable_notifications else "", 
                             email_password if enable_notifications else "", 
                             notify_new_orders, notify_low_stock, notify_daily_report,
                             st.session_state.user_id))
                        conn.commit()
                        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                
                if test_smtp and enable_notifications:
                    try:
                        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        import smtplib
                        from email.mime.text import MIMEText
                        import ssl
                        
                        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        context = ssl.create_default_context()
                        
                        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞
                        if email_port == 465:
                            # SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            server = smtplib.SMTP_SSL(email_server, email_port, context=context)
                        else:
                            # TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            server = smtplib.SMTP(email_server, email_port)
                            server.starttls(context=context)
                        
                        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        server.set_debuglevel(0)
                        
                        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                        server.login(email_username, email_password)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        msg = MIMEText(f"""
–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞! üéâ

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
- –°–µ—Ä–≤–µ—Ä: {email_server}
- –ü–æ—Ä—Ç: {email_port}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email_username}
- –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º
                        """)
                        msg['Subject'] = f"‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä ({datetime.now().strftime('%H:%M')})"
                        msg['From'] = email_username
                        msg['To'] = email_username
                        
                        server.send_message(msg)
                        server.quit()
                        
                        st.success("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                        st.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email_username}")
                        
                    except smtplib.SMTPAuthenticationError as e:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                        if "Gmail" in provider:
                            st.warning("""
                            **–î–ª—è Gmail –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:**
                            1. ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                            2. ‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å!)
                            3. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email
                            
                            **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
                            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google –∞–∫–∫–∞—É–Ω—Ç–∞
                            2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                            3. –ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                            """)
                        else:
                            st.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è")
                        st.code(f"–û—à–∏–±–∫–∞: {str(e)}")
                    
                    except smtplib.SMTPConnectError as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç–∞")
                    
                    except smtplib.SMTPServerDisconnected as e:
                        st.error("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    except Exception as e:
                        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        conn.close()
    
    with tab3:
        st.markdown("""
        <div class="card">
            <h3 style="color: var(--accent-color); margin-bottom: 1rem;">üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown("#### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.write("–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
                all_data = export_all_data(st.session_state.user_id)
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
                    data=all_data,
                    file_name=f"business_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown("#### üì§ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.write("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", 
                type=['xlsx', 'csv'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel –∏ CSV"
            )
            
            if uploaded_file is not None:
                if st.button("üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                    try:
                        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("---")
        st.markdown("#### ‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞")
        
        with st.expander("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"):
            st.warning("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.")
            
            confirm_text = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨ –í–°–ï' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                placeholder="–£–î–ê–õ–ò–¢–¨ –í–°–ï"
            )
            
            if confirm_text == "–£–î–ê–õ–ò–¢–¨ –í–°–ï":
                if st.button("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", type="primary"):
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    st.error("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏")
                    # delete_all_user_data(st.session_state.user_id)
                    # st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
                    # st.session_state.user_id = None
                    # st.rerun()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def export_to_excel(df, sheet_name):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)
    output.seek(0)
    return output.getvalue()

def export_all_data(user_id):
    conn = sqlite3.connect('business_manager.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders_query = '''
        SELECT o.*, GROUP_CONCAT(oi.product_name || " (x" || oi.quantity || ")") as items
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        GROUP BY o.id
    '''
    orders_df = pd.read_sql_query(orders_query, conn, params=(user_id,))
    
    inventory_df = pd.read_sql_query('SELECT * FROM inventory WHERE user_id = ?', 
                                   conn, params=(user_id,))
    
    analytics = get_analytics(user_id)
    analytics_df = pd.DataFrame([analytics])
    
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        orders_df.to_excel(writer, sheet_name='Orders', index=False)
        inventory_df.to_excel(writer, sheet_name='Inventory', index=False)
        analytics_df.to_excel(writer, sheet_name='Analytics', index=False)
    
    output.seek(0)
    return output.getvalue()

def generate_full_report(user_id):
    conn = sqlite3.connect('business_manager.db')
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
    report_query = '''
        SELECT 
            o.order_name,
            o.order_type,
            o.created_at,
            oi.product_name,
            oi.quantity,
            oi.cost_price,
            oi.weight,
            oi.delivery_cost,
            oi.total_cost,
            (oi.total_cost - oi.cost_price - oi.delivery_cost) as profit
        FROM orders o
        JOIN order_items oi ON o.id = oi.order_id
        WHERE o.user_id = ?
        ORDER BY o.created_at DESC
    '''
    
    report_df = pd.read_sql_query(report_query, conn, params=(user_id,))
    conn.close()
    
    return report_df

def send_daily_report(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ email"""
    try:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
        cursor.execute('''
            SELECT email_notifications, smtp_server, smtp_port, email_username, 
                   email_password, notify_daily_report
            FROM settings WHERE user_id = ?
        ''', (user_id,))
        settings = cursor.fetchone()
        
        if not settings or not settings[0] or not settings[5]:  # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT email FROM users WHERE id = ?', (user_id,))
        user_email = cursor.fetchone()[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        report_query = f'''
            SELECT 
                o.order_name,
                oi.product_name,
                oi.quantity,
                oi.total_cost,
                oi.cost_price,
                (oi.total_cost - oi.cost_price) as profit,
                o.status,
                o.order_date
            FROM order_items oi
            JOIN orders o ON oi.order_id = o.id
            WHERE o.user_id = ? AND DATE(o.order_date) = ?
            ORDER BY o.order_date DESC
        '''
        
        cursor.execute(report_query, (user_id, today))
        orders_today = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        if orders_today:
            html_content = f"""
            <html>
            <body>
                <h2>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}</h2>
                <p>–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–æ—Ç –≤–∞—à –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</p>
                
                <h3>üì¶ –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(orders_today)} –ø–æ–∑–∏—Ü–∏–π):</h3>
                <table border="1" style="border-collapse: collapse; width: 100%;">
                    <tr style="background-color: #f2f2f2;">
                        <th>–ó–∞–∫–∞–∑</th>
                        <th>–¢–æ–≤–∞—Ä</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                        <th>–í—ã—Ä—É—á–∫–∞</th>
                        <th>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</th>
                        <th>–ü—Ä–∏–±—ã–ª—å</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
            """
            
            total_revenue = 0
            total_cost = 0
            
            for order in orders_today:
                order_name, product_name, quantity, total_cost_item, cost_price, profit, status, order_date = order
                total_revenue += total_cost_item or 0
                total_cost += cost_price or 0
                
                html_content += f"""
                    <tr>
                        <td>{order_name}</td>
                        <td>{product_name}</td>
                        <td>{quantity}</td>
                        <td>${total_cost_item:.2f}</td>
                        <td>${cost_price:.2f}</td>
                        <td>${profit:.2f}</td>
                        <td>{status}</td>
                    </tr>
                """
            
            total_profit = total_revenue - total_cost
            html_content += f"""
                </table>
                
                <h3>üí∞ –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</h3>
                <ul>
                    <li><strong>–í—ã—Ä—É—á–∫–∞:</strong> ${total_revenue:.2f}</li>
                    <li><strong>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${total_cost:.2f}</li>
                    <li><strong>–ü—Ä–∏–±—ã–ª—å:</strong> ${total_profit:.2f}</li>
                </ul>
                
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</p>
            </body>
            </html>
            """
        else:
            html_content = f"""
            <html>
            <body>
                <h2>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}</h2>
                <p>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</p>
                <p>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±—ã–ª–æ.</p>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä</p>
            </body>
            </html>
            """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        import ssl
        
        msg = MIMEMultipart()
        msg['From'] = settings[3]  # email_username
        msg['To'] = user_email
        msg['Subject'] = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {today}"
        
        msg.attach(MIMEText(html_content, 'html'))
        
        context = ssl.create_default_context()
        with smtplib.SMTP(settings[1], settings[2]) as server:  # smtp_server, smtp_port
            server.starttls(context=context)
            server.login(settings[3], settings[4])  # username, password
            server.send_message(msg)
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return False

if __name__ == "__main__":
    main()
