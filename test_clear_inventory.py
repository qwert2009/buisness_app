#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–∞
"""

import sqlite3
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_clear_inventory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–∞"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        from business_manager import clear_inventory, add_to_inventory, get_inventory, init_db
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 999  # –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    print("\nüì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã...")
    test_products = [
        ("–¢–µ—Å—Ç —Ç–æ–≤–∞—Ä 1", 10, "http://test1.com"),
        ("–¢–µ—Å—Ç —Ç–æ–≤–∞—Ä 2", 5, "http://test2.com"),
        ("–¢–µ—Å—Ç —Ç–æ–≤–∞—Ä 3", 15, "http://test3.com")
    ]
    
    try:
        for name, qty, link in test_products:
            add_to_inventory(test_user_id, name, qty, link)
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–∏–ª–∏—Å—å
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥ –¥–æ –æ—á–∏—Å—Ç–∫–∏...")
    try:
        inventory_before = get_inventory(test_user_id)
        print(f"  üìä –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(inventory_before)}")
        for _, row in inventory_before.iterrows():
            print(f"    ‚Ä¢ {row['product_name']}: {row['quantity']} —à—Ç.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {e}")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–∫–ª–∞–¥
    print("\nüóëÔ∏è –û—á–∏—â–∞–µ–º —Å–∫–ª–∞–¥...")
    try:
        deleted_count = clear_inventory(test_user_id)
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_count}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–∞: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥ –ø—É—Å—Ç
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
    try:
        inventory_after = get_inventory(test_user_id)
        print(f"  üìä –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(inventory_after)}")
        
        if len(inventory_after) == 0:
            print("  ‚úÖ –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
        else:
            print("  ‚ùå –°–∫–ª–∞–¥ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
            for _, row in inventory_after.iterrows():
                print(f"    ‚Ä¢ –û—Å—Ç–∞–ª—Å—è: {row['product_name']}: {row['quantity']} —à—Ç.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞: {e}")
        return
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò –°–ö–õ–ê–î–ê")
    print("=" * 50)
    test_clear_inventory()
